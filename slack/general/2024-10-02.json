[
    {
        "user": "U07PL8JMJCF",
        "type": "message",
        "ts": "1727862872.670719",
        "client_msg_id": "8d7d9859-0202-4e87-8fee-a51ce5b4f691",
        "text": "Hi everyone, are there any plans to get type hints into base R ?",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ga158b01f900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a158b01f90084bb8c9f940463cace127.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "Amando",
            "real_name": "Amando",
            "display_name": "Amando",
            "team": "T01DW9DLB2A",
            "name": "avhzanderigo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727862872.670719",
        "reply_count": 8,
        "reply_users_count": 3,
        "latest_reply": "1727872519.196909",
        "reply_users": [
            "U060RULT44D",
            "U07PL8JMJCF",
            "U021X72PVRN"
        ],
        "replies": [
            {
                "user": "U060RULT44D",
                "ts": "1727865993.900299"
            },
            {
                "user": "U060RULT44D",
                "ts": "1727866031.792549"
            },
            {
                "user": "U07PL8JMJCF",
                "ts": "1727866789.090519"
            },
            {
                "user": "U060RULT44D",
                "ts": "1727868453.072049"
            },
            {
                "user": "U07PL8JMJCF",
                "ts": "1727869276.073929"
            },
            {
                "user": "U060RULT44D",
                "ts": "1727869965.536599"
            },
            {
                "user": "U021X72PVRN",
                "ts": "1727871419.603299"
            },
            {
                "user": "U07PL8JMJCF",
                "ts": "1727872519.196909"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2w4U7",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hi everyone, are there any plans to get type hints into base R ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U060RULT44D",
        "type": "message",
        "ts": "1727865993.900299",
        "client_msg_id": "17dbeb67-5a81-4b65-a458-bea9aa5b2141",
        "text": "You mean in R console?",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "f7ccd27ca9d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-12\/6028895371202_f7ccd27ca9d6b022e19d_72.jpg",
            "first_name": "Tomek",
            "real_name": "Tomek Gieorgijewski",
            "display_name": "Tomek Gieorgijewski",
            "team": "T01DW9DLB2A",
            "name": "cybergeorge2020",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727862872.670719",
        "parent_user_id": "U07PL8JMJCF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vGzXh",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "You mean in R console?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U060RULT44D",
        "type": "message",
        "ts": "1727866031.792549",
        "client_msg_id": "01996747-a678-46e0-9daa-8a1bad6bf55b",
        "text": "Like autocompletion?",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "f7ccd27ca9d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-12\/6028895371202_f7ccd27ca9d6b022e19d_72.jpg",
            "first_name": "Tomek",
            "real_name": "Tomek Gieorgijewski",
            "display_name": "Tomek Gieorgijewski",
            "team": "T01DW9DLB2A",
            "name": "cybergeorge2020",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727862872.670719",
        "parent_user_id": "U07PL8JMJCF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HP9gq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Like autocompletion?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07PL8JMJCF",
        "type": "message",
        "ts": "1727866789.090519",
        "client_msg_id": "cda2ae75-06d9-4952-8acd-d002ae08d8c5",
        "text": "No, type hints as in:\n\n```f &lt;- function(x: integer, y: double, df: data.frame) { ... }```\n",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ga158b01f900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a158b01f90084bb8c9f940463cace127.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "Amando",
            "real_name": "Amando",
            "display_name": "Amando",
            "team": "T01DW9DLB2A",
            "name": "avhzanderigo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727862872.670719",
        "parent_user_id": "U07PL8JMJCF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "CEZgM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "No, type hints as in:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "f <- function(x: integer, y: double, df: data.frame) { ... }"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U060RULT44D",
        "type": "message",
        "ts": "1727868453.072049",
        "edited": {
            "user": "U060RULT44D",
            "ts": "1727868548.000000"
        },
        "client_msg_id": "65d9b56d-0a85-44c8-95aa-22e9fddaccd0",
        "text": "A, OK. :slightly_smiling_face: I read “type” as in “typing” on keyboard :slightly_smiling_face:\nI don’t know of such plans but it’s interesting topic to me.\nMainly because I suffered the lack of such strict typing during development and maintanance of large Shiny apps.\n\nUnderstanding what the function in the middle of chain invocation really accepts was crucial.\n\nHowever I know how it’s hard cause for example many functions could take different type as `x` and just behave differently depending if it’s i.e. `matrix`, `vector` or sth else.\n\n`x` can also be a function as well.\nAnd it’s only a tip of an iceberg.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "f7ccd27ca9d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-12\/6028895371202_f7ccd27ca9d6b022e19d_72.jpg",
            "first_name": "Tomek",
            "real_name": "Tomek Gieorgijewski",
            "display_name": "Tomek Gieorgijewski",
            "team": "T01DW9DLB2A",
            "name": "cybergeorge2020",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727862872.670719",
        "parent_user_id": "U07PL8JMJCF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "d6mwQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "A, OK. "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": " I read “type” as in “typing” on keyboard "
                            },
                            {
                                "type": "emoji",
                                "name": "slightly_smiling_face",
                                "unicode": "1f642"
                            },
                            {
                                "type": "text",
                                "text": "\nI don’t know of such plans but it’s interesting topic to me.\nMainly because I suffered the lack of such strict typing during development and maintanance of large Shiny apps.\n\nUnderstanding what the function in the middle of chain invocation really accepts was crucial.\n\nHowever I know how it’s hard cause for example many functions could take different type as "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and just behave differently depending if it’s i.e. "
                            },
                            {
                                "type": "text",
                                "text": "matrix",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "vector",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or sth else.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " can also be a function as well.\nAnd it’s only a tip of an iceberg."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07PL8JMJCF",
        "type": "message",
        "ts": "1727869276.073929",
        "client_msg_id": "3435fc05-252c-45eb-845d-2063fc12e2a9",
        "text": "It's not a suggestion to somehow include static type checking, but rather at a minimum improve readability and linting, particularly on large, poorly documented R code bases.\n\nI think it would also encourage better code, because if a function takes argument X and behaves differently depending on the type of X, then it's likely a poor design choice in most cases.\n\nAlthough if we must do this, type hinting can accommodate this too, and improves the lives of developers who come after us:\n\n```f &lt;- function(x: integer | data.frame | function) { ... }```",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ga158b01f900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a158b01f90084bb8c9f940463cace127.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "Amando",
            "real_name": "Amando",
            "display_name": "Amando",
            "team": "T01DW9DLB2A",
            "name": "avhzanderigo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727862872.670719",
        "parent_user_id": "U07PL8JMJCF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1cr2\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not a suggestion to somehow include static type checking, but rather at a minimum improve readability and linting, particularly on large, poorly documented R code bases.\n\nI think it would also encourage better code, because if a function takes argument X and behaves differently depending on the type of X, then it's likely a poor design choice in most cases.\n\nAlthough if we must do this, type hinting can accommodate this too, and improves the lives of developers who come after us:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "f <- function(x: integer | data.frame | function) { ... }"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U060RULT44D",
        "type": "message",
        "ts": "1727869965.536599",
        "client_msg_id": "a7a24ec3-4197-4f16-acdb-334104a85d24",
        "text": "How would it work? Ignored by R interpreter and only for reading by human?\nIsn’t documentation enough? Like roxygen headers before the function?\n\nCould you elaborate more on your idea of the syntax to deal with default values?\nIs it optional or mandatory?\n\nOne function which does the same but for different data types is not necessarily bad design. When I said behaves differently it didn’t mean different class of result but rather different implementation of the same idea.\n\nIt’s well known abstraction, you may think of method overloading or superclass which gives common interface for its children (polymorhpism).",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "f7ccd27ca9d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-12\/6028895371202_f7ccd27ca9d6b022e19d_72.jpg",
            "first_name": "Tomek",
            "real_name": "Tomek Gieorgijewski",
            "display_name": "Tomek Gieorgijewski",
            "team": "T01DW9DLB2A",
            "name": "cybergeorge2020",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727862872.670719",
        "parent_user_id": "U07PL8JMJCF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F1tAS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How would it work? Ignored by R interpreter and only for reading by human?\nIsn’t documentation enough? Like roxygen headers before the function?\n\nCould you elaborate more on your idea of the syntax to deal with default values?\nIs it optional or mandatory?\n\nOne function which does the same but for different data types is not necessarily bad design. When I said behaves differently it didn’t mean different class of result but rather different implementation of the same idea.\n\nIt’s well known abstraction, you may think of method overloading or superclass which gives common interface for its children (polymorhpism)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "<@U07PL8JMJCF>: Without static type checking, do you mean for purely documentation purposes, or for runtime checking too? There's the 'types' package that overloads the `?` operator for type hinting, and I think one overloads `:` as well, but uses a different call to create functions. Then there's the 'typehint' package which seems to work by parsing special comments.\nFor base R, you have the declare(...) primitive operation. There are ongoing plans to use it for declating arguments for non-standard evaluation, but no general type hinting yet.",
        "username": "Ivan Krylov",
        "type": "message",
        "ts": "1727870414.538459",
        "bot_id": "B07KW7ZQJSJ",
        "app_id": "A1BKR8Y8J",
        "thread_ts": "1727870414.538459",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1727871671.959789",
        "reply_users": [
            "U07PL8JMJCF"
        ],
        "replies": [
            {
                "user": "U07PL8JMJCF",
                "ts": "1727871671.959789"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dUHHD",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U07PL8JMJCF"
                            },
                            {
                                "type": "text",
                                "text": ": Without static type checking, do you mean for purely documentation purposes, or for runtime checking too? There's the 'types' package that overloads the "
                            },
                            {
                                "type": "text",
                                "text": "?",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " operator for type hinting, and I think one overloads "
                            },
                            {
                                "type": "text",
                                "text": ":",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as well, but uses a different call to create functions. Then there's the 'typehint' package which seems to work by parsing special comments.\nFor base R, you have the declare(...) primitive operation. There are ongoing plans to use it for declating arguments for non-standard evaluation, but no general type hinting yet."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "eyes",
                "users": [
                    "U060RULT44D"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U021X72PVRN",
        "type": "message",
        "ts": "1727871419.603299",
        "client_msg_id": "0dfeb879-53dc-47fc-a35b-a1996f0c14be",
        "text": "There is also <https:\/\/vapour.run\/|Vapour> which is a typed superset that transpiles to R, still in the very early stages of development, but capable of performing compile-time checks similar to what Typescript does for Javascript.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "gc96fb19f1c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c96fb19f1c22a8c67dbb6db88165e280.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Carroll",
            "display_name": "Jonathan Carroll",
            "team": "T01DW9DLB2A",
            "name": "jono",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727862872.670719",
        "parent_user_id": "U07PL8JMJCF",
        "attachments": [
            {
                "image_url": "https:\/\/vapour.run\/img\/vapour-social.png",
                "image_width": 2668,
                "image_height": 1334,
                "image_bytes": 180254,
                "from_url": "https:\/\/vapour.run\/",
                "service_icon": "https:\/\/vapour.run\/img\/favicon.ico",
                "id": 1,
                "original_url": "https:\/\/vapour.run\/",
                "fallback": "Vapour | Vapour",
                "text": "Write more robust R code",
                "title": "Vapour | Vapour",
                "title_link": "https:\/\/vapour.run\/",
                "service_name": "vapour.run"
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QX+jU",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There is also "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/vapour.run\/",
                                "text": "Vapour"
                            },
                            {
                                "type": "text",
                                "text": " which is a typed superset that transpiles to R, still in the very early stages of development, but capable of performing compile-time checks similar to what Typescript does for Javascript."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07PL8JMJCF",
        "type": "message",
        "ts": "1727871671.959789",
        "client_msg_id": "77a60647-7223-483a-9b8f-a02ca7d52910",
        "text": "Documentation and linting purposes as a minimum.\nAnything on top of that would of course be nice though.\n\nI know of some of these packages, but I am particularly interested if this is going to make it's way into base R.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ga158b01f900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a158b01f90084bb8c9f940463cace127.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "Amando",
            "real_name": "Amando",
            "display_name": "Amando",
            "team": "T01DW9DLB2A",
            "name": "avhzanderigo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727870414.538459",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6gY5+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Documentation and linting purposes as a minimum.\nAnything on top of that would of course be nice though.\n\nI know of some of these packages, but I am particularly interested if this is going to make it's way into base R."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07PL8JMJCF",
        "type": "message",
        "ts": "1727872519.196909",
        "client_msg_id": "6ff69a72-8fa6-47f4-b9f6-5dfeff4bb4fb",
        "text": "<@U060RULT44D> documentation is only as good as the writer makes it, and often the writer leaves out the intended type of the argument.\n\nRegarding syntax, the `:`  syntax is a popular choice (I personally like it too).\nAs for default arguments, `function(x: integer = 1L)`  like Python is a possibility.\nIt would be optional of course.\n\nPolymorphism in the sense of overloading is fine when it comes to a user understanding the code, since you have two or more distinct function signatures anyway.\nWhen it comes to R though, I would argue that a function along the lines of:\n\n```f &lt;- function(x) {\n    if (is.integer(x))    do_integer_stuff(x)\n    if (is.data.frame(x)) do_dataframe_stuff(x)\n}```\nshould probably fail a code-review.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ga158b01f900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a158b01f90084bb8c9f940463cace127.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "Amando",
            "real_name": "Amando",
            "display_name": "Amando",
            "team": "T01DW9DLB2A",
            "name": "avhzanderigo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727862872.670719",
        "parent_user_id": "U07PL8JMJCF",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Qzf5n",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U060RULT44D"
                            },
                            {
                                "type": "text",
                                "text": " documentation is only as good as the writer makes it, and often the writer leaves out the intended type of the argument.\n\nRegarding syntax, the "
                            },
                            {
                                "type": "text",
                                "text": ":",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  syntax is a popular choice (I personally like it too).\nAs for default arguments, "
                            },
                            {
                                "type": "text",
                                "text": "function(x: integer = 1L)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  like Python is a possibility.\nIt would be optional of course.\n\nPolymorphism in the sense of overloading is fine when it comes to a user understanding the code, since you have two or more distinct function signatures anyway.\nWhen it comes to R though, I would argue that a function along the lines of:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "f <- function(x) {\n    if (is.integer(x))    do_integer_stuff(x)\n    if (is.data.frame(x)) do_dataframe_stuff(x)\n}"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nshould probably fail a code-review."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "That's a big feature because it has the potential to touch all of: the grammar (src\/main\/gram.y), the evaluator (eval.c, both regular and bytecode), the bytecode compiler (src\/library\/compiler\/noweb\/compiler.nw). The type information would need to be stored somewhere, hopefully without breaking the existing serialization format for CLOSXPs. Function calls in R are already not very fast, so any runtime type checks need to be weighted against slowing it down further.\nThe hints need to be expressive enough for non-standard evaluation, both the explicit kind when you capture the expression using substitute() and the implicit kind when you purposefully avoid evaluating the argument until it's time to force() it for side effects.",
        "username": "Ivan Krylov",
        "type": "message",
        "ts": "1727873636.831709",
        "bot_id": "B07KW7ZQJSJ",
        "app_id": "A1BKR8Y8J",
        "thread_ts": "1727873636.831709",
        "reply_count": 1,
        "reply_users_count": 1,
        "latest_reply": "1727881856.308929",
        "reply_users": [
            "U07PL8JMJCF"
        ],
        "replies": [
            {
                "user": "U07PL8JMJCF",
                "ts": "1727881856.308929"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+eiTA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That's a big feature because it has the potential to touch all of: the grammar (src\/main\/gram.y), the evaluator (eval.c, both regular and bytecode), the bytecode compiler (src\/library\/compiler\/noweb\/compiler.nw). The type information would need to be stored somewhere, hopefully without breaking the existing serialization format for CLOSXPs. Function calls in R are already not very fast, so any runtime type checks need to be weighted against slowing it down further.\nThe hints need to be expressive enough for non-standard evaluation, both the explicit kind when you capture the expression using substitute() and the implicit kind when you purposefully avoid evaluating the argument until it's time to force() it for side effects."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U07PL8JMJCF",
        "type": "message",
        "ts": "1727881856.308929",
        "client_msg_id": "3351a75a-8e40-4658-9a0f-5cf31fc385a4",
        "text": "I think it would be 100% worth it, and I personally think it's one of R's biggest drawbacks.\n\nPython has it, Julia has it, Typescript was developed specifically to make writing Javascript a better experience by being strongly typed.\nAll these languages are better off as a result, and R would be no different.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ga158b01f900",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/a158b01f90084bb8c9f940463cace127.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0021-72.png",
            "first_name": "Amando",
            "real_name": "Amando",
            "display_name": "Amando",
            "team": "T01DW9DLB2A",
            "name": "avhzanderigo",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1727873636.831709",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jcw6B",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think it would be 100% worth it, and I personally think it's one of R's biggest drawbacks.\n\nPython has it, Julia has it, Typescript was developed specifically to make writing Javascript a better experience by being strongly typed.\nAll these languages are better off as a result, and R would be no different."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "Without the changes to syntax it's already being done by packages on CRAN and elsewhere, so perhaps the starting point could be to try to implement the desired syntax, starting with the `formlist` rule on `gram.y` line 559.",
        "username": "Ivan Krylov",
        "type": "message",
        "ts": "1727882008.997769",
        "bot_id": "B07KW7ZQJSJ",
        "app_id": "A1BKR8Y8J",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vyo\/A",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Without the changes to syntax it's already being done by packages on CRAN and elsewhere, so perhaps the starting point could be to try to implement the desired syntax, starting with the "
                            },
                            {
                                "type": "text",
                                "text": "formlist",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rule on "
                            },
                            {
                                "type": "text",
                                "text": "gram.y",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " line 559."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01KXU8UNRX",
                    "U060RULT44D"
                ],
                "count": 2
            }
        ]
    }
]
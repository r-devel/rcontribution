[
    {
        "user": "U060HHXGD7G",
        "type": "message",
        "ts": "1697554174.901309",
        "client_msg_id": "f57a13dc-a3be-430b-9bde-d5c32653097a",
        "text": "Has anyone here successfully called APIs in R using an async methodology? I know packages like `future` and `promises` exist.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g046e93a1274",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/046e93a12746d903e28169e2c68b587b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Rauscher",
            "display_name": "Jonathan Rauscher",
            "team": "T01DW9DLB2A",
            "name": "jonathan.rauscher",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1697554174.901309",
        "reply_count": 12,
        "reply_users_count": 4,
        "latest_reply": "1697723144.001919",
        "reply_users": [
            "U02112JNFML",
            "U060HHXGD7G",
            "U0358K327NW",
            "U0273CKQBAT"
        ],
        "replies": [
            {
                "user": "U02112JNFML",
                "ts": "1697554900.568339"
            },
            {
                "user": "U060HHXGD7G",
                "ts": "1697555149.436509"
            },
            {
                "user": "U02112JNFML",
                "ts": "1697555454.889859"
            },
            {
                "user": "U02112JNFML",
                "ts": "1697555526.931259"
            },
            {
                "user": "U060HHXGD7G",
                "ts": "1697558236.868509"
            },
            {
                "user": "U02112JNFML",
                "ts": "1697558327.585179"
            },
            {
                "user": "U0358K327NW",
                "ts": "1697623710.639069"
            },
            {
                "user": "U0273CKQBAT",
                "ts": "1697636074.720159"
            },
            {
                "user": "U060HHXGD7G",
                "ts": "1697641664.533479"
            },
            {
                "user": "U060HHXGD7G",
                "ts": "1697641679.787179"
            },
            {
                "user": "U060HHXGD7G",
                "ts": "1697723096.216749"
            },
            {
                "user": "U060HHXGD7G",
                "ts": "1697723144.001919"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HVHgJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Has anyone here successfully called APIs in R using an async methodology? I know packages like "
                            },
                            {
                                "type": "text",
                                "text": "future",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "promises",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " exist."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02112JNFML",
        "type": "message",
        "ts": "1697554900.568339",
        "client_msg_id": "b518aaba-e8c2-4943-91b6-f9b997d42052",
        "text": "See also <https:\/\/github.com\/gaborcsardi\/async>\n\nIt's compatible with coro. All experimental, but the core is solid. Gabor uses async in packages like pak.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "b2d6c2d54c45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-05-07\/2027091278199_b2d6c2d54c454e32197b_72.png",
            "first_name": "",
            "real_name": "Lionel Henry",
            "display_name": "Lionel Henry",
            "team": "T01DW9DLB2A",
            "name": "lionel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1697554174.901309",
        "parent_user_id": "U060HHXGD7G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gmSou",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "See also "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/gaborcsardi\/async"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIt's compatible with coro. All experimental, but the core is solid. Gabor uses async in packages like pak."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U060HHXGD7G",
        "type": "message",
        "ts": "1697555149.436509",
        "client_msg_id": "05d4b693-db1b-48b5-b487-d2e1b72b80a8",
        "text": "<@U02112JNFML> This library is fuego :fire: Definitely going to dig into this. Thanks!",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g046e93a1274",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/046e93a12746d903e28169e2c68b587b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Rauscher",
            "display_name": "Jonathan Rauscher",
            "team": "T01DW9DLB2A",
            "name": "jonathan.rauscher",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1697554174.901309",
        "parent_user_id": "U060HHXGD7G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gv6K+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U02112JNFML"
                            },
                            {
                                "type": "text",
                                "text": " This library is fuego "
                            },
                            {
                                "type": "emoji",
                                "name": "fire",
                                "unicode": "1f525"
                            },
                            {
                                "type": "text",
                                "text": " Definitely going to dig into this. Thanks!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02112JNFML",
        "type": "message",
        "ts": "1697555454.889859",
        "client_msg_id": "bdba11ca-0e20-43e7-9bf8-fc962392a324",
        "text": "There's no plans to publish it on CRAN unfortunately, so to use it you need to copy it in your package like this: <https:\/\/github.com\/r-lib\/pkgcache\/blob\/main\/R\/aaa-async.R>",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "b2d6c2d54c45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-05-07\/2027091278199_b2d6c2d54c454e32197b_72.png",
            "first_name": "",
            "real_name": "Lionel Henry",
            "display_name": "Lionel Henry",
            "team": "T01DW9DLB2A",
            "name": "lionel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1697554174.901309",
        "parent_user_id": "U060HHXGD7G",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B01V53YD4FJ",
                "app_unfurl_url": "https:\/\/github.com\/r-lib\/pkgcache\/blob\/main\/R\/aaa-async.R",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/r-lib\/pkgcache\/blob\/main\/R\/aaa-async.R | aaa-async.R>",
                "text": "```\n\n#' Create an async function\n#'\n#' Create an async function, that returns a deferred value, from a\n#' regular function. If `fun` is already an async function, then it does\n#' nothing, just returns it.\n#'\n#' The result function will have the same arguments, with the same default\n#' values, and the same environment as the original input function.\n#'\n#' @param fun Original function.\n#' @return Async version of the original function.\n#'\n#' @noRd\n#' @examples\n#' f <- function(x) 42\n#' af <- async(f)\n#' is_async(f)\n#' is_async(af)\n#' f()\n#' synchronise(dx <- af())\n#' dx\n\nasync <- function(fun) {\n  fun <- as.function(fun)\n  if (is_async(fun)) return(fun)\n\n  async_fun <- fun\n  body(async_fun) <- bquote({\n    mget(ls(environment(), all.names = TRUE), environment())\n    fun2 <- function() {\n      evalq(\n      .(body(fun)),\n      envir = parent.env(environment())\n      )\n    }\n\n    deferred$new(\n      type = \"async\",\n      action = function(resolve) resolve(fun2())\n    )\n  })\n\n  # This is needed, otherwise async_fun might not find 'deferred'\n  async_env <- new.env(parent = environment(async_fun))\n  async_env$deferred <- deferred\n  environment(async_fun) <- async_env\n\n  mark_as_async(async_fun)\n}\n\nmark_as_async <- function(fun) {\n  attr(body(fun), \"async\")$async <- TRUE\n\n  ## These are not valid any more, anyway\n  attr(fun, \"srcref\") <- NULL\n  attr(body(fun), \"srcref\") <- NULL\n\n  fun\n}\n\n#' Checks if a function is async\n#'\n#' If `fun` is not a function, an error is thrown.\n#'\n#' Currently, it checks for the `async` attribute, which is set by\n#' [async()].\n#'\n#' @param fun Function.\n#' @return Logical scalar, whether `fun` is async.\n#'\n#' @noRd\n#' @examples\n#' f <- function(x) 42\n#' af <- async(f)\n#' is_async(f)\n#' is_async(af)\n#' f()\n#' synchronise(dx <- af())\n#' dx\n\nis_async <- function(fun) {\n  assert_that(is.function(fun))\n  is.list(a <- attr(body(fun), \"async\")) && identical(a$async, TRUE)\n}\n\nis_string <- function(x) {\n  is.character(x) && length(x) == 1 && !<http:\/\/is.na|is.na>(x)\n}\n\non_failure(is_string) <- function(call, env) {\n  paste0(deparse(call$x), \" is not a string (length 1 character)\")\n}\n\nis_flag <- function(x) {\n  is.logical(x) && length(x) == 1 && !<http:\/\/is.na|is.na>(x)\n}\n\non_failure(is_flag) <- function(call, env) {\n  paste0(deparse(call$x), \" is not a flag (length 1 logical)\")\n}\n\nis_action_function <- function(x) {\n  is.function(x) && length(formals(x)) %in% 1:2\n}\n\non_failure(is_action_function) <- function(call, env) {\n  paste0(deparse(call$x), \" is not a function with two arguments\")\n}\n\nis_time_interval <- function(x) {\n  inherits(x, \"difftime\") ||\n    (is.numeric(x) && length(x) == 1 && !is.na(x) && x >= 0)\n}\n\non_failure(is_time_interval) <- function(call, env) {\n  paste0(deparse(call$x), \" is not a valid time interval\")\n}\n\nis_count <- function(x) {\n  is.numeric(x) && length(x) == 1 && !<http:\/\/is.na|is.na>(x) && as.integer(x) == x\n}\n\non_failure(is_count) <- function(call, env) {\n  paste0(deparse(call$x), \" is not a count (non-negative integer)\")\n}\n\nis_flag <- function(x) {\n  is.logical(x) && length(x) == 1 && !<http:\/\/is.na|is.na>(x)\n}\n\non_failure(is_flag) <- function(call, env) {\n  paste0(deparse(call$x), \" must be a flag (length 1 logical)\")\n}\n\n#' Retry an asynchronous function with exponential backoff\n#'\n#' Keeps trying until the function's deferred value resolves without\n#' error, or `times` tries have been performed, or `time_limit` seconds\n#' have passed since the start of the first try.\n#'\n#' Note that all unnamed arguments are passed to `task`.\n#'\n#' @param task An asynchronous function.\n#' @param ... Arguments to pass to `task`.\n#' @param .args More arguments to pass to `task`.\n#' @param times Maximum number of tries.\n#' @param time_limit Maximum number of seconds to try.\n#' @param custom_backoff If not `NULL` then a callback function to\n#'   calculate waiting time, after the `i`the try. `i` is passed as an\n#'   argument. If `NULL`, then the default is used, which is a uniform\n#'   random number of seconds between 1 and 2^i.\n#' @param on_progress Callback function for a progress bar. Retries are\n#'   announced here, if not `NULL`. `on_progress` is called with two\n#'   arguments. The first is a named list with entries:\n#'   * `event`: string that is either `\"retry\"` or `\"givenup\"`,\n#'   * `tries`: number of tried so far,\n#'   * `spent`: number of seconds spent trying so far,\n#'   * `error`: the error object for the last failure,\n#'   * `retry_in`: number of seconds before the next try.\n#'   The second argument is `progress_data`.\n#' @param progress_data `async_backoff()` will pass this object to\n#'   `on_progress` as the second argument.\n#' @return Deferred value for the operation with retries.\n#'\n#' @family async control flow\n#' @noRd\n#' @examples\n#' \\donttest{\n#' afun <- function() {\n#'   wait_100_ms <- function(i) 0.1\n#'   async_backoff(\n#'     function() if (runif(1) < 0.8) stop(\"nope\") else \"yes!\",\n#'     times = 5,\n#'     custom_backoff = wait_100_ms\n#'   )\n#' }\n#'\n#' # There is a slight chance that it fails\n#' tryCatch(synchronise(afun()), error = function(e) e)\n#' }\n\nasync_backoff <- function(task, ..., .args = list(), times = Inf,\n                          time_limit = Inf, custom_backoff = NULL,\n                          on_progress = NULL, progress_data = NULL) {\n\n  task <- async(task)\n  args <- c(list(...), .args)\n  times <- times\n  time_limit <- time_limit\n  custom_backoff <- custom_backoff %||% default_backoff\n  on_progress <- on_progress\n  progress_data <- progress_data\n\n  did <- 0L\n  started <- NULL\n  limit <- NULL\n\n  self <- deferred$new(\n    type = \"backoff\", call = sys.call(),\n    action = function(resolve) {\n      started <<- Sys.time()\n      limit <<- started + time_limit\n      do.call(task, args)$then(self)\n    },\n    parent_reject = function(value, resolve) {\n      did <<- did + 1L\n      now <- Sys.time()\n      if (did < times && now < limit) {\n        wait <- custom_backoff(did)\n        if (!is.null(on_progress)) {\n          on_progress(list(\n            event = \"retry\",\n            tries = did,\n            spent = now - started,\n            error = value,\n            retry_in = wait\n          ), progress_data)\n        }\n        delay(wait)$\n          then(function() do.call(task, args))$\n          then(self)\n      } else {\n        if (!is.null(on_progress)) {\n          on_progress(list(\n            event = \"givenup\",\n            tries = did,\n            spent = now - started,\n            error = value,\n            retry_in = NA_real_\n          ), progress_data)\n        }\n        stop(value)\n      }\n    }\n  )\n}\n\nasync_backoff <- mark_as_async(async_backoff)\n\ndefault_backoff <- function(i) {\n  as.integer(stats::runif(1, min = 1, max = 2^i) * 1000) \/ 1000\n}\n\n#' Asynchronous function call, in a worker pool\n#'\n#' The function will be called on another process, very much like\n#' [callr::r()].\n#'\n#' @param func Function to call. See also the notes at [callr::r()].\n#' @param args Arguments to pass to the function. They will be copied\n#'   to the worker process.\n#' @return Deferred object.\n#'\n#' @noRd\n\ncall_function <- function(func, args = list()) {\n  func; args\n\n  id <- NULL\n\n  deferred$new(\n    type = \"pool-task\", call = sys.call(),\n    action = function(resolve) {\n      resolve\n      reject <- environment(resolve)$private$reject\n      id <<- get_default_event_loop()$add_pool_task(\n        function(err, res) if (is.null(err)) resolve(res) else reject(err),\n        list(func = func, args = args))\n    },\n    on_cancel = function(reason) {\n      if (!is.null(id)) {\n        get_default_event_loop()$cancel(id)\n      }\n    }\n  )\n}\n\ncall_function <- mark_as_async(call_function)\n\n#' Make a minimal deferred that resolves to the specified value\n#'\n#' This is sometimes useful to start a deferred chain.\n#'\n#' Note that the evaluation of `value` is forced when the deferred value\n#' is created.\n#'\n#' @param value The value to resolve to.\n#' @return A deferred value.\n#'\n#' @noRd\n#' @examples\n#' afun <- async(function() {…",
                "title": "<https:\/\/github.com\/r-lib\/pkgcache\/blob\/main\/R\/aaa-async.R | aaa-async.R>",
                "footer": "<https:\/\/github.com\/r-lib\/pkgcache|r-lib\/pkgcache>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "nhnNQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's no plans to publish it on CRAN unfortunately, so to use it you need to copy it in your package like this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-lib\/pkgcache\/blob\/main\/R\/aaa-async.R"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U02112JNFML",
        "type": "message",
        "ts": "1697555526.931259",
        "client_msg_id": "2400fbb6-5943-43e0-85ec-2d28ec539de4",
        "text": "To use it with coro copy this at top level:\n\n```# {coro} operations for the {async} package\n\n.__coro_async_ops__. &lt;- coro::async_ops(\n  package = \"async\",\n  then = function(x, callback) {\n    x$\n      then(callback)$\n      catch(error = function(err) callback(stop(err)))\n  },\n  as_promise = function(x) as_deferred(x)\n)\nas_deferred &lt;- function(x) {\n  if (async::is_deferred(x)) {\n    x\n  } else {\n    async::async_constant(x)\n  }\n}```",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "b2d6c2d54c45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-05-07\/2027091278199_b2d6c2d54c454e32197b_72.png",
            "first_name": "",
            "real_name": "Lionel Henry",
            "display_name": "Lionel Henry",
            "team": "T01DW9DLB2A",
            "name": "lionel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1697554174.901309",
        "parent_user_id": "U060HHXGD7G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "p9pYe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "To use it with coro copy this at top level:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# {coro} operations for the {async} package\n\n.__coro_async_ops__. <- coro::async_ops(\n  package = \"async\",\n  then = function(x, callback) {\n    x$\n      then(callback)$\n      catch(error = function(err) callback(stop(err)))\n  },\n  as_promise = function(x) as_deferred(x)\n)\nas_deferred <- function(x) {\n  if (async::is_deferred(x)) {\n    x\n  } else {\n    async::async_constant(x)\n  }\n}"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U060HHXGD7G",
        "type": "message",
        "ts": "1697558236.868509",
        "client_msg_id": "c6b92a80-c8ab-4672-a507-086eee4f6a77",
        "text": "Two things <@U02112JNFML>\n\n1. Couldn't we just install from github via devtools?\n2. What exactly is `coro`?",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g046e93a1274",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/046e93a12746d903e28169e2c68b587b.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0001-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Rauscher",
            "display_name": "Jonathan Rauscher",
            "team": "T01DW9DLB2A",
            "name": "jonathan.rauscher",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1697554174.901309",
        "parent_user_id": "U060HHXGD7G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3hqWT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Two things "
                            },
                            {
                                "type": "user",
                                "user_id": "U02112JNFML"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Couldn't we just install from github via devtools?"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "What exactly is "
                                    },
                                    {
                                        "type": "text",
                                        "text": "coro",
                                        "style": {
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": "?"
                                    }
                                ]
                            }
                        ],
                        "style": "ordered",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U02112JNFML",
        "type": "message",
        "ts": "1697558327.585179",
        "client_msg_id": "9c69f67a-be47-4a0d-8a5e-9210b90d2d20",
        "text": "Yes if that's not a problem for you (i.e. you don't need your project on CRAN) installing from github is fine.\n\ncoro is for `await()` syntax: <https:\/\/github.com\/r-lib\/coro>",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "b2d6c2d54c45",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-05-07\/2027091278199_b2d6c2d54c454e32197b_72.png",
            "first_name": "",
            "real_name": "Lionel Henry",
            "display_name": "Lionel Henry",
            "team": "T01DW9DLB2A",
            "name": "lionel",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1697554174.901309",
        "parent_user_id": "U060HHXGD7G",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jfTnz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes if that's not a problem for you (i.e. you don't need your project on CRAN) installing from github is fine.\n\ncoro is for "
                            },
                            {
                                "type": "text",
                                "text": "await()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " syntax: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-lib\/coro"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
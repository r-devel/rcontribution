[
    {
        "user": "U035M81N341",
        "type": "message",
        "ts": "1685357903.782849",
        "client_msg_id": "46c3df6a-8223-46aa-ab21-8b5c522d715b",
        "text": "I’m finding that the Challenges in Modern C are beyond the scope of what I have the time to work on, but the exercises from the King book that Heather shared in the repo lead me wanting to challenge myself a little bit more. So, for this week, I set my own challenge. Starting from Programming Projects 1 and 2 from <https:\/\/github.com\/r-devel\/c-book-club\/blob\/main\/exercises\/Session%202\/4%20-%20Expressions.pdf>, I challenged myself to write a programming that would reverse *any* integer from 2 to 9 digits. It was a good opportunity to revise some of the material from last week as well. If anyone else fancies having a go at this, it’d be great to compare approaches!",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "c4cd2d45eb7b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-02-05\/6583494822997_c4cd2d45eb7bfbf5886a_72.jpg",
            "first_name": "Ella",
            "real_name": "Ella Kaye",
            "display_name": "Ella Kaye",
            "team": "T01DW9DLB2A",
            "name": "ella.kaye",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1685357903.782849",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1685400482.588419",
        "reply_users": [
            "U035M81N341",
            "U052P1VQ989"
        ],
        "replies": [
            {
                "user": "U035M81N341",
                "ts": "1685358070.298569"
            },
            {
                "user": "U052P1VQ989",
                "ts": "1685400482.588419"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GjjYm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I’m finding that the Challenges in Modern C are beyond the scope of what I have the time to work on, but the exercises from the King book that Heather shared in the repo lead me wanting to challenge myself a little bit more. So, for this week, I set my own challenge. Starting from Programming Projects 1 and 2 from "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-devel\/c-book-club\/blob\/main\/exercises\/Session%202\/4%20-%20Expressions.pdf"
                            },
                            {
                                "type": "text",
                                "text": ", I challenged myself to write a programming that would reverse "
                            },
                            {
                                "type": "text",
                                "text": "any",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " integer from 2 to 9 digits. It was a good opportunity to revise some of the material from last week as well. If anyone else fancies having a go at this, it’d be great to compare approaches!"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U051VQFTL91",
                    "U05216ACQ4S",
                    "U052P1VQ989",
                    "U053BP20H8E"
                ],
                "count": 4
            },
            {
                "name": "+1::skin-tone-5",
                "users": [
                    "U041CL6454N"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U035M81N341",
        "type": "message",
        "ts": "1685358070.298569",
        "client_msg_id": "d41ecb0f-6f3b-4c9c-996d-60a6ed76b08e",
        "text": "Modern C hasn’t yet covered reading in user input, but this covers the basics of how to do it: <https:\/\/www.freecodecamp.org\/news\/using-scanf-in-c\/>",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "c4cd2d45eb7b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-02-05\/6583494822997_c4cd2d45eb7bfbf5886a_72.jpg",
            "first_name": "Ella",
            "real_name": "Ella Kaye",
            "display_name": "Ella Kaye",
            "team": "T01DW9DLB2A",
            "name": "ella.kaye",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1685357903.782849",
        "parent_user_id": "U035M81N341",
        "attachments": [
            {
                "image_url": "https:\/\/www.freecodecamp.org\/news\/content\/images\/2023\/03\/pexels-element-digital-1370294.jpg",
                "image_width": 2000,
                "image_height": 1335,
                "image_bytes": 370304,
                "from_url": "https:\/\/www.freecodecamp.org\/news\/using-scanf-in-c\/",
                "service_icon": "https:\/\/cdn.freecodecamp.org\/universal\/favicons\/favicon.ico",
                "ts": 1678139970,
                "id": 1,
                "original_url": "https:\/\/www.freecodecamp.org\/news\/using-scanf-in-c\/",
                "fallback": "freeCodeCamp.org: How to Use scanf( ) in C to Read and Store User Input",
                "text": "The scanf() function is a commonly used input function in the C programming language. It allows you to read input from the user or from a file and store that input in variables of different data types. Input is an essential part of most programs, and the scanf() function",
                "title": "How to Use scanf( ) in C to Read and Store User Input",
                "title_link": "https:\/\/www.freecodecamp.org\/news\/using-scanf-in-c\/",
                "service_name": "freeCodeCamp.org",
                "fields": [
                    {
                        "value": "Valentine Gatwiri",
                        "title": "Written by",
                        "short": true
                    },
                    {
                        "value": "C Programming",
                        "title": "Filed under",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "L4J1x",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Modern C hasn’t yet covered reading in user input, but this covers the basics of how to do it: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/www.freecodecamp.org\/news\/using-scanf-in-c\/"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U053BP20H8E"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01F5FZJ4MN",
        "type": "message",
        "ts": "1685366448.100809",
        "client_msg_id": "ac5ff40b-7071-42a0-afeb-52cfcc0dd058",
        "text": "I'm finding that they are beyond the scope of what I can understand. Challenge 4 I can't even understand the first sentence.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g9f3e8927ec9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/9f3e8927ec981edfb1dc3320072539cc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Elio",
            "display_name": "Elio",
            "team": "T01DW9DLB2A",
            "name": "eliocampitelli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1685366448.100809",
        "reply_count": 2,
        "reply_users_count": 2,
        "latest_reply": "1685400688.377589",
        "reply_users": [
            "U035M81N341",
            "U053BP20H8E"
        ],
        "replies": [
            {
                "user": "U035M81N341",
                "ts": "1685370249.669539"
            },
            {
                "user": "U053BP20H8E",
                "ts": "1685400688.377589"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A7\/lz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I'm finding that they are beyond the scope of what I can understand. Challenge 4 I can't even understand the first sentence."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U041CL6454N",
        "type": "message",
        "ts": "1685368506.672709",
        "client_msg_id": "50493e4a-b4e3-4094-bff5-18c5168e14f4",
        "text": "This week's exercises and challenges are quite interesting, but sadly due to my ongoing exams, I wasn't even able to look at them :smiling_face_with_tear:",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "0e3d8ea67951",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-01-24\/4687497652629_0e3d8ea67951340d9e0a_72.jpg",
            "first_name": "Debartha",
            "real_name": "Debartha Paul",
            "display_name": "Debartha Paul",
            "team": "T01DW9DLB2A",
            "name": "pauldeep102",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UOJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This week's exercises and challenges are quite interesting, but sadly due to my ongoing exams, I wasn't even able to look at them "
                            },
                            {
                                "type": "emoji",
                                "name": "smiling_face_with_tear",
                                "unicode": "1f972"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U035M81N341",
        "type": "message",
        "ts": "1685370249.669539",
        "client_msg_id": "238b8e62-73b7-4eb5-9803-058f201fba70",
        "text": "Agreed, couldn't get my head around this one at all.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "c4cd2d45eb7b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-02-05\/6583494822997_c4cd2d45eb7bfbf5886a_72.jpg",
            "first_name": "Ella",
            "real_name": "Ella Kaye",
            "display_name": "Ella Kaye",
            "team": "T01DW9DLB2A",
            "name": "ella.kaye",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1685366448.100809",
        "parent_user_id": "U01F5FZJ4MN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SOHY4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Agreed, couldn't get my head around this one at all."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U052P1VQ989",
        "type": "message",
        "ts": "1685400482.588419",
        "client_msg_id": "b9b4f988-e0b4-4fd8-a43b-57ec64f5a3a6",
        "text": "wasn’t aware of this exercise folder, <@U035M81N341>! Thank you for pointing it out!",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g58da21dec78",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/58da21dec785f9d6040972c1feaff42d.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0026-72.png",
            "first_name": "Trang",
            "real_name": "Trang Le",
            "display_name": "Trang Le",
            "team": "T01DW9DLB2A",
            "name": "ttle",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1685357903.782849",
        "parent_user_id": "U035M81N341",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "spJhb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "wasn’t aware of this exercise folder, "
                            },
                            {
                                "type": "user",
                                "user_id": "U035M81N341"
                            },
                            {
                                "type": "text",
                                "text": "! Thank you for pointing it out!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U053BP20H8E",
        "type": "message",
        "ts": "1685400688.377589",
        "edited": {
            "user": "U053BP20H8E",
            "ts": "1685400715.000000"
        },
        "client_msg_id": "1d719c27-7dec-48b9-b208-650ec22bc170",
        "text": "yeah seems very Comp Sci. From what I gathered the goal is to create a set of functions + data structures that implement the following\n\nImagine we start with some set of numbers [[0], [1],[2],[3],[4]]\n\nWe want to be able to union together two sets for example unioning the sets containing [0],[1] would make [[0,1], [2],[3],[4]]\nUnioning the set containing [0]  or [1] with the set containing [2] creates [[0,1,2], [3], [4]]\n\nOne thing to note is the each set has a representative element, for example [0,1,2] might be represented by element 0 (or 1 or 2, the choice is essentially arbitrary.\n\nThen the operation Find(2) = 0 because that's the representative element of the set 2 belongs too.\n\nSo that's the \"The Union-Find problem deals with the representation of partitions over a base set\" part.\n\nThe next part is, how do we actually do this? The challenge says to use a data structure called a \"forest\" (which is multiple trees). Very roughly, trees are constructed from nodes. A node can have a parent which is another node, or nothing if it has no parent. Each set is represented by a tree. When we union two sets,  we make the parent of Set A, the child of another. This is still abstract though, we still need to code it into C somehow.\n\nThis next part I'm interpreting on the fly, but to implement the trees, the book suggests created a table of the same length as the number of elements so [[0], [1],[2],[3],[4]] would be represented by a table of length 5 and position 0 would represent element 0 etc.\n\nThen inside the table, the value at the position is the parent of that element. So in the starting case, we have that there are no parents so we use SIZE_MAX\n\n[SIZE_MAX, SIZE_MAX, SIZE_MAX, SIZE_MAX, SIZE_MAX]\n\nwhen we merge together elements [0] and [1] into one set, I am going to make element 0 the parent of element [1] so the number at position 1 is now 0.\n\n[SIZE_MAX, 0, SIZE_MAX, SIZE_MAX, SIZE_MAX]\n\nI then want to merge together the set containing 1 (which is [0,1]) and 2. I am going to make the parent 1 the parent of 2. I look at position 1 and see that the parent is 0, and that 0 is at the root. I then look at position 2 and see that it is also at the root (SIZE_MAx). I then set position 2 to 0.\n\n[SIZE_MAX, 0, 0, SIZE_MAX, SIZE_MAX]",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "22b9a7da415c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-17\/5113784112230_22b9a7da415c6d9b3e5c_72.png",
            "first_name": "Stone",
            "real_name": "Stone Chen",
            "display_name": "",
            "team": "T01DW9DLB2A",
            "name": "chen.stonechen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1685366448.100809",
        "parent_user_id": "U01F5FZJ4MN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YbZW",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah seems very Comp Sci. From what I gathered the goal is to create a set of functions + data structures that implement the following\n\nImagine we start with some set of numbers [[0], [1],[2],[3],[4]]\n\nWe want to be able to union together two sets for example unioning the sets containing [0],[1] would make [[0,1], [2],[3],[4]]\nUnioning the set containing [0]  or [1] with the set containing [2] creates [[0,1,2], [3], [4]]\n\nOne thing to note is the each set has a representative element, for example [0,1,2] might be represented by element 0 (or 1 or 2, the choice is essentially arbitrary.\n\nThen the operation Find(2) = 0 because that's the representative element of the set 2 belongs too.\n\nSo that's the \"The Union-Find problem deals with the representation of partitions over a base set\" part.\n\nThe next part is, how do we actually do this? The challenge says to use a data structure called a \"forest\" (which is multiple trees). Very roughly, trees are constructed from nodes. A node can have a parent which is another node, or nothing if it has no parent. Each set is represented by a tree. When we union two sets,  we make the parent of Set A, the child of another. This is still abstract though, we still need to code it into C somehow.\n\nThis next part I'm interpreting on the fly, but to implement the trees, the book suggests created a table of the same length as the number of elements so [[0], [1],[2],[3],[4]] would be represented by a table of length 5 and position 0 would represent element 0 etc.\n\nThen inside the table, the value at the position is the parent of that element. So in the starting case, we have that there are no parents so we use SIZE_MAX\n\n[SIZE_MAX, SIZE_MAX, SIZE_MAX, SIZE_MAX, SIZE_MAX]\n\nwhen we merge together elements [0] and [1] into one set, I am going to make element 0 the parent of element [1] so the number at position 1 is now 0.\n\n[SIZE_MAX, 0, SIZE_MAX, SIZE_MAX, SIZE_MAX]\n\nI then want to merge together the set containing 1 (which is [0,1]) and 2. I am going to make the parent 1 the parent of 2. I look at position 1 and see that the parent is 0, and that 0 is at the root. I then look at position 2 and see that it is also at the root (SIZE_MAx). I then set position 2 to 0.\n\n[SIZE_MAX, 0, 0, SIZE_MAX, SIZE_MAX]"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
[
    {
        "user": "U035M81N341",
        "type": "message",
        "ts": "1712392884.806649",
        "client_msg_id": "a75d7126-9944-4758-a2ca-26336144a918",
        "text": "<@U0655E66NSY>, does that help? In my solution, `lock_pairs()` itself isn't recursive, but I do have a recursive helper function, `bool path_exists(int from, int to)`",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "c4cd2d45eb7b",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-02-05\/6583494822997_c4cd2d45eb7bfbf5886a_72.jpg",
            "first_name": "Ella",
            "real_name": "Ella Kaye",
            "display_name": "Ella Kaye",
            "team": "T01DW9DLB2A",
            "name": "ella.kaye",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711728376.326589",
        "parent_user_id": "U0655E66NSY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QyyQR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0655E66NSY"
                            },
                            {
                                "type": "text",
                                "text": ", does that help? In my solution, "
                            },
                            {
                                "type": "text",
                                "text": "lock_pairs()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " itself isn't recursive, but I do have a recursive helper function, "
                            },
                            {
                                "type": "text",
                                "text": "bool path_exists(int from, int to)",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U06360JH6FP",
        "type": "message",
        "ts": "1712401574.673279",
        "edited": {
            "user": "U06360JH6FP",
            "ts": "1712408918.000000"
        },
        "client_msg_id": "5e9f585c-dff7-4bcf-9286-b9dc95bfd243",
        "text": "<@U0655E66NSY> Original winner is W, Original Loser is L, I go through remaining candidates to see if L beats them lets call them l1…ln.  I then use a recursive function on each of the li to see if they ultimately beat W creating a cycle.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ccd10a98f3a6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-10-28\/6123580324497_ccd10a98f3a6190d4dd5_72.jpg",
            "first_name": "Munawar",
            "real_name": "Munawar Cheema",
            "display_name": "Munawar Cheema",
            "team": "T01DW9DLB2A",
            "name": "munawar.a.cheema",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711728376.326589",
        "parent_user_id": "U0655E66NSY",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Lzslc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "user",
                                "user_id": "U0655E66NSY"
                            },
                            {
                                "type": "text",
                                "text": " Original winner is W, Original Loser is L, I go through remaining candidates to see if L beats them lets call them l1…ln.  I then use a recursive function on each of the li to see if they ultimately beat W creating a cycle."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
[
    {
        "user": "U0524MK6H3K",
        "type": "message",
        "ts": "1684075728.583059",
        "edited": {
            "user": "U0524MK6H3K",
            "ts": "1684076304.000000"
        },
        "client_msg_id": "75e55eeb-383b-450d-b3ab-7f353cecdbbb",
        "text": "\"Stack smashing\" means that you had a buffer with \"automatic storage duration\" (chapter 13), which was a variable local to a function call, and you overran it, overwriting some other data that lived next to it. If you're on a POSIX system, consider compiling your program with debugging flags enabled (typically, this means \"add `-g` to your compiler command line\") and running your binary under Valgrind. On most operating systems, AddressSanitizer (\"add `-g -fsanitize=address` to the compiler command line\") will turn raw memory accesses (which is part of what makes stack smashing possible) into calls to special functions which check the validity of the access and crash the process if it turns out wrong. Both of these will try to tell you what exactly happened and why it's a mistake before crashing.\n\nCrashes can also be debugged (see <https:\/\/beej.us\/guide\/bggdb\/|this guide> for an example), but symbolic debuggers take some learning too and could be worth an extra chapter of material. (GDB in particular has an unfortunate tencency to crash itself, which sort of makes sense. How do you debug a debugger when your debugger crashes?) By themselves, programs are typically a bit late in catching stack smashing; they won't crash as soon as it happens, maybe much later if you're unlucky.\n\nBy the way, the mistake is in `N*sizeof(A)`.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "gc7f0c5d391a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c7f0c5d391a6f869c9310694b55fa506.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0018-72.png",
            "first_name": "Ivan",
            "real_name": "Ivan Krylov",
            "display_name": "Ivan Krylov",
            "team": "T01DW9DLB2A",
            "name": "ikrylov",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684024754.372879",
        "parent_user_id": "U01F5FZJ4MN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GKOZv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"Stack smashing\" means that you had a buffer with \"automatic storage duration\" (chapter 13), which was a variable local to a function call, and you overran it, overwriting some other data that lived next to it. If you're on a POSIX system, consider compiling your program with debugging flags enabled (typically, this means \"add "
                            },
                            {
                                "type": "text",
                                "text": "-g",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to your compiler command line\") and running your binary under Valgrind. On most operating systems, AddressSanitizer (\"add "
                            },
                            {
                                "type": "text",
                                "text": "-g -fsanitize=address",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to the compiler command line\") will turn raw memory accesses (which is part of what makes stack smashing possible) into calls to special functions which check the validity of the access and crash the process if it turns out wrong. Both of these will try to tell you what exactly happened and why it's a mistake before crashing.\n\nCrashes can also be debugged (see "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/beej.us\/guide\/bggdb\/",
                                "text": "this guide"
                            },
                            {
                                "type": "text",
                                "text": " for an example), but symbolic debuggers take some learning too and could be worth an extra chapter of material. (GDB in particular has an unfortunate tencency to crash itself, which sort of makes sense. How do you debug a debugger when your debugger crashes?) By themselves, programs are typically a bit late in catching stack smashing; they won't crash as soon as it happens, maybe much later if you're unlucky.\n\nBy the way, the mistake is in "
                            },
                            {
                                "type": "text",
                                "text": "N*sizeof(A)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U0358KRE3FC",
                    "U01N3ET8N82"
                ],
                "count": 2
            }
        ]
    },
    {
        "user": "U053BP20H8E",
        "type": "message",
        "ts": "1684080132.286719",
        "edited": {
            "user": "U053BP20H8E",
            "ts": "1684080159.000000"
        },
        "client_msg_id": "c91337a2-4b33-4844-8341-d55060db33ac",
        "text": "yeah C \"arrays\" are just pointers to memory, they don't really exist outside of the compiler. So to return an \"array\" all you can do is return a pointer to the start of the memory location.\n\nA common solution I've seen it to typedef a struct containing a pointer to the array, as well as information like the number of items and the type of the time (or size in bytes)",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "22b9a7da415c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-17\/5113784112230_22b9a7da415c6d9b3e5c_72.png",
            "first_name": "Stone",
            "real_name": "Stone Chen",
            "display_name": "",
            "team": "T01DW9DLB2A",
            "name": "chen.stonechen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684023128.936049",
        "parent_user_id": "U01F5FZJ4MN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Uq2F",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "yeah C \"arrays\" are just pointers to memory, they don't really exist outside of the compiler. So to return an \"array\" all you can do is return a pointer to the start of the memory location.\n\nA common solution I've seen it to typedef a struct containing a pointer to the array, as well as information like the number of items and the type of the time (or size in bytes)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U053BP20H8E",
        "type": "message",
        "ts": "1684081213.654669",
        "client_msg_id": "22c2abbd-aa39-49dc-9853-70956e3c29dc",
        "text": "I like vscode for it though I haven't really tried too much else",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "22b9a7da415c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-17\/5113784112230_22b9a7da415c6d9b3e5c_72.png",
            "first_name": "Stone",
            "real_name": "Stone Chen",
            "display_name": "",
            "team": "T01DW9DLB2A",
            "name": "chen.stonechen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684010616.410109",
        "parent_user_id": "U01F5FZJ4MN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SCs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I like vscode for it though I haven't really tried too much else"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U053BP20H8E",
        "type": "message",
        "ts": "1684082376.958819",
        "client_msg_id": "0825227b-170d-49d7-97b0-84c958ed581b",
        "text": "What are you using to compile? GCC catches the bug pretty quickly",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "22b9a7da415c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-17\/5113784112230_22b9a7da415c6d9b3e5c_72.png",
            "first_name": "Stone",
            "real_name": "Stone Chen",
            "display_name": "",
            "team": "T01DW9DLB2A",
            "name": "chen.stonechen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684024754.372879",
        "parent_user_id": "U01F5FZJ4MN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "T+3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "What are you using to compile? GCC catches the bug pretty quickly"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "text": "",
        "files": [
            {
                "id": "F057GV6UJ4W",
                "mode": "hidden_by_limit"
            }
        ],
        "upload": false,
        "user": "U053BP20H8E",
        "display_as_bot": false,
        "type": "message",
        "ts": "1684082380.385599",
        "client_msg_id": "c42a8a2f-0749-4625-a0f9-2918215ddc60",
        "thread_ts": "1684024754.372879",
        "parent_user_id": "U01F5FZJ4MN",
        "reactions": [
            {
                "name": "100",
                "users": [
                    "U01N3ET8N82"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U01F5FZJ4MN",
        "type": "message",
        "ts": "1684082517.190589",
        "client_msg_id": "ff04c702-6037-42f0-86fc-4e613f598f01",
        "text": "I think I was using c99.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g9f3e8927ec9",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/9f3e8927ec981edfb1dc3320072539cc.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0002-72.png",
            "first_name": "",
            "real_name": "Elio",
            "display_name": "Elio",
            "team": "T01DW9DLB2A",
            "name": "eliocampitelli",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684024754.372879",
        "parent_user_id": "U01F5FZJ4MN",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "uKdt6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think I was using c99."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U053BP20H8E",
        "type": "message",
        "ts": "1684101305.068359",
        "edited": {
            "user": "U053BP20H8E",
            "ts": "1684101459.000000"
        },
        "client_msg_id": "87a6ca41-b06b-4273-a342-2aeb5b20b907",
        "text": "Here's my version of mergesort: tried to avoid using variable length arrays, since some compilers through errors; also tried to keep all my allocations within one function\n<https:\/\/gist.github.com\/stone-d-chen\/501c4fb3150cbde58cc168211895047d>",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "22b9a7da415c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-17\/5113784112230_22b9a7da415c6d9b3e5c_72.png",
            "first_name": "Stone",
            "real_name": "Stone Chen",
            "display_name": "",
            "team": "T01DW9DLB2A",
            "name": "chen.stonechen",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684101305.068359",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1684207502.189809",
        "reply_users": [
            "U041CL6454N",
            "U053BP20H8E"
        ],
        "replies": [
            {
                "user": "U041CL6454N",
                "ts": "1684118590.331179"
            },
            {
                "user": "U053BP20H8E",
                "ts": "1684207385.069579"
            },
            {
                "user": "U041CL6454N",
                "ts": "1684207502.189809"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "D9m",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Here's my version of mergesort: tried to avoid using variable length arrays, since some compilers through errors; also tried to keep all my allocations within one function\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/gist.github.com\/stone-d-chen\/501c4fb3150cbde58cc168211895047d"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U041CL6454N",
        "type": "message",
        "ts": "1684118590.331179",
        "client_msg_id": "98dfa24c-582a-407c-8848-6738b513114f",
        "text": "This is my implementation for MergeSort: <https:\/\/github.com\/itsdebartha\/Book-Club-Modern-C\/blob\/main\/MergeSort.c|https:\/\/github.com\/itsdebartha\/Book-Club-Modern-C\/blob\/main\/MergeSort.c>\n\nI did allow variable length array though...",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "0e3d8ea67951",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-01-24\/4687497652629_0e3d8ea67951340d9e0a_72.jpg",
            "first_name": "Debartha",
            "real_name": "Debartha Paul",
            "display_name": "Debartha Paul",
            "team": "T01DW9DLB2A",
            "name": "pauldeep102",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1684101305.068359",
        "parent_user_id": "U053BP20H8E",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B01V53YD4FJ",
                "app_unfurl_url": "https:\/\/github.com\/itsdebartha\/Book-Club-Modern-C\/blob\/main\/MergeSort.c",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/itsdebartha\/Book-Club-Modern-C\/blob\/main\/MergeSort.c | MergeSort.c>",
                "text": "```\n#include <stdio.h>\n\nvoid merge(int arr[], int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n    int L[n1];\n    int R[n2];\n\n\n    for (int i = 0; i < n1; i++) {\n        L[i] = arr[l + i];\n    }\n    for (int j = 0; j < n2; j++) {\n        R[j] = arr[m + 1 + j];\n    }\n\n    int i = 0;\n    int j = 0;\n    int k = l;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        }\n        else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }    \n}\n\nvoid mergeSort(int arr[], int l, int r) {\n    if (l < r) {\n        int m = (l + r) \/ 2;\n\n        mergeSort(arr, l, m);\n        mergeSort(arr, m+1, r);\n        merge(arr, l, m, r);\n    }\n}\n\nint main() {\n    int n;\n    printf(\"Enter the size of the array: \");\n    scanf(\"%d\", &n);\n\n    int arr[n];\n    printf(\"Enter the array inputs: \");\n\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &arr[i]);\n    }\n\n    printf(\"The array is: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    printf(\"\\n\");\n\n    mergeSort(arr, 0, n - 1);\n\n    printf(\"The sorted array is: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    return 0;\n}\n```",
                "title": "<https:\/\/github.com\/itsdebartha\/Book-Club-Modern-C\/blob\/main\/MergeSort.c | MergeSort.c>",
                "footer": "<https:\/\/github.com\/itsdebartha\/Book-Club-Modern-C|itsdebartha\/Book-Club-Modern-C>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iNCKF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "This is my implementation for MergeSort: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/itsdebartha\/Book-Club-Modern-C\/blob\/main\/MergeSort.c",
                                "text": "https:\/\/github.com\/itsdebartha\/Book-Club-Modern-C\/blob\/main\/MergeSort.c"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI did allow variable length array though..."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U051VQFTL91",
                    "U053BP20H8E"
                ],
                "count": 2
            }
        ]
    }
]
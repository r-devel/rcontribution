[
    {
        "user": "U074BJYBWAJ",
        "type": "message",
        "ts": "1736210397.754169",
        "client_msg_id": "30adb890-fa71-4633-b6ff-b210678b3e2a",
        "text": "Hello everyone, I want to share a feature on this wishlist\nI see that in r-devel there is a new `grepv()`  function, which is the same as `grep(... value = TRUE)`  . And transitively it is the same as `x[grep(pattern, x, ...)]`  . It is a great addition since it facilitates filtering pipelines, like `some_character_vector |&gt; grepv(pattern = ...)`\nHowever I miss the same functionality in various functions used for subsetting like `grep`  (i.e. `startsWith` , `<http:\/\/is.na|is.na>` which is handled by na.omit, in general all is.something functions that operate over vectors. `Filter` meets the use case but it operates with lapply, meaning that vectorized operations (one of the strengths of R) are slow.  The general way is to use a closure, i.e. `lhs |&gt; (\\(i) i[grep(pattern = ..., i)])()`  or the pipebind operator.\nMay a `subset`  like function for subset based on another function be of worth?. Perhaps the current default `subset`  can be be made to accept a function as subset in addition to a logical, or as another argument so it can operate over atomic vectors?.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ede55b8f14d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-05-25\/7197646830592_ede55b8f14d6d526282e_72.jpg",
            "first_name": "Ricardo",
            "real_name": "Ricardo Villalba",
            "display_name": "Ricardo Villalba",
            "team": "T01DW9DLB2A",
            "name": "rikivillalba",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736210397.754169",
        "reply_count": 3,
        "reply_users_count": 2,
        "latest_reply": "1736548474.367939",
        "reply_users": [
            "U021X72PVRN",
            "U074BJYBWAJ"
        ],
        "replies": [
            {
                "user": "U021X72PVRN",
                "ts": "1736230758.312679"
            },
            {
                "user": "U074BJYBWAJ",
                "ts": "1736537005.912629"
            },
            {
                "user": "U021X72PVRN",
                "ts": "1736548474.367939"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "7g9SZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hello everyone, I want to share a feature on this wishlist\nI see that in r-devel there is a new "
                            },
                            {
                                "type": "text",
                                "text": "grepv()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  function, which is the same as "
                            },
                            {
                                "type": "text",
                                "text": "grep(... value = TRUE)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  . And transitively it is the same as "
                            },
                            {
                                "type": "text",
                                "text": "x[grep(pattern, x, ...)]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  . It is a great addition since it facilitates filtering pipelines, like "
                            },
                            {
                                "type": "text",
                                "text": "some_character_vector |> grepv(pattern = ...)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nHowever I miss the same functionality in various functions used for subsetting like "
                            },
                            {
                                "type": "text",
                                "text": "grep",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  (i.e. "
                            },
                            {
                                "type": "text",
                                "text": "startsWith",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/is.na",
                                "text": "is.na",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which is handled by na.omit, in general all is.something functions that operate over vectors. "
                            },
                            {
                                "type": "text",
                                "text": "Filter",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " meets the use case but it operates with lapply, meaning that vectorized operations (one of the strengths of R) are slow.  The general way is to use a closure, i.e. "
                            },
                            {
                                "type": "text",
                                "text": "lhs |> (\\(i) i[grep(pattern = ..., i)])()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  or the pipebind operator.\nMay a "
                            },
                            {
                                "type": "text",
                                "text": "subset",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  like function for subset based on another function be of worth?. Perhaps the current default "
                            },
                            {
                                "type": "text",
                                "text": "subset",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  can be be made to accept a function as subset in addition to a logical, or as another argument so it can operate over atomic vectors?."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U021X72PVRN",
        "type": "message",
        "ts": "1736230758.312679",
        "edited": {
            "user": "U021X72PVRN",
            "ts": "1736230811.000000"
        },
        "client_msg_id": "bf6b99b7-f506-416f-b5dd-1da7337a9d17",
        "text": "It's not perfect, but I implemented 'subset via a bare function' in a new vector class I called `vec` <https:\/\/jonocarroll.github.io\/vec\/>\n\n```# <https:\/\/jonocarroll.github.io\/vec\/articles\/functions.html>\nlibrary(vec) # <https:\/\/github.com\/jonocarroll\/vec\/>\n\n# some values to filter\nx <- c(\"cart\", \"call\", \"cask\", \"carpet\")\n\n# grepv a.k.a. grep(x, pattern, value = TRUE)\nx |>\n  grep(pattern = \"car\", value = TRUE)\n#> [1] \"cart\"   \"carpet\"\n\n# create a new 'vec' object which subsets with \n# a bare function\nv <- as_vec(x)\n\n# example of subsetting with a bare function and \n# argument(s)\nv[startsWith, \"car\"]\n#> [1] \"cart\"   \"carpet\"\n\n# works in a pipeline\nx |>\n  as_vec() |> \n  _[startsWith, \"car\"]\n#> [1] \"cart\"   \"carpet\"```",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "gc96fb19f1c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c96fb19f1c22a8c67dbb6db88165e280.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Carroll",
            "display_name": "Jonathan Carroll",
            "team": "T01DW9DLB2A",
            "name": "jono",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1736210397.754169",
        "parent_user_id": "U074BJYBWAJ",
        "attachments": [
            {
                "id": 2,
                "color": "24292f",
                "bot_id": "B01V53YD4FJ",
                "app_unfurl_url": "https:\/\/github.com\/jonocarroll\/vec\/",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "jonocarroll\/vec",
                "text": "A New Vector Class With Added Functionality",
                "title": "jonocarroll\/vec",
                "fields": [
                    {
                        "value": "<https:\/\/jonocarroll.github.io\/vec\/>",
                        "title": "Website",
                        "short": true
                    },
                    {
                        "value": "10",
                        "title": "Stars",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "aRYpE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's not perfect, but I implemented 'subset via a bare function' in a new vector class I called "
                            },
                            {
                                "type": "text",
                                "text": "vec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jonocarroll.github.io\/vec\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/jonocarroll.github.io\/vec\/articles\/functions.html"
                            },
                            {
                                "type": "text",
                                "text": "\nlibrary(vec) # "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/jonocarroll\/vec\/"
                            },
                            {
                                "type": "text",
                                "text": "\n\n# some values to filter\nx <- c(\"cart\", \"call\", \"cask\", \"carpet\")\n\n# grepv a.k.a. grep(x, pattern, value = TRUE)\nx |>\n  grep(pattern = \"car\", value = TRUE)\n#> [1] \"cart\"   \"carpet\"\n\n# create a new 'vec' object which subsets with \n# a bare function\nv <- as_vec(x)\n\n# example of subsetting with a bare function and \n# argument(s)\nv[startsWith, \"car\"]\n#> [1] \"cart\"   \"carpet\"\n\n# works in a pipeline\nx |>\n  as_vec() |> \n  _[startsWith, \"car\"]\n#> [1] \"cart\"   \"carpet\""
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U074BJYBWAJ"
                ],
                "count": 1
            }
        ]
    }
]
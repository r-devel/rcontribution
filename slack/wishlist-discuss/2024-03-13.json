[
    {
        "user": "U062MDESA6S",
        "type": "message",
        "ts": "1710356471.396419",
        "edited": {
            "user": "U062MDESA6S",
            "ts": "1710356820.000000"
        },
        "client_msg_id": "a31c5998-b6f5-465a-aa71-73d1b7d1cbe6",
        "text": "For sure - introducing the debug statement isn't too much trouble (currently this happens <https:\/\/github.com\/dgkf\/debugadapter\/blob\/dd772a14a23c521a060cb716131669313b7c8e0d\/R\/breakpoints_sync.R#L29-L36|here> using `trace()` and removed with `untrace()`). The challenge is more specifically _when_ the trace calls gets inserted.\n\nIdeally the workflow looks something like this:\n\n• In your IDE (let's say neovim with a debugger plugin) you add a breakpoint\n• _transparent to the user, a debug statement is inserted_\n• Then you hop over to your attached REPL and run some code\nThe second step is where the current process breaks down. To my knowledge, there's no way to run the code that should trace the IDE-provided breakpoints _before_ the user goes to run some code.\n\nCurrently, I have a task callback set up that picks up breakpoints from the debug adapter, but those can only be traced _after_ the user runs their next toplevel call in their REPL, so there's this unavoidable (?) one-expression lag between adding a breakpoint and debugging it.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "gb7a486e82b3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b7a486e82b323d2e2e5ea299aad816b3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Doug",
            "real_name": "Doug Kelkhoff",
            "display_name": "Doug Kelkhoff",
            "team": "T01DW9DLB2A",
            "name": "doug.kelkhoff",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709399248.395479",
        "parent_user_id": "U062MDESA6S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KZc7O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "For sure - introducing the debug statement isn't too much trouble (currently this happens "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/dgkf\/debugadapter\/blob\/dd772a14a23c521a060cb716131669313b7c8e0d\/R\/breakpoints_sync.R#L29-L36",
                                "text": "here"
                            },
                            {
                                "type": "text",
                                "text": " using "
                            },
                            {
                                "type": "text",
                                "text": "trace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and removed with "
                            },
                            {
                                "type": "text",
                                "text": "untrace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "). The challenge is more specifically "
                            },
                            {
                                "type": "text",
                                "text": "when",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the trace calls gets inserted.\n\nIdeally the workflow looks something like this:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "In your IDE (let's say neovim with a debugger plugin) you add a breakpoint"
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "transparent to the user, a debug statement is inserted",
                                        "style": {
                                            "italic": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Then you hop over to your attached REPL and run some code"
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe second step is where the current process breaks down. To my knowledge, there's no way to run the code that should trace the IDE-provided breakpoints "
                            },
                            {
                                "type": "text",
                                "text": "before",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the user goes to run some code.\n\nCurrently, I have a task callback set up that picks up breakpoints from the debug adapter, but those can only be traced "
                            },
                            {
                                "type": "text",
                                "text": "after",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the user runs their next toplevel call in their REPL, so there's this unavoidable (?) one-expression lag between adding a breakpoint and debugging it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01KXU8UNRX",
        "type": "message",
        "ts": "1710362687.846819",
        "client_msg_id": "ca257beb-4604-4dc4-bdd2-e7bdac85c0e3",
        "text": "I don't know how to do that in R. You can modify the everything in the same environment (`&lt;-` or `-` or any other function or environment)  , how should it trace something that it might be modified? Doesn't it work the same in other languages? If it is a static trace you could do something like {flow} does. (Sorry, I think there are more accurate words to express this, but I am not sure I know them)",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ad5dd68cbc81",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-01-22\/1671554425412_ad5dd68cbc8196426bd1_72.png",
            "first_name": "Lluís",
            "real_name": "Lluís Revilla Sancho",
            "display_name": "Lluís Revilla Sancho",
            "team": "T01DW9DLB2A",
            "name": "lluis.revilla_slack",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709399248.395479",
        "parent_user_id": "U062MDESA6S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "vf4Dn",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't know how to do that in R. You can modify the everything in the same environment ("
                            },
                            {
                                "type": "text",
                                "text": "<-",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "-",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or any other function or environment)  , how should it trace something that it might be modified? Doesn't it work the same in other languages? If it is a static trace you could do something like {flow} does. (Sorry, I think there are more accurate words to express this, but I am not sure I know them)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U021X72PVRN",
        "type": "message",
        "ts": "1710364077.069429",
        "client_msg_id": "578dc320-3a80-4203-88f1-3784e5ab53f5",
        "text": "Yes, the `browser()` calls added by e.g. `debugonce()` are specifically added _just prior to_ calling the wrapped function - inserting a mid-function breakpoint would be much harder. RStudio seems to be able to do it, and their source is available, if that helps. Alternatively - is there a reason you need to have the debug be so specific?",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "gc96fb19f1c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c96fb19f1c22a8c67dbb6db88165e280.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Carroll",
            "display_name": "Jonathan Carroll",
            "team": "T01DW9DLB2A",
            "name": "jono",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709399248.395479",
        "parent_user_id": "U062MDESA6S",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MDVUx",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yes, the "
                            },
                            {
                                "type": "text",
                                "text": "browser()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " calls added by e.g. "
                            },
                            {
                                "type": "text",
                                "text": "debugonce()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are specifically added "
                            },
                            {
                                "type": "text",
                                "text": "just prior to",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " calling the wrapped function - inserting a mid-function breakpoint would be much harder. RStudio seems to be able to do it, and their source is available, if that helps. Alternatively - is there a reason you need to have the debug be so specific?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U062MDESA6S",
        "type": "message",
        "ts": "1710371733.482829",
        "client_msg_id": "cd708934-78d3-42a5-a6af-eb231378de12",
        "text": "The `trace()` call linked above handles all the complexity of inserting breakpoints at specific lines (or more accurately, at nodes in the expression tree using `utils::findLineNum()` -- which is just an amazing function):\n\n```&gt; utils::findLineNum(\"utils.R#65\", envir = getNamespace(\"options\"))\n\/root\/Projects\/Programming\/options\/R\/utils.R#65:\n raise.function step  3,3,2 in &lt;environment: namespace:options&gt;\n raise.function step  3,3,2 in &lt;environment: package:options&gt; ```\n&gt; Indicates that line <https:\/\/github.com\/dgkf\/options\/blob\/main\/R\/utils.R#L65|L#65> is the 2nd expression in the 3rd call in the 3rd call of the `raise.function` function in the namespace `options`... pretty amazing!\n&gt; ```as.list(body(options:::raise.function))[[3]][[3]][[2]]\n&gt; args[[\"call.\"]] &lt;- FALSE```\nThe remaining challenge is to execute that `trace()` call in the background when a user adds a breakpoint within their IDE. If the IDE's debugger can communicate with a debug adapter client, then setting a breakpoint in the IDE will send a signal to the R session's debug-adapter client which should make the `trace()` call. In an ideal world, users could simply add something like `dap::listen()` to their `.Rprofile` which would kick off a background process that listens for debugging signals from the IDE to sync breakpoints using `trace()` and `untrace()` without the user having to manually juggle breakpoints in the REPL. This is the part that's got me stumped. I'm trying to figure out how I can handle receiving this message between top-level calls such that the `trace()` is set for the next code executed in the REPL.\n\nIn short, the goal is to replace the need to call `debugonce()`\/`debug()` \/`browser()` with the graphical IDE interface of clicking the little gutter icon to toggle breakpoints.\n\nReferring to how RStudio manages this was a good tip! From what I can tell it's handled by running an R session in the background where commands can be executed without you as a user being aware. The RStudio code base is huge, so I haven't really sorted out exactly how this is managed, but it looks like both the console and the debug handler both communicate with a central R session. I imagine there's some handling to insert the calls into the R session without inserting them into your REPL prompt history.\n\nSorry if it's still a really murky request for help... there's a lot of moving pieces to this little puzzle.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "gb7a486e82b3",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/b7a486e82b323d2e2e5ea299aad816b3.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0017-72.png",
            "first_name": "Doug",
            "real_name": "Doug Kelkhoff",
            "display_name": "Doug Kelkhoff",
            "team": "T01DW9DLB2A",
            "name": "doug.kelkhoff",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1709399248.395479",
        "parent_user_id": "U062MDESA6S",
        "attachments": [
            {
                "id": 1,
                "footer_icon": "https:\/\/slack.github.com\/static\/img\/favicon-neutral.png",
                "color": "24292f",
                "bot_id": "B01V53YD4FJ",
                "app_unfurl_url": "https:\/\/github.com\/dgkf\/options\/blob\/main\/R\/utils.R#L65",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "<https:\/\/github.com\/dgkf\/options\/blob\/main\/R\/utils.R | utils.R>",
                "text": "```\n    args[[\"call.\"]] <- FALSE\n```",
                "title": "<https:\/\/github.com\/dgkf\/options\/blob\/main\/R\/utils.R | utils.R>",
                "footer": "<https:\/\/github.com\/dgkf\/options|dgkf\/options>",
                "mrkdwn_in": [
                    "text"
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "AhARe",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The "
                            },
                            {
                                "type": "text",
                                "text": "trace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " call linked above handles all the complexity of inserting breakpoints at specific lines (or more accurately, at nodes in the expression tree using "
                            },
                            {
                                "type": "text",
                                "text": "utils::findLineNum()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " -- which is just an amazing function):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> utils::findLineNum(\"utils.R#65\", envir = getNamespace(\"options\"))\n\/root\/Projects\/Programming\/options\/R\/utils.R#65:\n raise.function step  3,3,2 in <environment: namespace:options>\n raise.function step  3,3,2 in <environment: package:options> "
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Indicates that line "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/dgkf\/options\/blob\/main\/R\/utils.R#L65",
                                "text": "L#65"
                            },
                            {
                                "type": "text",
                                "text": " is the 2nd expression in the 3rd call in the 3rd call of the "
                            },
                            {
                                "type": "text",
                                "text": "raise.function",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " function in the namespace "
                            },
                            {
                                "type": "text",
                                "text": "options",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "... pretty amazing!"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "as.list(body(options:::raise.function))[[3]][[3]][[2]]\nargs[[\"call.\"]] <- FALSE"
                            }
                        ],
                        "border": 1
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe remaining challenge is to execute that "
                            },
                            {
                                "type": "text",
                                "text": "trace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " call in the background when a user adds a breakpoint within their IDE. If the IDE's debugger can communicate with a debug adapter client, then setting a breakpoint in the IDE will send a signal to the R session's debug-adapter client which should make the "
                            },
                            {
                                "type": "text",
                                "text": "trace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " call. In an ideal world, users could simply add something like "
                            },
                            {
                                "type": "text",
                                "text": "dap::listen()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to their "
                            },
                            {
                                "type": "text",
                                "text": ".Rprofile",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which would kick off a background process that listens for debugging signals from the IDE to sync breakpoints using "
                            },
                            {
                                "type": "text",
                                "text": "trace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "untrace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " without the user having to manually juggle breakpoints in the REPL. This is the part that's got me stumped. I'm trying to figure out how I can handle receiving this message between top-level calls such that the "
                            },
                            {
                                "type": "text",
                                "text": "trace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is set for the next code executed in the REPL.\n\nIn short, the goal is to replace the need to call "
                            },
                            {
                                "type": "text",
                                "text": "debugonce()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\/"
                            },
                            {
                                "type": "text",
                                "text": "debug()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " \/"
                            },
                            {
                                "type": "text",
                                "text": "browser()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with the graphical IDE interface of clicking the little gutter icon to toggle breakpoints.\n\nReferring to how RStudio manages this was a good tip! From what I can tell it's handled by running an R session in the background where commands can be executed without you as a user being aware. The RStudio code base is huge, so I haven't really sorted out exactly how this is managed, but it looks like both the console and the debug handler both communicate with a central R session. I imagine there's some handling to insert the calls into the R session without inserting them into your REPL prompt history.\n\nSorry if it's still a really murky request for help... there's a lot of moving pieces to this little puzzle."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
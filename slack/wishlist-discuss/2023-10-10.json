[
    {
        "user": "U02HUL3G5L2",
        "type": "message",
        "ts": "1696954260.628079",
        "edited": {
            "user": "U02HUL3G5L2",
            "ts": "1696973255.000000"
        },
        "client_msg_id": "180da9d9-4316-448f-b057-050a5030f859",
        "text": "EDIT: no longer a wish thank's to Mikael's response which alleviates both time and memory issues!\n~This is in the realms of micro optimisations but here seems as good a place as any ...~\n~It would be nice to have primitive functions `anyNegative()` and `anyPositive()`. An extreme case is given below in which I've used a `for` loop for comparison to highlight the memory and time overheads compared to the intuitive approach.~\n```n <- 1e7\ndat <- integer(n)\ndat[1e5] <- -1L\nbench::mark(\n    a = any(dat < 0),\n    b = {\n        out <- FALSE\n        for (i in seq_len(n)) {\n            if (dat[i] < 0) {\n                out <- TRUE\n                break\n            }\n        }\n        out\n    }\n)\n#> Warning: Some expressions had a GC in every iteration; so filtering is\n#> disabled.\n#> # A tibble: 2 × 6\n#>   expression      min   median `itr\/sec` mem_alloc `gc\/sec`\n#>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 a           35.35ms  35.81ms      25.5    38.1MB    25.5 \n#> 2 b            5.46ms   5.65ms     172.     61.3KB     5.93```\n~Cons:~\n• ~It would be more code to be maintained by R core.~\n• ~It is a micro-optimisation.~\n~Pros:~\n• ~`anyNA()` is precedent.~\n• ~Pattern is likely common in code.~\n• ~Memory \/ time savings.~",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "977af759eea9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-14\/2599997202470_977af759eea959cbafdf_72.jpg",
            "first_name": "Tim",
            "real_name": "Tim Taylor",
            "display_name": "Tim Taylor",
            "team": "T01DW9DLB2A",
            "name": "tim.taylor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696954260.628079",
        "reply_count": 3,
        "reply_users_count": 3,
        "latest_reply": "1696974377.662319",
        "reply_users": [
            "U033CD64FS4",
            "U02HUL3G5L2",
            "U021X72PVRN"
        ],
        "replies": [
            {
                "user": "U033CD64FS4",
                "ts": "1696969270.619639"
            },
            {
                "user": "U02HUL3G5L2",
                "ts": "1696973164.882799"
            },
            {
                "user": "U021X72PVRN",
                "ts": "1696974377.662319"
            }
        ],
        "is_locked": false,
        "subscribed": false,
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2C+jr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "EDIT: no longer a wish thank's to Mikael's response which alleviates both time and memory issues!\n"
                            },
                            {
                                "type": "text",
                                "text": "This is in the realms of micro optimisations but here seems as good a place as any ...",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "It would be nice to have primitive functions ",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "anyNegative()",
                                "style": {
                                    "strike": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and ",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "anyPositive()",
                                "style": {
                                    "strike": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". An extreme case is given below in which I've used a ",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "for",
                                "style": {
                                    "strike": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " loop for comparison to highlight the memory and time overheads compared to the intuitive approach.",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "n <- 1e7\ndat <- integer(n)\ndat[1e5] <- -1L\nbench::mark(\n    a = any(dat < 0),\n    b = {\n        out <- FALSE\n        for (i in seq_len(n)) {\n            if (dat[i] < 0) {\n                out <- TRUE\n                break\n            }\n        }\n        out\n    }\n)\n#> Warning: Some expressions had a GC in every iteration; so filtering is\n#> disabled.\n#> # A tibble: 2 × 6\n#>   expression      min   median `itr\/sec` mem_alloc `gc\/sec`\n#>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 a           35.35ms  35.81ms      25.5    38.1MB    25.5 \n#> 2 b            5.46ms   5.65ms     172.     61.3KB     5.93"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Cons:",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It would be more code to be maintained by R core.",
                                        "style": {
                                            "strike": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "It is a micro-optimisation.",
                                        "style": {
                                            "strike": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Pros:",
                                "style": {
                                    "strike": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_list",
                        "elements": [
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "anyNA()",
                                        "style": {
                                            "strike": true,
                                            "code": true
                                        }
                                    },
                                    {
                                        "type": "text",
                                        "text": " is precedent.",
                                        "style": {
                                            "strike": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Pattern is likely common in code.",
                                        "style": {
                                            "strike": true
                                        }
                                    }
                                ]
                            },
                            {
                                "type": "rich_text_section",
                                "elements": [
                                    {
                                        "type": "text",
                                        "text": "Memory \/ time savings.",
                                        "style": {
                                            "strike": true
                                        }
                                    }
                                ]
                            }
                        ],
                        "style": "bullet",
                        "indent": 0,
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U033CD64FS4",
        "type": "message",
        "ts": "1696969270.619639",
        "client_msg_id": "9fb960cd-e42b-414f-b368-85ebc9cf3046",
        "text": "Hmm - I normally test for negative and positive with `min(0, x, na.rm = TRUE) &lt; 0` and `max(0, x, na.rm = TRUE) &gt; 0` , not with `any(x &lt; 0)` and `any(x &gt; 0)` which are inefficient as you point out",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "8ca4e7a47a0c",
            "image_72": "https:\/\/avatars.slack-edge.com\/2022-02-10\/3103315181841_8ca4e7a47a0c1ee8c851_72.jpg",
            "first_name": "Mikael",
            "real_name": "Mikael Jagan",
            "display_name": "Mikael Jagan",
            "team": "T01DW9DLB2A",
            "name": "jaganmn2",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696954260.628079",
        "parent_user_id": "U02HUL3G5L2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/7b\/q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hmm - I normally test for negative and positive with "
                            },
                            {
                                "type": "text",
                                "text": "min(0, x, na.rm = TRUE) < 0",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "max(0, x, na.rm = TRUE) > 0",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " , not with "
                            },
                            {
                                "type": "text",
                                "text": "any(x < 0)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "any(x > 0)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which are inefficient as you point out"
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "sweat_smile",
                "users": [
                    "U02HUL3G5L2"
                ],
                "count": 1
            },
            {
                "name": "eyes",
                "users": [
                    "U02HUL3G5L2",
                    "U02HVUBA4QY"
                ],
                "count": 2
            },
            {
                "name": "+1",
                "users": [
                    "U06360JH6FP"
                ],
                "count": 1
            }
        ]
    },
    {
        "user": "U02HUL3G5L2",
        "type": "message",
        "ts": "1696973164.882799",
        "client_msg_id": "76819c1a-6c98-4143-a532-1acabc36068f",
        "text": "That is very elegant and somewhat kicking myself that I've always resorted to the other form. Many thanks <@U033CD64FS4>. Need an option to rescind a wish now!",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "977af759eea9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-14\/2599997202470_977af759eea959cbafdf_72.jpg",
            "first_name": "Tim",
            "real_name": "Tim Taylor",
            "display_name": "Tim Taylor",
            "team": "T01DW9DLB2A",
            "name": "tim.taylor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696954260.628079",
        "parent_user_id": "U02HUL3G5L2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "inFG9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "That is very elegant and somewhat kicking myself that I've always resorted to the other form. Many thanks "
                            },
                            {
                                "type": "user",
                                "user_id": "U033CD64FS4"
                            },
                            {
                                "type": "text",
                                "text": ". Need an option to rescind a wish now!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U021X72PVRN",
        "type": "message",
        "ts": "1696974377.662319",
        "edited": {
            "user": "U021X72PVRN",
            "ts": "1696975042.000000"
        },
        "client_msg_id": "16718615-a74e-4baa-8723-1a3c963ad623",
        "text": "`Find(\\(y) y < 0, x) < 0` is about 10x faster than the `min` approach with a smaller memory usage vs the naive version, and exits early when it finds something (so better when not considering the worst-case scenario).\n\n```bench::mark(\n  a = any(dat < 0),\n  b = {\n    out <- FALSE\n    for (i in seq_len(n)) {\n      if (dat[i] < 0) {\n        out <- TRUE\n        break\n      }\n    }\n    out\n  },\n  c = {\n    min(0, dat, na.rm = TRUE) < 0\n  },\n  d = {\n    Find(\\(x) x < 0, dat, nomatch = 0) < 0\n  }\n)\n# A tibble: 4 × 6\n  expression      min   median `itr\/sec` mem_alloc `gc\/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 a           13.29ms  13.43ms      71.3   38.15MB     22.8\n2 b          967.93µs   1.01ms     952.     23.8KB     10.6\n3 c            9.15ms   9.19ms     109.         0B      0  \n4 d          890.07µs 928.49µs    1067.     4.81KB     17.4```\nwith a single negative element at 1e3, it’s 5x faster than the naive version\n```# A tibble: 4 × 6\n  expression      min   median `itr\/sec` mem_alloc `gc\/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 a           13.31ms  13.51ms      72.2   38.15MB     36.1\n2 b           896.3µs 938.49µs    1053.     23.8KB     12.8\n3 c            9.16ms   9.18ms     109.         0B      0  \n4 d          178.84µs 184.66µs    5380.     4.81KB     14.9```\nEdit: actually, take that with a grain of salt; performance gets significantly worse with the single element being later in the data. If it’s the last element it takes a lot longer than the others.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "gc96fb19f1c2",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/c96fb19f1c22a8c67dbb6db88165e280.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0009-72.png",
            "first_name": "Jonathan",
            "real_name": "Jonathan Carroll",
            "display_name": "Jonathan Carroll",
            "team": "T01DW9DLB2A",
            "name": "jono",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1696954260.628079",
        "parent_user_id": "U02HUL3G5L2",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6mRZB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Find(\\(y) y < 0, x) < 0",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is about 10x faster than the "
                            },
                            {
                                "type": "text",
                                "text": "min",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " approach with a smaller memory usage vs the naive version, and exits early when it finds something (so better when not considering the worst-case scenario).\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "bench::mark(\n  a = any(dat < 0),\n  b = {\n    out <- FALSE\n    for (i in seq_len(n)) {\n      if (dat[i] < 0) {\n        out <- TRUE\n        break\n      }\n    }\n    out\n  },\n  c = {\n    min(0, dat, na.rm = TRUE) < 0\n  },\n  d = {\n    Find(\\(x) x < 0, dat, nomatch = 0) < 0\n  }\n)\n# A tibble: 4 × 6\n  expression      min   median `itr\/sec` mem_alloc `gc\/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 a           13.29ms  13.43ms      71.3   38.15MB     22.8\n2 b          967.93µs   1.01ms     952.     23.8KB     10.6\n3 c            9.15ms   9.19ms     109.         0B      0  \n4 d          890.07µs 928.49µs    1067.     4.81KB     17.4"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "with a single negative element at 1e3, it’s 5x faster than the naive version\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# A tibble: 4 × 6\n  expression      min   median `itr\/sec` mem_alloc `gc\/sec`\n  <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n1 a           13.31ms  13.51ms      72.2   38.15MB     36.1\n2 b           896.3µs 938.49µs    1053.     23.8KB     12.8\n3 c            9.16ms   9.18ms     109.         0B      0  \n4 d          178.84µs 184.66µs    5380.     4.81KB     14.9"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Edit: actually, take that with a grain of salt; performance gets significantly worse with the single element being later in the data. If it’s the last element it takes a lot longer than the others."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
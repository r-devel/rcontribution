[
    {
        "user": "U02HUL3G5L2",
        "type": "message",
        "ts": "1724056918.208359",
        "client_msg_id": "9E3BE71C-C7DA-407B-ADFB-BEF83CD29EB6",
        "text": "Tagging <@U021C7QBKJ8> - who implemented dotty <https:\/\/github.com\/kevinushey\/dotty|https:\/\/github.com\/kevinushey\/dotty>. Unsure if there an intended CRAN release?",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "977af759eea9",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-10-14\/2599997202470_977af759eea959cbafdf_72.jpg",
            "first_name": "Tim",
            "real_name": "Tim Taylor",
            "display_name": "Tim Taylor",
            "team": "T01DW9DLB2A",
            "name": "tim.taylor",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724002293.759999",
        "parent_user_id": "U053DCDAF6U",
        "attachments": [
            {
                "id": 1,
                "color": "24292f",
                "bot_id": "B01V53YD4FJ",
                "app_unfurl_url": "https:\/\/github.com\/kevinushey\/dotty",
                "is_app_unfurl": true,
                "app_id": "A01BP7R4KNY",
                "fallback": "kevinushey\/dotty",
                "text": "Destructuring assignments in R with the `.` object.",
                "title": "kevinushey\/dotty",
                "fields": [
                    {
                        "value": "20",
                        "title": "Stars",
                        "short": true
                    },
                    {
                        "value": "R",
                        "title": "Language",
                        "short": true
                    }
                ]
            }
        ],
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "I09Fg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Tagging "
                            },
                            {
                                "type": "user",
                                "user_id": "U021C7QBKJ8"
                            },
                            {
                                "type": "text",
                                "text": " - who implemented dotty "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/kevinushey\/dotty",
                                "text": "https:\/\/github.com\/kevinushey\/dotty"
                            },
                            {
                                "type": "text",
                                "text": ". Unsure if there an intended CRAN release?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U074BJYBWAJ",
        "type": "message",
        "ts": "1724075692.206939",
        "client_msg_id": "e10cd44a-b96d-467c-87ba-893cd6d051ea",
        "text": "How would you structure such construction in a call (in R everything is a call)\n```\nenv_vars &lt;- list(\n  \"api_key\" = \"fbivyb137294hgwv\",\n  \"hello\" = \"world\",\n  \"current_user\" = \"<mailto:josiah@parry.com|josiah@parry.com>\"\n)\n\nfor (key in env_vars) {\n  cat(key)\n}\n# <mailto:fbivyb137294hgwvworldjosiah@parry.com|fbivyb137294hgwvworldjosiah@parry.com>\n\n`for`(key, env_vars, cat(key))   #The same in shape of a call\n# <mailto:fbivyb137294hgwvworldjosiah@parry.com|fbivyb137294hgwvworldjosiah@parry.com>\n\nas.list(quote(\n  for (key in env_vars) {\n    cat(key)\n  }\n))\n# \n# [[1]]\n# `for`\n# \n# [[2]]\n# key\n# \n# [[3]]\n# env_vars\n# \n# [[4]]\n# {\n#   cat(key)\n# }```\n",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ede55b8f14d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-05-25\/7197646830592_ede55b8f14d6d526282e_72.jpg",
            "first_name": "Ricardo",
            "real_name": "Ricardo Villalba",
            "display_name": "Ricardo Villalba",
            "team": "T01DW9DLB2A",
            "name": "rikivillalba",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724002293.759999",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iB3Oz",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "How would you structure such construction in a call (in R everything is a call)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nenv_vars <- list(\n  \"api_key\" = \"fbivyb137294hgwv\",\n  \"hello\" = \"world\",\n  \"current_user\" = \"josiah@parry.com\"\n)\n\nfor (key in env_vars) {\n  cat(key)\n}\n# fbivyb137294hgwvworldjosiah@parry.com\n\n`for`(key, env_vars, cat(key))   #The same in shape of a call\n# fbivyb137294hgwvworldjosiah@parry.com\n\nas.list(quote(\n  for (key in env_vars) {\n    cat(key)\n  }\n))\n# \n# [[1]]\n# `for`\n# \n# [[2]]\n# key\n# \n# [[3]]\n# env_vars\n# \n# [[4]]\n# {\n#   cat(key)\n# }"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": []
                    }
                ]
            }
        ]
    },
    {
        "user": "U053DCDAF6U",
        "type": "message",
        "ts": "1724079686.859199",
        "client_msg_id": "ECA48197-7136-4754-B114-66BEEED3F202",
        "text": "Interesting! Since for and in are primitives I’m not sure what they expect. Do you have any insight into that? ",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "e714e755f196",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-11\/5077198575479_e714e755f19651f9eb3b_72.jpg",
            "first_name": "Josiah",
            "real_name": "Josiah Parry",
            "display_name": "",
            "team": "T01DW9DLB2A",
            "name": "josiah.parry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724002293.759999",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "bHlSq",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting! Since for and in are primitives "
                            },
                            {
                                "type": "text",
                                "text": "I’m"
                            },
                            {
                                "type": "text",
                                "text": " not sure what they expect"
                            },
                            {
                                "type": "text",
                                "text": "."
                            },
                            {
                                "type": "text",
                                "text": " Do you have any insight into that? "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U074BJYBWAJ",
        "type": "message",
        "ts": "1724080635.583479",
        "edited": {
            "user": "U074BJYBWAJ",
            "ts": "1724080719.000000"
        },
        "client_msg_id": "538c9c15-d784-475f-a4fa-cf1ad4beeb29",
        "text": "Interesting enough, R will throw a syntax error when trying to build a for with non symbolic (i.e. call) variable\n```quote(for(c(v1, v2) in x) y)\n# Syntax error unexpected (```\nBut it will accept a call and even will dput it in the syntax of a for loop\n```quote(`for`(c(v1, v2), x, y))\n# for (c(v1, v2) in x) y```\nHowever, when evaluating it will throw an error of symbol expected\n```eval(quote(`for`(c(), x, y)))\n# Error in for (c() in x) y : non-symbol loop variable```",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ede55b8f14d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-05-25\/7197646830592_ede55b8f14d6d526282e_72.jpg",
            "first_name": "Ricardo",
            "real_name": "Ricardo Villalba",
            "display_name": "Ricardo Villalba",
            "team": "T01DW9DLB2A",
            "name": "rikivillalba",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724002293.759999",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b4Qok",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Interesting enough, R will throw a syntax error when trying to build a for with non symbolic (i.e. call) variable\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "quote(for(c(v1, v2) in x) y)\n# Syntax error unexpected ("
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But it will accept a call and even will dput it in the syntax of a for loop\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "quote(`for`(c(v1, v2), x, y))\n# for (c(v1, v2) in x) y"
                            }
                        ],
                        "border": 0
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "However, when evaluating it will throw an error of symbol expected\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "eval(quote(`for`(c(), x, y)))\n# Error in for (c() in x) y : non-symbol loop variable"
                            }
                        ],
                        "border": 0
                    }
                ]
            }
        ]
    },
    {
        "user": "U01P4GL8MLG",
        "type": "message",
        "ts": "1724080991.734699",
        "edited": {
            "user": "U01P4GL8MLG",
            "ts": "1724081021.000000"
        },
        "client_msg_id": "bff5c58c-40d3-43ef-af0c-71408a91d427",
        "text": "I think \"overloading\" `for` this way will be difficult because R syntax does not know `(x, y)`. I agree with what <@U05MWA8V6T0> wrote above: have a go at implementing this a as a regular R function. It might take e.g. (1) an object to iterate over, (2) symbol that will get element name, (3) symbol that will get element value and (4) expression to evaluate at each iteration. The symbols of (2) and (3) can be handled `rlang`-style. I think you can look at `purrrr::map2()`  for an inspiration.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "5de466a8a9b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-17\/1763006207475_5de466a8a9b6c9303f5b_72.png",
            "first_name": "",
            "real_name": "Michał Bojanowski",
            "display_name": "Michał Bojanowski",
            "team": "T01DW9DLB2A",
            "name": "michal2992",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724002293.759999",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "QWg5Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think \"overloading\" "
                            },
                            {
                                "type": "text",
                                "text": "for",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " this way will be difficult because R syntax does not know "
                            },
                            {
                                "type": "text",
                                "text": "(x, y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I agree with what "
                            },
                            {
                                "type": "user",
                                "user_id": "U05MWA8V6T0"
                            },
                            {
                                "type": "text",
                                "text": " wrote above: have a go at implementing this a as a regular R function. It might take e.g. (1) an object to iterate over, (2) symbol that will get element name, (3) symbol that will get element value and (4) expression to evaluate at each iteration. The symbols of (2) and (3) can be handled "
                            },
                            {
                                "type": "text",
                                "text": "rlang",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "-style. I think you can look at "
                            },
                            {
                                "type": "text",
                                "text": "purrrr::map2()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  for an inspiration."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U074BJYBWAJ",
        "type": "message",
        "ts": "1724081171.070569",
        "edited": {
            "user": "U074BJYBWAJ",
            "ts": "1724081245.000000"
        },
        "client_msg_id": "4a0aa556-4985-46d8-847a-6fa34e48a6ee",
        "text": "If R eased the syntactic restriction on symbolic variable in `for` then we could write a function like `with_names(for (.(x, y) in var_list) { cat(x, \":\", y) })`   that do the job.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "ede55b8f14d6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2024-05-25\/7197646830592_ede55b8f14d6d526282e_72.jpg",
            "first_name": "Ricardo",
            "real_name": "Ricardo Villalba",
            "display_name": "Ricardo Villalba",
            "team": "T01DW9DLB2A",
            "name": "rikivillalba",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724002293.759999",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k+lcg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If R eased the syntactic restriction on symbolic variable in "
                            },
                            {
                                "type": "text",
                                "text": "for",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " then we could write a function like "
                            },
                            {
                                "type": "text",
                                "text": "with_names(for (.(x, y) in var_list) { cat(x, \":\", y) }) ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  that do the job."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U053DCDAF6U",
        "type": "message",
        "ts": "1724081275.439309",
        "client_msg_id": "78EFD47C-BAC9-4C30-837D-8A17B761E192",
        "text": "Yah, I think the issue is that if you write a function for this you’re essentially writing purrr::imap ",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "e714e755f196",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-11\/5077198575479_e714e755f19651f9eb3b_72.jpg",
            "first_name": "Josiah",
            "real_name": "Josiah Parry",
            "display_name": "",
            "team": "T01DW9DLB2A",
            "name": "josiah.parry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724002293.759999",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PsZtS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Yah, I think the issue is that if you write a function for this you’re essentially writing purrr::imap "
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U01P4GL8MLG",
        "type": "message",
        "ts": "1724081386.923209",
        "client_msg_id": "68b1bb69-3c00-40e8-ac36-1af1fa85da49",
        "text": "Right. Or better yet `purrrr::iwalk()`. So what are you after anyway? :)",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "5de466a8a9b6",
            "image_72": "https:\/\/avatars.slack-edge.com\/2021-02-17\/1763006207475_5de466a8a9b6c9303f5b_72.png",
            "first_name": "",
            "real_name": "Michał Bojanowski",
            "display_name": "Michał Bojanowski",
            "team": "T01DW9DLB2A",
            "name": "michal2992",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1724002293.759999",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "+Jp\/I",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Right. Or better yet "
                            },
                            {
                                "type": "text",
                                "text": "purrrr::iwalk()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". So what are you after anyway? :)"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
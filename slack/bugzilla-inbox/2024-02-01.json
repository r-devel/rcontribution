[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18655] Enhancements to `*wilcox` functions for large population sizes*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18655>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n             Status|CONFIRMED                   |ASSIGNED\n           Assignee|R-core@R-project.org        |maechler@stat.math.ethz.ch\n\n--- Comment #17 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nCreated attachment 3305\n  --&gt; <https:\/\/bugs.r-project.org\/attachment.cgi?id=3305&amp;action=edit>\nR script to do the timings *and* plots\n\n(In reply to Aidan H Lakshman from comment #16)\n&gt; updated patch passing tests in `tests\/d-p-q-r-tests.R`\n\nThank you; I've used a version of it in my version of R-devel  and did my own\ntiming comparisons, relying exclusively on elapsed system.time {on my Fedora\nLinux desktop}.\n\nI attach R code I've used (part of it you need to run in two different versions\nof R; also you'd need pkg `{sfsmisc}` for the `eaxis()` function.\n\nAs further attachment, I'll upload the  4-page pdf doing the timing comparisons\nsimilar to Aidan's (in log-log scale). \nIt's striking to see how discontinuous the behavior changes at around n=50 for\nthe old algorithm, where the new one followous  a powerlaw almost from the\nbeginning.\n\nIt seems the new version is not only an order of magnitude faster (for n &gt; 50),\nbut shows a slightly smaller slope. If true, the effects for large n {not\nmeasured} would be even more dramatical.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1706806981.508639",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4Pm+",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18655] Enhancements to ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "*wilcox",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " functions for large population sizes",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18655"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n             Status|CONFIRMED                   |ASSIGNED\n           Assignee|R-core@R-project.org        |maechler@stat.math.ethz.ch\n\n--- Comment #17 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nCreated attachment 3305\n  --> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3305&amp;action=edit",
                                "text": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3305&action=edit"
                            },
                            {
                                "type": "text",
                                "text": "\nR script to do the timings "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " plots\n\n(In reply to Aidan H Lakshman from comment #16)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "updated patch passing tests in "
                            },
                            {
                                "type": "text",
                                "text": "tests\/d-p-q-r-tests.R",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThank you; I've used a version of it in my version of R-devel  and did my own\ntiming comparisons, relying exclusively on elapsed system.time {on my Fedora\nLinux desktop}.\n\nI attach R code I've used (part of it you need to run in two different versions\nof R; also you'd need pkg "
                            },
                            {
                                "type": "text",
                                "text": "{sfsmisc}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for the "
                            },
                            {
                                "type": "text",
                                "text": "eaxis()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " function.\n\nAs further attachment, I'll upload the  4-page pdf doing the timing comparisons\nsimilar to Aidan's (in log-log scale). \nIt's striking to see how discontinuous the behavior changes at around n=50 for\nthe old algorithm, where the new one followous  a powerlaw almost from the\nbeginning.\n\nIt seems the new version is not only an order of magnitude faster (for n > 50),\nbut shows a slightly smaller slope. If true, the effects for large n {not\nmeasured} would be even more dramatical."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18655] Enhancements to `*wilcox` functions for large population sizes*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18655>\n\n--- Comment #18 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nCreated attachment 3306\n  --&gt; <https:\/\/bugs.r-project.org\/attachment.cgi?id=3306&amp;action=edit>\n4 plots comparing speed between R 4.3.2(patched) and R-devel+patch",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1706807067.336049",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "F5R=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18655] Enhancements to ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "*wilcox",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " functions for large population sizes",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18655"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #18 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nCreated attachment 3306\n  --> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3306&amp;action=edit",
                                "text": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3306&action=edit"
                            },
                            {
                                "type": "text",
                                "text": "\n4 plots comparing speed between R 4.3.2(patched) and R-devel+patch"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18655] Enhancements to `*wilcox` functions for large population sizes*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18655>\n\n--- Comment #19 from Aidan H Lakshman (<mailto:AHL27@pitt.edu|AHL27@pitt.edu>) ---\n(In reply to Martin Maechler from comment #17)\n\nThanks for these scripts and plots!\n\n&gt; It's striking to see how discontinuous the behavior changes at around n=50\n&gt; for the old algorithm, where the new one followous  a powerlaw almost from\n&gt; the beginning.\n\nI'm glad you could replicate this--the discontinuity is so big and abrupt that\nI was nervous there was a problem with my timing. It's certainly quite large.\n\nI did a little more testing\/investigation on this...my suspicion is that it\ncomes down to the old algorithm caching all the results in the R session for\n`n,m &lt;= 50`. This is manually observable in R:\n\n```\n&gt; system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n  0.037   0.000   0.039 \n&gt; system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n      0       0       0 \n&gt; system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n  0.000   0.002   0.009\n\n&gt; system.time(dwilcox(1250, 51, 51))\n   user  system elapsed \n  0.052   0.001   0.068 \n&gt; system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n  0.041   0.001   0.066 \n&gt; system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n      0       0       0 \n```\n\nNote that the first call to `dwilcox(..., 50, 50)` is significantly slower than\nsubsequent calls, but this resets when a call to `dwilcox(..., 51, 51)` is\nmade. `dwilcox(..., 51, 51)` is also much slower because of additional calls to\nreallocate memory. We could theoretically get a more accurate \"single shot\"\ncomparison by making calls to `dwilcox(..., 51, 51)` between each call. Indeed,\nthis does affect the timing results:\n\n```\n# benchmarking with an (untimed) call to `dwilcox(1250, 51, 51)` before each\ncall\n\n&gt; microbenchmark::microbenchmark(dwilcox(1250, 50, 50), \n+                                dwilcox(1250, 51, 51),\n+                                setup=dwilcox(1250,51,51))\nUnit: milliseconds\n                  expr      min       lq     mean   median       uq      max\n dwilcox(1250, 50, 50) 36.50689 38.01823 53.55743 40.07576 59.65723 220.2616\n dwilcox(1250, 51, 51) 45.97453 48.21489 62.66297 50.76862 53.64856 186.7225\n```\n\nNote the mean\/median runtimes are now much closer (and in the milliseconds).\nRemoving the `setup=...` call makes the call to `dwilcox(1250, 50, 50)` run in\nnanoseconds (on average). This isn't a super realistic way to benchmark\nruntimes, but it does explain why there is such a discontinuity--all the\nresults for `m,n&lt;=50` are cached, so execution is nearly instantaneous for any\n`n,m&lt;=50` once a call to `dwilcox(...,50,50)` has been made. It doesn't have to\nstrictly be 50,50; `dwilcox(..., 25, 25)` will reduce runtime of any subsequent\ncalls because of how the algorithm is implemented. \n\nDefinitely a very, very nice implementation by Kurt Hornik. I'm not sure that\nsomething like this would be replicable in the new algorithm since it doesn't\nhave cacheable internal values that remain unchanged across different values of\n`m,n`.\n\n&gt; It seems the new version is not only an order of magnitude faster (for n &gt;\n&gt; 50), but shows a slightly smaller slope. If true, the effects for large n\n&gt; {not measured} would be even more dramatical.\n\nThat's great news! I guess the question then is if the performance hit for `n,m\n&lt;= 50` is worth the performance benefit for `n &gt; 50 || m &gt; 50`.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1706811294.269589",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "s1\/E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18655] Enhancements to ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "*wilcox",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " functions for large population sizes",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18655"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #19 from Aidan H Lakshman ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:AHL27@pitt.edu",
                                "text": "AHL27@pitt.edu"
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Martin Maechler from comment #17)\n\nThanks for these scripts and plots!\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It's striking to see how discontinuous the behavior changes at around n=50\nfor the old algorithm, where the new one followous  a powerlaw almost from\nthe beginning."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI'm glad you could replicate this--the discontinuity is so big and abrupt that\nI was nervous there was a problem with my timing. It's certainly quite large.\n\nI did a little more testing\/investigation on this...my suspicion is that it\ncomes down to the old algorithm caching all the results in the R session for\n"
                            },
                            {
                                "type": "text",
                                "text": "n,m <= 50",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". This is manually observable in R:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n  0.037   0.000   0.039 \n> system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n      0       0       0 \n> system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n  0.000   0.002   0.009\n\n> system.time(dwilcox(1250, 51, 51))\n   user  system elapsed \n  0.052   0.001   0.068 \n> system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n  0.041   0.001   0.066 \n> system.time(dwilcox(1250, 50, 50))\n   user  system elapsed \n      0       0       0 \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nNote that the first call to "
                            },
                            {
                                "type": "text",
                                "text": "dwilcox(..., 50, 50)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is significantly slower than\nsubsequent calls, but this resets when a call to "
                            },
                            {
                                "type": "text",
                                "text": "dwilcox(..., 51, 51)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is\nmade. "
                            },
                            {
                                "type": "text",
                                "text": "dwilcox(..., 51, 51)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is also much slower because of additional calls to\nreallocate memory. We could theoretically get a more accurate \"single shot\"\ncomparison by making calls to "
                            },
                            {
                                "type": "text",
                                "text": "dwilcox(..., 51, 51)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " between each call. Indeed,\nthis does affect the timing results:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# benchmarking with an (untimed) call to `dwilcox(1250, 51, 51)` before each\ncall\n\n> microbenchmark::microbenchmark(dwilcox(1250, 50, 50), \n+                                dwilcox(1250, 51, 51),\n+                                setup=dwilcox(1250,51,51))\nUnit: milliseconds\n                  expr      min       lq     mean   median       uq      max\n dwilcox(1250, 50, 50) 36.50689 38.01823 53.55743 40.07576 59.65723 220.2616\n dwilcox(1250, 51, 51) 45.97453 48.21489 62.66297 50.76862 53.64856 186.7225\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nNote the mean\/median runtimes are now much closer (and in the milliseconds).\nRemoving the "
                            },
                            {
                                "type": "text",
                                "text": "setup=...",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " call makes the call to "
                            },
                            {
                                "type": "text",
                                "text": "dwilcox(1250, 50, 50)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " run in\nnanoseconds (on average). This isn't a super realistic way to benchmark\nruntimes, but it does explain why there is such a discontinuity--all the\nresults for "
                            },
                            {
                                "type": "text",
                                "text": "m,n<=50",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are cached, so execution is nearly instantaneous for any\n"
                            },
                            {
                                "type": "text",
                                "text": "n,m<=50",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " once a call to "
                            },
                            {
                                "type": "text",
                                "text": "dwilcox(...,50,50)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has been made. It doesn't have to\nstrictly be 50,50; "
                            },
                            {
                                "type": "text",
                                "text": "dwilcox(..., 25, 25)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " will reduce runtime of any subsequent\ncalls because of how the algorithm is implemented. \n\nDefinitely a very, very nice implementation by Kurt Hornik. I'm not sure that\nsomething like this would be replicable in the new algorithm since it doesn't\nhave cacheable internal values that remain unchanged across different values of\n"
                            },
                            {
                                "type": "text",
                                "text": "m,n",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "It seems the new version is not only an order of magnitude faster (for n >\n50), but shows a slightly smaller slope. If true, the effects for large n\n{not measured} would be even more dramatical."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThat's great news! I guess the question then is if the performance hit for `n,m\n<= 50` is worth the performance benefit for "
                            },
                            {
                                "type": "text",
                                "text": "n > 50 || m > 50",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18568] terms.formula(specials=\"&lt;non-syntactic&gt;\") fails to find calls to function*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18568>\n\n--- Comment #1 from Mikael Jagan (<mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>) ---\nGentle bump ... comments on the bug\/patch are welcome ...",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1706839526.597229",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "taJA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18568] terms.formula(specials=\"<non-syntactic>\") fails to find calls to function",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18568"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #1 from Mikael Jagan ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nGentle bump ... comments on the bug\/patch are welcome ..."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
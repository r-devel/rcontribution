[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18801] Confusing behavior of quote= in print.table*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18801>\n\n--- Comment #4 from Michael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) ---\nThanks Erin! I actually like the description in `?print.data.frame` much\nbetter.\n\nLooking now, I think part of why `?print.table` struggles here is that it's in\n'print.Rd' alongside the description of `print()` generically and the factor\nmethod for `print()`.\n\nOne idea for improvement here (of the documentation alone) is to move the\ndescription of the table method into 'print.dataframe.Rd', so that the two\nprint methods of \"tabular\" data are together.\n\nI can prepare a patch, but want to gauge interest first since it will require\ncareful splicing.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733472651.994289",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c5G",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18801] Confusing behavior of quote= in print.table",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18801"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #4 from Michael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThanks Erin! I actually like the description in "
                            },
                            {
                                "type": "text",
                                "text": "?print.data.frame",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " much\nbetter.\n\nLooking now, I think part of why "
                            },
                            {
                                "type": "text",
                                "text": "?print.table",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " struggles here is that it's in\n'print.Rd' alongside the description of "
                            },
                            {
                                "type": "text",
                                "text": "print()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " generically and the factor\nmethod for "
                            },
                            {
                                "type": "text",
                                "text": "print()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nOne idea for improvement here (of the documentation alone) is to move the\ndescription of the table method into 'print.dataframe.Rd', so that the two\nprint methods of \"tabular\" data are together.\n\nI can prepare a patch, but want to gauge interest first since it will require\ncareful splicing."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18801] Confusing behavior of quote= in print.table*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18801>\n\n--- Comment #5 from Michael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) ---\n(Elin -- apologies for the typo!!)",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733472706.887389",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "DMk0Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18801] Confusing behavior of quote= in print.table",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18801"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #5 from Michael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(Elin -- apologies for the typo!!)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 17350] Print method for POSIXt incorrectly displays fractions of a second*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=17350>\n\n--- Comment #29 from Suharto Anggono (<mailto:suharto_anggono@yahoo.com|suharto_anggono@yahoo.com>) ---\nWith r87419, `grepl(\"%OS[^0-9]\", format)` is used. It actually doesn't match\n`%OS` at the end of the string.\n\nIn tests\/datetime5.Rout.save , in the output of\n\n    (Lf3 &lt;- split(f3 &lt;- format(weekPlt + 0.25, format = fmt, digits = 3), fmt))\n\n, `\"%H:%M:%OS in %Y\"` outputs fractional seconds, but `\"%Y-%m-%d %H:%M:%OS\"`\ndoesn't.\n\nThe test `grepl(\"%OS($|[^0-9])\", format)` could be used.\n\n`gsub(\"%OS([^0-9])\", paste0(\"%OS\", np, \"\\\\1\"), format[OS.])` doesn't replace\n`%OS` that directly follows `%OS`. Yes, a format with `%OS%OS` is not sensible.\nTo handle the case, the regex `\"%OS(?![0-9])\"` with `perl = TRUE` could be\nused, using look-ahead in Perl-like regular expression.\n\nIf it is desired that `%OS` not followed by a digit drops trailing zeros like\nthe default format, current handling of `%OS` not followed by a digit in the C\ncode cannot be used at all. If not, the C code could be changed to use `digits`\nargument.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733502514.351199",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "c=O",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 17350] Print method for POSIXt incorrectly displays fractions of a second",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=17350"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #29 from Suharto Anggono ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:suharto_anggono@yahoo.com",
                                "text": "suharto_anggono@yahoo.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nWith r87419, "
                            },
                            {
                                "type": "text",
                                "text": "grepl(\"%OS[^0-9]\", format)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is used. It actually doesn't match\n"
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " at the end of the string.\n\nIn tests\/datetime5.Rout.save , in the output of\n\n    (Lf3 <- split(f3 <- format(weekPlt + 0.25, format = fmt, digits = 3), fmt))\n\n, "
                            },
                            {
                                "type": "text",
                                "text": "\"%H:%M:%OS in %Y\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " outputs fractional seconds, but "
                            },
                            {
                                "type": "text",
                                "text": "\"%Y-%m-%d %H:%M:%OS\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\ndoesn't.\n\nThe test "
                            },
                            {
                                "type": "text",
                                "text": "grepl(\"%OS($|[^0-9])\", format)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " could be used.\n\n"
                            },
                            {
                                "type": "text",
                                "text": "gsub(\"%OS([^0-9])\", paste0(\"%OS\", np, \"\\\\1\"), format[OS.])",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " doesn't replace\n"
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that directly follows "
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Yes, a format with "
                            },
                            {
                                "type": "text",
                                "text": "%OS%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is not sensible.\nTo handle the case, the regex "
                            },
                            {
                                "type": "text",
                                "text": "\"%OS(?![0-9])\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with "
                            },
                            {
                                "type": "text",
                                "text": "perl = TRUE",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " could be\nused, using look-ahead in Perl-like regular expression.\n\nIf it is desired that "
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " not followed by a digit drops trailing zeros like\nthe default format, current handling of "
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " not followed by a digit in the C\ncode cannot be used at all. If not, the C code could be changed to use "
                            },
                            {
                                "type": "text",
                                "text": "digits",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nargument."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18828] isGeneric(f=) and isGeneric(f=, fdef=) behave inconsistently for primitive functions*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18828>\n\n--- Comment #3 from Mikael Jagan (<mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>) ---\nSince the patch for bug 18369 has been backported, R-patched now has the word\n\"non-default\" in `help(\"isGeneric\")`.  I mention it mainly for anyone now\nconfused by my comment 2.\n\nWe should decide on a resolution here before R 4.4.3 is released in the spring.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733510255.659729",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6Fi3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18828] isGeneric(f=) and isGeneric(f=, fdef=) behave inconsistently for primitive functions",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18828"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #3 from Mikael Jagan ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nSince the patch for bug 18369 has been backported, R-patched now has the word\n\"non-default\" in "
                            },
                            {
                                "type": "text",
                                "text": "help(\"isGeneric\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  I mention it mainly for anyone now\nconfused by my comment 2.\n\nWe should decide on a resolution here before R 4.4.3 is released in the spring."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18831] New: setMethod(&lt;implicit&gt;) can duplicate message from setGeneric*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18831>\n\n            Bug ID: 18831\n           Summary: setMethod(&lt;implicit&gt;) can duplicate message from\n                    setGeneric\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>\n\nThis bug is visible in the installation output of **Matrix**, but we can\nreproduce it more easily like so:\n\n```\n&gt; args(rcond)\nfunction (x, norm = c(\"O\", \"I\", \"1\"), triangular = FALSE, uplo = \"U\", \n    ...) \nNULL\n&gt; args(methods:::.implicitTable[[\"rcond\"]])\nfunction (x, norm, ...) \nNULL\n&gt; setClass(\"zzz\")\n&gt; setMethod(\"rcond\", c(x = \"zzz\", norm = \"missing\"), function(x, norm, ...) NULL)\nCreating a generic function for 'rcond' from 'base' in the global environment\n    (from the saved implicit definition)\nCreating a generic function for 'rcond' from package 'base' in the global\nenvironment\n&gt;\n```\n\nThe first message is from `setGeneric` (called by `setMethod`).  The second\nmessage is from `setMethod` itself.  The latter is clearly redundant.\n\nThe first message is not signaled for all implicit generic functions.  It is\nsignaled only those whose signature differs (modulo the existence of `\"...\"`)\nfrom the original function, as determined by a call to\n`methods:::.identicalGeneric` inside of `setGeneric`.  Hence, for `colSums`,\nthere is no duplication:\n\n```\n&gt; args(colSums)\nfunction (x, na.rm = FALSE, dims = 1L) \nNULL\n&gt; args(methods:::.implicitTable[[\"colSums\"]])\nfunction (x, na.rm = FALSE, dims = 1, ...) \nNULL\n&gt; setClass(\"zzz\")\n&gt; setMethod(\"colSums\", c(x = \"zzz\"), function(x, na.rm = FALSE, dims = 1, ...) NULL)\nCreating a generic function for 'colSums' from package 'base' in the global\nenvironment\n&gt;\n```\n\n(Actually, whether `\"...\"` is ignored depends on the third argument of\n`methods:::.identicalGeneric`.  `setGeneric` passes\n`!nzchar(Sys.getenv(\"R_SETGENERIC_PICKY_DOTS\"))` which is typically `TRUE`.)\n\nI can think of two ways to avoid duplication:\n\n* Have `setGeneric` signal a message with a special class.  Then have\n`setMethod` catch messages of that class, in order to know whether its own\nmessage would be redundant.\n\n* Have `setGeneric` gain a `verbose` argument with options like `0=never`,\n`1=only for non-identical implicit`, `2=also for identical implicit`,\n`3=always`.  Then have `setMethod` call `setGeneric` with a suitable value for\n`verbose`.  Then `setMethod` would not need to signal its own message.\n\nNeither is particularly trivial, so I'll wait for comments before devising a\npatch.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733522045.602459",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Y73q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18831] New: setMethod(<implicit>) can duplicate message from setGeneric",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18831"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18831\n           Summary: setMethod(<implicit>) can duplicate message from\n                    setGeneric\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThis bug is visible in the installation output of **Matrix**, but we can\nreproduce it more easily like so:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> args(rcond)\nfunction (x, norm = c(\"O\", \"I\", \"1\"), triangular = FALSE, uplo = \"U\", \n    ...) \nNULL\n> args(methods:::.implicitTable[[\"rcond\"]])\nfunction (x, norm, ...) \nNULL\n> setClass(\"zzz\")\n> setMethod(\"rcond\", c(x = \"zzz\", norm = \"missing\"), function(x, norm, ...) NULL)\nCreating a generic function for 'rcond' from 'base' in the global environment\n    (from the saved implicit definition)\nCreating a generic function for 'rcond' from package 'base' in the global\nenvironment\n>\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe first message is from "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (called by "
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ").  The second\nmessage is from "
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " itself.  The latter is clearly redundant.\n\nThe first message is not signaled for all implicit generic functions.  It is\nsignaled only those whose signature differs (modulo the existence of "
                            },
                            {
                                "type": "text",
                                "text": "\"...\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")\nfrom the original function, as determined by a call to\n"
                            },
                            {
                                "type": "text",
                                "text": "methods:::.identicalGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " inside of "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Hence, for "
                            },
                            {
                                "type": "text",
                                "text": "colSums",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ",\nthere is no duplication:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> args(colSums)\nfunction (x, na.rm = FALSE, dims = 1L) \nNULL\n> args(methods:::.implicitTable[[\"colSums\"]])\nfunction (x, na.rm = FALSE, dims = 1, ...) \nNULL\n> setClass(\"zzz\")\n> setMethod(\"colSums\", c(x = \"zzz\"), function(x, na.rm = FALSE, dims = 1, ...) NULL)\nCreating a generic function for 'colSums' from package 'base' in the global\nenvironment\n>\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n(Actually, whether "
                            },
                            {
                                "type": "text",
                                "text": "\"...\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is ignored depends on the third argument of\n"
                            },
                            {
                                "type": "text",
                                "text": "methods:::.identicalGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " passes\n"
                            },
                            {
                                "type": "text",
                                "text": "!nzchar(Sys.getenv(\"R_SETGENERIC_PICKY_DOTS\"))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which is typically "
                            },
                            {
                                "type": "text",
                                "text": "TRUE",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".)\n\nI can think of two ways to avoid duplication:\n\n* Have "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " signal a message with a special class.  Then have\n"
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " catch messages of that class, in order to know whether its own\nmessage would be redundant.\n\n* Have "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " gain a "
                            },
                            {
                                "type": "text",
                                "text": "verbose",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " argument with options like "
                            },
                            {
                                "type": "text",
                                "text": "0=never",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ",\n"
                            },
                            {
                                "type": "text",
                                "text": "1=only for non-identical implicit",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "2=also for identical implicit",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ",\n"
                            },
                            {
                                "type": "text",
                                "text": "3=always",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Then have "
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " call "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with a suitable value for\n"
                            },
                            {
                                "type": "text",
                                "text": "verbose",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Then "
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would not need to signal its own message.\n\nNeither is particularly trivial, so I'll wait for comments before devising a\npatch."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18831] setMethod(&lt;implicit&gt;) can duplicate message from setGeneric*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18831>\n\n--- Comment #1 from Mikael Jagan (<mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>) ---\nI didn't notice that `formals(colSums)$dims` is `1L`, whereas\n`formals(methods:::.implicitTable[[\"colSums\"]])` is `1` (i.e., of type\n`\"double\"` rather than `\"integer\"`).  The signatures of `colSums` and\n`methods:::.implicitTable[[\"colSums\"]]` differ beyond the existence of `\"...\"`,\nyet `methods:::.identicalGeneric` reports that they are identical.  That\nsuggests to me that there are other bugs here.  I'll report them separately ...",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733524226.142139",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0+A16",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18831] setMethod(<implicit>) can duplicate message from setGeneric",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18831"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #1 from Mikael Jagan ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI didn't notice that "
                            },
                            {
                                "type": "text",
                                "text": "formals(colSums)$dims",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", whereas\n"
                            },
                            {
                                "type": "text",
                                "text": "formals(methods:::.implicitTable[[\"colSums\"]])",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (i.e., of type\n"
                            },
                            {
                                "type": "text",
                                "text": "\"double\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rather than "
                            },
                            {
                                "type": "text",
                                "text": "\"integer\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ").  The signatures of "
                            },
                            {
                                "type": "text",
                                "text": "colSums",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and\n"
                            },
                            {
                                "type": "text",
                                "text": "methods:::.implicitTable[[\"colSums\"]]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " differ beyond the existence of "
                            },
                            {
                                "type": "text",
                                "text": "\"...\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ",\nyet "
                            },
                            {
                                "type": "text",
                                "text": "methods:::.identicalGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reports that they are identical.  That\nsuggests to me that there are other bugs here.  I'll report them separately ..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 17350] Print method for POSIXt incorrectly displays fractions of a second*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=17350>\n\n--- Comment #30 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\n(In reply to Suharto Anggono from comment #29)\n&gt; With r87419, `grepl(\"%OS[^0-9]\", format)` is used. It actually doesn't match\n&gt; `%OS` at the end of the string.\n&gt; \n&gt; In tests\/datetime5.Rout.save , in the output of\n&gt; \n&gt;     (Lf3 &lt;- split(f3 &lt;- format(weekPlt + 0.25, format = fmt, digits = 3),\n&gt; fmt))\n&gt; \n&gt; , `\"%H:%M:%OS in %Y\"` outputs fractional seconds, but `\"%Y-%m-%d %H:%M:%OS\"`\n&gt; doesn't.\n&gt; \n&gt; The test `grepl(\"%OS($|[^0-9])\", format)` could be used.\n\nThank you,  you are entirely right.\n\n&gt; \n&gt; `gsub(\"%OS([^0-9])\", paste0(\"%OS\", np, \"\\\\1\"), format[OS.])` doesn't replace\n&gt; `%OS` that directly follows `%OS`. Yes, a format with `%OS%OS` is not\n&gt; sensible. To handle the case, the regex `\"%OS(?![0-9])\"` with `perl = TRUE`\n&gt; could be used, using look-ahead in Perl-like regular expression.\n\nI agree .. (but see below)\n\n&gt; If it is desired that `%OS` not followed by a digit drops trailing zeros\n&gt; like the default format, current handling of `%OS` not followed by a digit\n&gt; in the C code cannot be used at all. If not, the C code could be changed to\n&gt; use `digits` argument.\n\nI had the same idea already when working at the last \"iteration\" of this.\nIt is a bit unsatisfying to use `getOption(\"digits.sec\")` from C code, when\nindeed we had said that the `digits` *argument* of `format.POSIXlt()`  should\nhave preference.\nGiven the `gsub(\"%OS..\")` problems you've mentioned above,\nI'm now convinced we should pass `digits` down to C and then can simplify the R\ncode in this case;  makes things even simpler, slightly faster *and* more\nconsistent &amp; logical.\nWhat I will do is actually pass   `digits &lt;- useDig(x_$sec, digits)`  (instead\nof manually pasting `np`).",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733525918.315409",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dHfC6",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 17350] Print method for POSIXt incorrectly displays fractions of a second",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=17350"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #30 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Suharto Anggono from comment #29)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "With r87419, "
                            },
                            {
                                "type": "text",
                                "text": "grepl(\"%OS[^0-9]\", format)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is used. It actually doesn't match\n"
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " at the end of the string.\n\nIn tests\/datetime5.Rout.save , in the output of\n\n    (Lf3 <- split(f3 <- format(weekPlt + 0.25, format = fmt, digits = 3),\nfmt))\n\n, "
                            },
                            {
                                "type": "text",
                                "text": "\"%H:%M:%OS in %Y\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " outputs fractional seconds, but "
                            },
                            {
                                "type": "text",
                                "text": "\"%Y-%m-%d %H:%M:%OS\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\ndoesn't.\n\nThe test "
                            },
                            {
                                "type": "text",
                                "text": "grepl(\"%OS($|[^0-9])\", format)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " could be used."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThank you,  you are entirely right.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "text",
                                "text": "gsub(\"%OS([^0-9])\", paste0(\"%OS\", np, \"\\\\1\"), format[OS.])",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " doesn't replace\n"
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that directly follows "
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Yes, a format with "
                            },
                            {
                                "type": "text",
                                "text": "%OS%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is not\nsensible. To handle the case, the regex "
                            },
                            {
                                "type": "text",
                                "text": "\"%OS(?![0-9])\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with "
                            },
                            {
                                "type": "text",
                                "text": "perl = TRUE",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\ncould be used, using look-ahead in Perl-like regular expression."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI agree .. (but see below)\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If it is desired that "
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " not followed by a digit drops trailing zeros\nlike the default format, current handling of "
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " not followed by a digit\nin the C code cannot be used at all. If not, the C code could be changed to\nuse "
                            },
                            {
                                "type": "text",
                                "text": "digits",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " argument."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI had the same idea already when working at the last \"iteration\" of this.\nIt is a bit unsatisfying to use "
                            },
                            {
                                "type": "text",
                                "text": "getOption(\"digits.sec\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " from C code, when\nindeed we had said that the "
                            },
                            {
                                "type": "text",
                                "text": "digits",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "argument",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " of "
                            },
                            {
                                "type": "text",
                                "text": "format.POSIXlt()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  should\nhave preference.\nGiven the "
                            },
                            {
                                "type": "text",
                                "text": "gsub(\"%OS..\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " problems you've mentioned above,\nI'm now convinced we should pass "
                            },
                            {
                                "type": "text",
                                "text": "digits",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " down to C and then can simplify the R\ncode in this case;  makes things even simpler, slightly faster "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " more\nconsistent & logical.\nWhat I will do is actually pass   "
                            },
                            {
                                "type": "text",
                                "text": "digits <- useDig(x_$sec, digits)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  (instead\nof manually pasting "
                            },
                            {
                                "type": "text",
                                "text": "np",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18832] New: default expression for 'dims' differs between 'colSums' and implicit generic function definition*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18832>\n\n            Bug ID: 18832\n           Summary: default expression for 'dims' differs between\n                    'colSums' and implicit generic function definition\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>\n\nCreated attachment 3433\n  --&gt; <https:\/\/bugs.r-project.org\/attachment.cgi?id=3433&amp;action=edit>\nunifies default expressions for 'dims' across colSums.R, colSums.Rd,\nmakeBasicFunsList.R\n\n```\n&gt; args(colSums)\nfunction (x, na.rm = FALSE, dims = 1L) \nNULL\n&gt; args(methods:::.implicitTable[[\"colSums\"]])\nfunction (x, na.rm = FALSE, dims = 1, ...) \nNULL\n```\n\nThe same can be seen for `rowSums`, `rowMeans`, and `colMeans`.  The\ndiscrepancy seems to have existed \"forever\", i.e., since the implicit generic\nfunction definitions were added in r49869.  Even the documentation does not\nmatch the source code, as `colSums.Rd` has `dims = 1`.\n\nThis patch addresses the problems and passes `make check-all`.\n\nIn packages, calls to `setMethod` with `dims = 1` instead of `dims = 1L` in the\nmethod formals should continue to work, as `setMethod` silently (!?) allows\nmismatches in the default expressions:\n\n```\n&gt; setClass(\"zzz\", contains = \"matrix\")\n&gt; setMethod(\"colSums\", c(x = \"zzz\"), function(x, na.rm = FALSE, dims = \"whatever\", ...) dims)\nCreating a generic function for 'colSums' from package 'base' in the global\nenvironment\n&gt; args(colSums)\nfunction (x, na.rm = FALSE, dims = 1, ...) \nNULL\n&gt; args(selectMethod(\"colSums\", c(x = \"zzz\")))\nfunction (x, na.rm = FALSE, dims = \"whatever\", ...) \nNULL\n&gt; colSums(new(\"zzz\"))\n[1] \"whatever\"\n```\n\nThe patch should likewise not affect `codoc` output for packages defining\nmethods for `colSums`.\n\nAs a point of reference, methods for `colSums` in **Matrix** 1.7-1 use formals\nwith `dims = 1L`, matching the function in **base** but not the implicit\ngeneric function definition in **methods**.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733531328.183339",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tdAH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18832] New: default expression for 'dims' differs between 'colSums' and implicit generic function definition",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18832"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18832\n           Summary: default expression for 'dims' differs between\n                    'colSums' and implicit generic function definition\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": "\n\nCreated attachment 3433\n  --> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3433&amp;action=edit",
                                "text": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3433&action=edit"
                            },
                            {
                                "type": "text",
                                "text": "\nunifies default expressions for 'dims' across colSums.R, colSums.Rd,\nmakeBasicFunsList.R\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> args(colSums)\nfunction (x, na.rm = FALSE, dims = 1L) \nNULL\n> args(methods:::.implicitTable[[\"colSums\"]])\nfunction (x, na.rm = FALSE, dims = 1, ...) \nNULL\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe same can be seen for "
                            },
                            {
                                "type": "text",
                                "text": "rowSums",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "rowMeans",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and "
                            },
                            {
                                "type": "text",
                                "text": "colMeans",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  The\ndiscrepancy seems to have existed \"forever\", i.e., since the implicit generic\nfunction definitions were added in r49869.  Even the documentation does not\nmatch the source code, as "
                            },
                            {
                                "type": "text",
                                "text": "colSums.Rd",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has "
                            },
                            {
                                "type": "text",
                                "text": "dims = 1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThis patch addresses the problems and passes "
                            },
                            {
                                "type": "text",
                                "text": "make check-all",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nIn packages, calls to "
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with "
                            },
                            {
                                "type": "text",
                                "text": "dims = 1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead of "
                            },
                            {
                                "type": "text",
                                "text": "dims = 1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the\nmethod formals should continue to work, as "
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " silently (!?) allows\nmismatches in the default expressions:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> setClass(\"zzz\", contains = \"matrix\")\n> setMethod(\"colSums\", c(x = \"zzz\"), function(x, na.rm = FALSE, dims = \"whatever\", ...) dims)\nCreating a generic function for 'colSums' from package 'base' in the global\nenvironment\n> args(colSums)\nfunction (x, na.rm = FALSE, dims = 1, ...) \nNULL\n> args(selectMethod(\"colSums\", c(x = \"zzz\")))\nfunction (x, na.rm = FALSE, dims = \"whatever\", ...) \nNULL\n> colSums(new(\"zzz\"))\n[1] \"whatever\"\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe patch should likewise not affect "
                            },
                            {
                                "type": "text",
                                "text": "codoc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " output for packages defining\nmethods for "
                            },
                            {
                                "type": "text",
                                "text": "colSums",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nAs a point of reference, methods for "
                            },
                            {
                                "type": "text",
                                "text": "colSums",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in **Matrix** 1.7-1 use formals\nwith "
                            },
                            {
                                "type": "text",
                                "text": "dims = 1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", matching the function in **base** but not the implicit\ngeneric function definition in **methods**."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18833] New: methods:::.identicalGeneric can wrongly ignore differences in default values of formal arguments*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18833>\n\n            Bug ID: 18833\n           Summary: methods:::.identicalGeneric can wrongly ignore\n                    differences in default values of formal arguments\n           Product: R\n           Version: R 4.4.x\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>\n\nCreated attachment 3434\n  --&gt; <https:\/\/bugs.r-project.org\/attachment.cgi?id=3434&amp;action=edit>\nmethods:::.identicalGeneric comparing default expressions also when names match\nwithout \"...\"\n\nThis bug is related to but different from bug 18831.\n\nCurrently, the installation output of **Matrix** ends with:\n\n```\n** byte-compile and prepare package for lazy loading\nCreating a generic function for 'drop' from package 'base' in package 'Matrix'\nCreating a generic function for 'chol2inv' from 'base' in package 'Matrix'\n    (from the saved implicit definition)\nCreating a generic function for 'chol2inv' from package 'base' in package\n'Matrix'\n## &lt;irrelevant noise due to missing class definitions&gt;\nCreating a generic function for 'colSums' from package 'base' in package\n'Matrix'\nCreating a generic function for 'colMeans' from package 'base' in package\n'Matrix'\nCreating a generic function for 'rowSums' from package 'base' in package\n'Matrix'\nCreating a generic function for 'rowMeans' from package 'base' in package\n'Matrix'\nCreating a generic function for 'cov2cor' from package 'stats' in package\n'Matrix'\nCreating a generic function for 'diag' from package 'base' in package 'Matrix'\nCreating a generic function for 'diag&lt;-' from package 'base' in package\n'Matrix'\nCreating a generic function for 'norm' from package 'base' in package 'Matrix'\nCreating a generic function for 'qr.Q' from package 'base' in package 'Matrix'\nCreating a generic function for 'qr.R' from package 'base' in package 'Matrix'\nCreating a generic function for 'qr.X' from package 'base' in package 'Matrix'\nCreating a generic function for 'qr.coef' from package 'base' in package\n'Matrix'\nCreating a generic function for 'qr.fitted' from package 'base' in package\n'Matrix'\nCreating a generic function for 'qr.resid' from package 'base' in package\n'Matrix'\nCreating a generic function for 'qr.qty' from package 'base' in package\n'Matrix'\nCreating a generic function for 'qr.qy' from package 'base' in package 'Matrix'\nCreating a generic function for 'rcond' from 'base' in package 'Matrix'\n    (from the saved implicit definition)\nCreating a generic function for 'rcond' from package 'base' in package 'Matrix'\nCreating a generic function for 'toeplitz' from 'stats' in package 'Matrix'\n    (from the saved implicit definition)\nCreating a generic function for 'toeplitz' from package 'stats' in package\n'Matrix'\nCreating a generic function for 'which' from package 'base' in package 'Matrix'\nCreating a generic function for 'zapsmall' from package 'base' in package\n'Matrix'\n```\n\nThe output is from `setMethod` calls in `Matrix\/R\/*.R`.  What struck me as odd\nis that `chol2inv`, `rcond`, and `toeplitz` get the parenthetical `(from the\nsaved implicit definition)`, while other functions with implicit generic\nfunction definitions, such as `norm` and `qr.X`, do not.\n\nIt turns out that `setGeneric(&lt;implicit&gt;)`, which is called from\n`setMethod(&lt;implicit&gt;)`, uses `methods:::.identicalGeneric` to test whether the\nsignatures of the implicit generic function and \"original\" function are similar\nenough.  If the answer is \"no\", then it signals the message with parenthesis.\n\nIt makes sense, then, that the message is signaled for `chol2inv`, `rcond`, and\n`toeplitz`:\n\n```\n&gt; args(rcond)\n",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733534468.947949",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kYnUd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18833] New: methods:::.identicalGeneric can wrongly ignore differences in default values of formal arguments",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18833"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18833\n           Summary: methods:::.identicalGeneric can wrongly ignore\n                    differences in default values of formal arguments\n           Product: R\n           Version: R 4.4.x\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": "\n\nCreated attachment 3434\n  --> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3434&amp;action=edit",
                                "text": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3434&action=edit"
                            },
                            {
                                "type": "text",
                                "text": "\nmethods:::.identicalGeneric comparing default expressions also when names match\nwithout \"...\"\n\nThis bug is related to but different from bug 18831.\n\nCurrently, the installation output of **Matrix** ends with:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "** byte-compile and prepare package for lazy loading\nCreating a generic function for 'drop' from package 'base' in package 'Matrix'\nCreating a generic function for 'chol2inv' from 'base' in package 'Matrix'\n    (from the saved implicit definition)\nCreating a generic function for 'chol2inv' from package 'base' in package\n'Matrix'\n## <irrelevant noise due to missing class definitions>\nCreating a generic function for 'colSums' from package 'base' in package\n'Matrix'\nCreating a generic function for 'colMeans' from package 'base' in package\n'Matrix'\nCreating a generic function for 'rowSums' from package 'base' in package\n'Matrix'\nCreating a generic function for 'rowMeans' from package 'base' in package\n'Matrix'\nCreating a generic function for 'cov2cor' from package 'stats' in package\n'Matrix'\nCreating a generic function for 'diag' from package 'base' in package 'Matrix'\nCreating a generic function for 'diag<-' from package 'base' in package\n'Matrix'\nCreating a generic function for 'norm' from package 'base' in package 'Matrix'\nCreating a generic function for 'qr.Q' from package 'base' in package 'Matrix'\nCreating a generic function for 'qr.R' from package 'base' in package 'Matrix'\nCreating a generic function for 'qr.X' from package 'base' in package 'Matrix'\nCreating a generic function for 'qr.coef' from package 'base' in package\n'Matrix'\nCreating a generic function for 'qr.fitted' from package 'base' in package\n'Matrix'\nCreating a generic function for 'qr.resid' from package 'base' in package\n'Matrix'\nCreating a generic function for 'qr.qty' from package 'base' in package\n'Matrix'\nCreating a generic function for 'qr.qy' from package 'base' in package 'Matrix'\nCreating a generic function for 'rcond' from 'base' in package 'Matrix'\n    (from the saved implicit definition)\nCreating a generic function for 'rcond' from package 'base' in package 'Matrix'\nCreating a generic function for 'toeplitz' from 'stats' in package 'Matrix'\n    (from the saved implicit definition)\nCreating a generic function for 'toeplitz' from package 'stats' in package\n'Matrix'\nCreating a generic function for 'which' from package 'base' in package 'Matrix'\nCreating a generic function for 'zapsmall' from package 'base' in package\n'Matrix'\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe output is from "
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " calls in "
                            },
                            {
                                "type": "text",
                                "text": "Matrix\/R\/*.R",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  What struck me as odd\nis that "
                            },
                            {
                                "type": "text",
                                "text": "chol2inv",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "rcond",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and "
                            },
                            {
                                "type": "text",
                                "text": "toeplitz",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " get the parenthetical `(from the\nsaved implicit definition)`, while other functions with implicit generic\nfunction definitions, such as "
                            },
                            {
                                "type": "text",
                                "text": "norm",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "qr.X",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", do not.\n\nIt turns out that "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric(<implicit>)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which is called from\n"
                            },
                            {
                                "type": "text",
                                "text": "setMethod(<implicit>)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", uses "
                            },
                            {
                                "type": "text",
                                "text": "methods:::.identicalGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to test whether the\nsignatures of the implicit generic function and \"original\" function are similar\nenough.  If the answer is \"no\", then it signals the message with parenthesis.\n\nIt makes sense, then, that the message is signaled for "
                            },
                            {
                                "type": "text",
                                "text": "chol2inv",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "rcond",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and\n"
                            },
                            {
                                "type": "text",
                                "text": "toeplitz",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":\n\n```"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "args(rcond)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "function (x, norm = c(\"O\", \"I\", \"1\"), triangular = FALSE, uplo = \"U\", \n    ...) \nNULL\n&gt; args(methods:::.implicitTable[[\"rcond\"]])\nfunction (x, norm, ...) \nNULL\n&gt; setClass(\"zzz\")\n&gt; setMethod(\"rcond\", c(x = \"zzz\", norm = \"missing\"), function(x, norm, ...) NULL)\nCreating a generic function for 'rcond' from 'base' in the global environment\n    (from the saved implicit definition)\nCreating a generic function for 'rcond' from package 'base' in the global\nenvironment\n&gt; \n```\n\nThe \"bug\" is that the message is not __also__ signaled for `colSums`,\n`colMeans`, `rowSums`, `rowMeans`, `norm`, and `qr.X`.  In each of these cases,\nthe formal arguments other than `...` have the identical names but\nnon-identical default expressions.  `methods:::.identicalGeneric` \"forgets\" to\ntests for differences in the default expressions.\n\n```\n&gt; args(norm)\nfunction (x, type = c(\"O\", \"I\", \"F\", \"M\", \"2\")) \nNULL\n&gt; args(methods:::.implicitTable[[\"norm\"]])\nfunction (x, type, ...) \nNULL\n&gt; setClass(\"zzz\")\n&gt; setMethod(\"norm\", c(x = \"zzz\", type = \"missing\"), function(x, type, ...) NULL)\nCreating a generic function for 'norm' from package 'base' in the global\nenvironment\n&gt; \n```\n\nA small adjustment to logic in `methods:::.identicalGeneric` fixes the bug.\n\n```\nIndex: src\/library\/methods\/R\/Methods.R\n===================================================================\n--- src\/library\/methods\/R\/Methods.R     (revision 87423)\n+++ src\/library\/methods\/R\/Methods.R     (working copy)\n@@ -1473,7 +1473,9 @@\n     ## xtra... &lt;- FALSE\n     if(!identical(formals(f1d), formals(f2d))) {\n        a1 &lt;- names(formals(f1d)); a2 &lt;- names(formals(f2d))\n-       if(identical(a1, a2))\n+       if(identical(a1, a2) ||\n+          (identical(c(a1, \"...\"), a2) &amp;&amp; allow.extra.dots &amp;&amp;\n+           !identical(`length&lt;-`(formals(f1d), length(a2)), formals(f2d))))\n            return(gettext(\"formal arguments differ (in default values?)\"))\n        else if(identical(c(a1, \"...\"), a2) &amp;&amp; allow.extra.dots)\n             ## silently accept an extra \"...\"\n```\n\nNow:\n\n```\n&gt; setClass(\"zzz\")\n&gt; setMethod(\"norm\", c(x = \"zzz\", type = \"missing\"), function(x, type, ...) NULL)\nCreating a generic function for 'norm' from 'base' in the global environment\n    (from the saved implicit definition)\nCreating a generic function for 'norm' from package 'base' in the global\nenvironment\n&gt; \n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733534468.969949",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "GhRL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "function (x, norm = c(\"O\", \"I\", \"1\"), triangular = FALSE, uplo = \"U\", \n    ...) \nNULL"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "args(methods:::.implicitTable[[\"rcond\"]])"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "function (x, norm, ...) \nNULL"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "setClass(\"zzz\")\nsetMethod(\"rcond\", c(x = \"zzz\", norm = \"missing\"), function(x, norm, ...) NULL)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Creating a generic function for 'rcond' from 'base' in the global environment\n    (from the saved implicit definition)\nCreating a generic function for 'rcond' from package 'base' in the global\nenvironment"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nThe \"bug\" is that the message is not __also__ signaled for `colSums`,\n`colMeans`, `rowSums`, `rowMeans`, `norm`, and `qr.X`.  In each of these cases,\nthe formal arguments other than `...` have the identical names but\nnon-identical default expressions.  `methods:::.identicalGeneric` \"forgets\" to\ntests for differences in the default expressions.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "args(norm)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "function (x, type = c(\"O\", \"I\", \"F\", \"M\", \"2\")) \nNULL"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "args(methods:::.implicitTable[[\"norm\"]])"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "function (x, type, ...) \nNULL"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "setClass(\"zzz\")\nsetMethod(\"norm\", c(x = \"zzz\", type = \"missing\"), function(x, type, ...) NULL)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Creating a generic function for 'norm' from package 'base' in the global\nenvironment"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nA small adjustment to logic in `methods:::.identicalGeneric` fixes the bug.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Index: src\/library\/methods\/R\/Methods.R\n===================================================================\n--- src\/library\/methods\/R\/Methods.R     (revision 87423)\n+++ src\/library\/methods\/R\/Methods.R     (working copy)\n@@ -1473,7 +1473,9 @@\n     ## xtra... <- FALSE\n     if(!identical(formals(f1d), formals(f2d))) {\n        a1 <- names(formals(f1d)); a2 <- names(formals(f2d))\n-       if(identical(a1, a2))\n+       if(identical(a1, a2) ||\n+          (identical(c(a1, \"...\"), a2) && allow.extra.dots &&\n+           !identical("
                            },
                            {
                                "type": "text",
                                "text": "length<-",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(formals(f1d), length(a2)), formals(f2d))))\n            return(gettext(\"formal arguments differ (in default values?)\"))\n        else if(identical(c(a1, \"...\"), a2) && allow.extra.dots)\n             ## silently accept an extra \"...\""
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nNow:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "setClass(\"zzz\")\nsetMethod(\"norm\", c(x = \"zzz\", type = \"missing\"), function(x, type, ...) NULL)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Creating a generic function for 'norm' from 'base' in the global environment\n    (from the saved implicit definition)\nCreating a generic function for 'norm' from package 'base' in the global\nenvironment"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "```"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18833] methods:::.identicalGeneric can wrongly ignore differences in default values of formal arguments*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18833>\n\n--- Comment #1 from Mikael Jagan (<mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>) ---\nOops - the patch above mixed up `1` and `2` and so failed in `reg-S4.R`.  The\none below passes `make check-all`.\n\n```\nIndex: src\/library\/methods\/R\/Methods.R\n===================================================================\n--- src\/library\/methods\/R\/Methods.R     (revision 87423)\n+++ src\/library\/methods\/R\/Methods.R     (working copy)\n@@ -1473,7 +1473,9 @@\n     ## xtra... &lt;- FALSE\n     if(!identical(formals(f1d), formals(f2d))) {\n        a1 &lt;- names(formals(f1d)); a2 &lt;- names(formals(f2d))\n-       if(identical(a1, a2))\n+       if(identical(a1, a2) ||\n+          (identical(c(a1, \"...\"), a2) &amp;&amp; allow.extra.dots &amp;&amp;\n+           !identical(`length&lt;-`(formals(f2d), length(a1)), formals(f1d))))\n            return(gettext(\"formal arguments differ (in default values?)\"))\n        else if(identical(c(a1, \"...\"), a2) &amp;&amp; allow.extra.dots)\n             ## silently accept an extra \"...\"\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733536961.992099",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "j16",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18833] methods:::.identicalGeneric can wrongly ignore differences in default values of formal arguments",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18833"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #1 from Mikael Jagan ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nOops - the patch above mixed up "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "2",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and so failed in "
                            },
                            {
                                "type": "text",
                                "text": "reg-S4.R",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  The\none below passes "
                            },
                            {
                                "type": "text",
                                "text": "make check-all",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Index: src\/library\/methods\/R\/Methods.R\n===================================================================\n--- src\/library\/methods\/R\/Methods.R     (revision 87423)\n+++ src\/library\/methods\/R\/Methods.R     (working copy)\n@@ -1473,7 +1473,9 @@\n     ## xtra... <- FALSE\n     if(!identical(formals(f1d), formals(f2d))) {\n        a1 <- names(formals(f1d)); a2 <- names(formals(f2d))\n-       if(identical(a1, a2))\n+       if(identical(a1, a2) ||\n+          (identical(c(a1, \"...\"), a2) && allow.extra.dots &&\n+           !identical(`length<-`(formals(f2d), length(a1)), formals(f1d))))\n            return(gettext(\"formal arguments differ (in default values?)\"))\n        else if(identical(c(a1, \"...\"), a2) && allow.extra.dots)\n             ## silently accept an extra \"...\"\n"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18832] default expression for 'dims' differs between 'colSums' and implicit generic function definition*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18832>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n\n--- Comment #1 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nI don't think this is a bug.\n`1` and `1L`  are the same for all purposes here, and in the help page, `1` is\nmuch easier to understand than `1L`.\n\nMost R learners will learn about the difference between  `1` and `1L` very much\nlater than they should read and understand help pages.\n\nConsequently some (like me) have used \"1\" in help pages (notably for \"daily\nlife\" base R functions) when still using `1L` in code.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733578608.438949",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4QN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18832] default expression for 'dims' differs between 'colSums' and implicit generic function definition",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18832"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n\n--- Comment #1 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI don't think this is a bug.\n"
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  are the same for all purposes here, and in the help page, "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is\nmuch easier to understand than "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nMost R learners will learn about the difference between  "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " very much\nlater than they should read and understand help pages.\n\nConsequently some (like me) have used \"1\" in help pages (notably for \"daily\nlife\" base R functions) when still using "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18832] default expression for 'dims' differs between 'colSums' and implicit generic function definition*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18832>\n\n--- Comment #2 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\n\n&gt; Consequently some (like me) have used \"1\" in help pages (notably for \"daily\n&gt; life\" base R functions) when still using `1L` in code.\n\nwhich only addresses one part. Ideally, we'd use the same in the function and\nthe implicit generic.\n\nStill, \"bug\" seems to strong a word -- or did I misread and you showed an\nexample where it does matter ?",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733578751.960959",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "hgO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18832] default expression for 'dims' differs between 'colSums' and implicit generic function definition",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18832"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #2 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Consequently some (like me) have used \"1\" in help pages (notably for \"daily\nlife\" base R functions) when still using "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in code."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nwhich only addresses one part. Ideally, we'd use the same in the function and\nthe implicit generic.\n\nStill, \"bug\" seems to strong a word -- or did I misread and you showed an\nexample where it does matter ?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18832] default expression for 'dims' differs between 'colSums' and implicit generic function definition*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18832>\n\n--- Comment #3 from Mikael Jagan (<mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>) ---\n(In reply to Martin Maechler from comment #1)\n&gt; I don't think this is a bug.\n&gt; `1` and `1L`  are the same for all purposes here, and in the help page, `1`\n&gt; is much easier to understand than `1L`.\n&gt; \n&gt; Most R learners will learn about the difference between  `1` and `1L` very\n&gt; much later than they should read and understand help pages.\n&gt; \n&gt; Consequently some (like me) have used \"1\" in help pages (notably for \"daily\n&gt; life\" base R functions) when still using `1L` in code.\n\nI agree in general.  I included the change to colSums.Rd because I was not\naware that there was a wider practice of omitting the integer suffix in help\npages (or that `tools::codoc` ignores such differences also for contributed\npackages).\n\nThe main content of this report is the difference between the original and\nimplicit generic functions.\n\n(In reply to Martin Maechler from comment #2)\n&gt; \n&gt; Still, \"bug\" seems to strong a word -- or did I misread and you showed an\n&gt; example where it does matter ?\n\nIt should never matter to users, as you say.  I think that there is a potential\nfor package authors (including me) to be confused.  For S3, WRE explicitly\nrecommends:\n\n&gt; If the generic specifies defaults, all methods should use the same defaults. \n\nwhere the meaning of \"the same\" is ambiguous; `1` and `1L` are equal but not\nidentical.  It seems that `tools::checkS3methods` does not actually enforce\nthis recommendation for S3, even where the default expressions are neither\nidentical nor equal.  For S4, there is no such recommendation, but I would\nstrongly expect that the same principle applies.\n\nFWIW, whether the patch to `methods\/R\/makeBasicFunsList.R` is adopted here\naffects whether the patch to `methods\/R\/Methods.R` in bug 18833 comment 1\nchanges the output of `setGeneric(\"colSums\")`.  This report is really secondary\nto bug 18831 and bug 18833.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733584914.120109",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "9p=i",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18832] default expression for 'dims' differs between 'colSums' and implicit generic function definition",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18832"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #3 from Mikael Jagan ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Martin Maechler from comment #1)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I don't think this is a bug.\n"
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  are the same for all purposes here, and in the help page, "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nis much easier to understand than "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nMost R learners will learn about the difference between  "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " very\nmuch later than they should read and understand help pages.\n\nConsequently some (like me) have used \"1\" in help pages (notably for \"daily\nlife\" base R functions) when still using "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in code."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI agree in general.  I included the change to colSums.Rd because I was not\naware that there was a wider practice of omitting the integer suffix in help\npages (or that "
                            },
                            {
                                "type": "text",
                                "text": "tools::codoc",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ignores such differences also for contributed\npackages).\n\nThe main content of this report is the difference between the original and\nimplicit generic functions.\n\n(In reply to Martin Maechler from comment #2)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\nStill, \"bug\" seems to strong a word -- or did I misread and you showed an\nexample where it does matter ?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIt should never matter to users, as you say.  I think that there is a potential\nfor package authors (including me) to be confused.  For S3, WRE explicitly\nrecommends:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If the generic specifies defaults, all methods should use the same defaults. "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nwhere the meaning of \"the same\" is ambiguous; "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are equal but not\nidentical.  It seems that "
                            },
                            {
                                "type": "text",
                                "text": "tools::checkS3methods",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does not actually enforce\nthis recommendation for S3, even where the default expressions are neither\nidentical nor equal.  For S4, there is no such recommendation, but I would\nstrongly expect that the same principle applies.\n\nFWIW, whether the patch to "
                            },
                            {
                                "type": "text",
                                "text": "methods\/R\/makeBasicFunsList.R",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is adopted here\naffects whether the patch to "
                            },
                            {
                                "type": "text",
                                "text": "methods\/R\/Methods.R",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in bug 18833 comment 1\nchanges the output of "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric(\"colSums\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  This report is really secondary\nto bug 18831 and bug 18833."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18831] setMethod(&lt;implicit&gt;) can duplicate message from setGeneric*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18831>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n             Status|UNCONFIRMED                 |CONFIRMED\n     Ever confirmed|0                           |1\n\n--- Comment #2 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nThank you, Mikael!\n\n(In reply to Mikael Jagan from comment #1)\n&gt; I didn't notice that `formals(colSums)$dims` is `1L`, whereas\n&gt; `formals(methods:::.implicitTable[[\"colSums\"]])` is `1` (i.e., of type\n&gt; `\"double\"` rather than `\"integer\"`).  The signatures of `colSums` and\n&gt; `methods:::.implicitTable[[\"colSums\"]]` differ beyond the existence of\n&gt; `\"...\"`, yet `methods:::.identicalGeneric` reports that they are identical. \n&gt; That suggests to me that there are other bugs here.  I'll report them\n&gt; separately ...\n\nAs I suggested in another thread, I disagree:  identicalGeneric() rather should\nnot hick up on the difference between `1` and `1L` ..\n\n(In reply to Mikael Jagan from comment #0)\n.............\n&gt; I can think of two ways to avoid duplication:\n&gt; \n&gt; * Have `setGeneric` signal a message with a special class.  Then have\n&gt; `setMethod` catch messages of that class, in order to know whether its own\n&gt; message would be redundant.\n&gt; \n&gt; * Have `setGeneric` gain a `verbose` argument with options like `0=never`,\n&gt; `1=only for non-identical implicit`, `2=also for identical implicit`,\n&gt; `3=always`.  Then have `setMethod` call `setGeneric` with a suitable value\n&gt; for `verbose`.  Then `setMethod` would not need to signal its own message.\n\nWithout delving into the code, I'd clearly favour the 2nd way, possibly with\nargument name `notify` or similar (instead of `verbose`), using string values\nrather than integer codes, and then use `match.arg()`",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733585967.607359",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "k\/s5",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18831] setMethod(<implicit>) can duplicate message from setGeneric",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18831"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n             Status|UNCONFIRMED                 |CONFIRMED\n     Ever confirmed|0                           |1\n\n--- Comment #2 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThank you, Mikael!\n\n(In reply to Mikael Jagan from comment #1)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I didn't notice that "
                            },
                            {
                                "type": "text",
                                "text": "formals(colSums)$dims",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", whereas\n"
                            },
                            {
                                "type": "text",
                                "text": "formals(methods:::.implicitTable[[\"colSums\"]])",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (i.e., of type\n"
                            },
                            {
                                "type": "text",
                                "text": "\"double\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " rather than "
                            },
                            {
                                "type": "text",
                                "text": "\"integer\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ").  The signatures of "
                            },
                            {
                                "type": "text",
                                "text": "colSums",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and\n"
                            },
                            {
                                "type": "text",
                                "text": "methods:::.implicitTable[[\"colSums\"]]",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " differ beyond the existence of\n"
                            },
                            {
                                "type": "text",
                                "text": "\"...\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", yet "
                            },
                            {
                                "type": "text",
                                "text": "methods:::.identicalGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reports that they are identical. \nThat suggests to me that there are other bugs here.  I'll report them\nseparately ..."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nAs I suggested in another thread, I disagree:  identicalGeneric() rather should\nnot hick up on the difference between "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "1L",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ..\n\n(In reply to Mikael Jagan from comment #0)\n............."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I can think of two ways to avoid duplication:\n\n* Have "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " signal a message with a special class.  Then have\n"
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " catch messages of that class, in order to know whether its own\nmessage would be redundant.\n\n* Have "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " gain a "
                            },
                            {
                                "type": "text",
                                "text": "verbose",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " argument with options like "
                            },
                            {
                                "type": "text",
                                "text": "0=never",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ",\n"
                            },
                            {
                                "type": "text",
                                "text": "1=only for non-identical implicit",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "2=also for identical implicit",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ",\n"
                            },
                            {
                                "type": "text",
                                "text": "3=always",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Then have "
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " call "
                            },
                            {
                                "type": "text",
                                "text": "setGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " with a suitable value\nfor "
                            },
                            {
                                "type": "text",
                                "text": "verbose",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Then "
                            },
                            {
                                "type": "text",
                                "text": "setMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would not need to signal its own message."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nWithout delving into the code, I'd clearly favour the 2nd way, possibly with\nargument name "
                            },
                            {
                                "type": "text",
                                "text": "notify",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or similar (instead of "
                            },
                            {
                                "type": "text",
                                "text": "verbose",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "), using string values\nrather than integer codes, and then use "
                            },
                            {
                                "type": "text",
                                "text": "match.arg()",
                                "style": {
                                    "code": true
                                }
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 17350] Print method for POSIXt incorrectly displays fractions of a second*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=17350>\n\n--- Comment #31 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\n(In reply to Martin Maechler from comment #30)\n...........\n.........\n&gt; Given the `gsub(\"%OS..\")` problems you've mentioned above,\n&gt; I'm now convinced we should pass `digits` down to C and then can simplify\n&gt; the R code in this case; makes things even simpler, slightly faster *and*\n&gt; more consistent &amp; logical. What I will do is actually pass \n    `digits &lt;- useDig(x_$sec, digits)` \n&gt; (instead of manually pasting `np`).\n\nI've committed this in svn rev 87427.   Indeed, the R code is simpler now and\nmore happens in C.\n\nOne thing: `format = \"%OS%OS\"` or similar *never* has worked correctly, also\nbecause the internal C code does not assume there is more than one `%OS` per\nformat string.\n\nI have now documented this behavior (svn rev 87428);  alternatively &amp; more\nnicely, this should be fixed (in the internal C code; exercise in C level\nstring handling.... I'm not planning to address this myself).",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733602584.658229",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Hgt",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 17350] Print method for POSIXt incorrectly displays fractions of a second",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=17350"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #31 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Martin Maechler from comment #30)\n...........\n........."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Given the "
                            },
                            {
                                "type": "text",
                                "text": "gsub(\"%OS..\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " problems you've mentioned above,\nI'm now convinced we should pass "
                            },
                            {
                                "type": "text",
                                "text": "digits",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " down to C and then can simplify\nthe R code in this case; makes things even simpler, slightly faster "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nmore consistent & logical. What I will do is actually pass "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "    "
                            },
                            {
                                "type": "text",
                                "text": "digits <- useDig(x_$sec, digits)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(instead of manually pasting "
                            },
                            {
                                "type": "text",
                                "text": "np",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI've committed this in svn rev 87427.   Indeed, the R code is simpler now and\nmore happens in C.\n\nOne thing: "
                            },
                            {
                                "type": "text",
                                "text": "format = \"%OS%OS\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or similar "
                            },
                            {
                                "type": "text",
                                "text": "never",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " has worked correctly, also\nbecause the internal C code does not assume there is more than one "
                            },
                            {
                                "type": "text",
                                "text": "%OS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " per\nformat string.\n\nI have now documented this behavior (svn rev 87428);  alternatively & more\nnicely, this should be fixed (in the internal C code; exercise in C level\nstring handling.... I'm not planning to address this myself)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18825] Improve tools::pkg2HTML accessibility*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18825>\n\n--- Comment #3 from Sebastian Meyer (<mailto:seb.meyer@fau.de|seb.meyer@fau.de>) ---\n(In reply to Lluis from comment #2)\n&gt; But apologies because I didn't use the right word and I have mislead you.\n\nNo problem, I just solved one of the smaller issues as I was recently\ninvestigating Rd metadata anyway.\n\nDuplicated argument IDs are another issue as you described. Note that it is\nperfectly valid to have function arguments 'x' and 'X', as in, e.g.,\n`stats:::reorder.default`, but you are right that `Rd2HTML()` currently does\nnot account for that when creating the id's. It seems id values are\ncase-sensitive in HTML, so I think Rd2HTML could simply preserve the\ncapitalization of the argument names.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733615993.933119",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/dhc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18825] Improve tools::pkg2HTML accessibility",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18825"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #3 from Sebastian Meyer ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:seb.meyer@fau.de",
                                "text": "seb.meyer@fau.de"
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Lluis from comment #2)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "But apologies because I didn't use the right word and I have mislead you."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nNo problem, I just solved one of the smaller issues as I was recently\ninvestigating Rd metadata anyway.\n\nDuplicated argument IDs are another issue as you described. Note that it is\nperfectly valid to have function arguments 'x' and 'X', as in, e.g.,\n"
                            },
                            {
                                "type": "text",
                                "text": "stats:::reorder.default",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but you are right that "
                            },
                            {
                                "type": "text",
                                "text": "Rd2HTML()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " currently does\nnot account for that when creating the id's. It seems id values are\ncase-sensitive in HTML, so I think Rd2HTML could simply preserve the\ncapitalization of the argument names."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18834] New: ?cbind.data.frame '...' argument could be improved to highlight check.names= should not be provided*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18834>\n\n            Bug ID: 18834\n           Summary: ?cbind.data.frame '...' argument could be improved to\n                    highlight check.names= should not be provided\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: minor\n          Priority: P5\n         Component: Documentation\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>\n\nWe have this in `?cbind.data.frame`:\n\n```\n  \\item{\\dots}{(generalized) vectors or matrices.  These can be given as named\n    arguments.  Other \\R objects may be coerced as appropriate, or S4\n    methods may be used: see sections \\sQuote{Details} and\n    \\sQuote{Value}.  (For the \\code{\"data.frame\"} method of \\code{cbind}\n    these can be further arguments to \\code{\\link{data.frame}} such as\n    \\code{stringsAsFactors}.)}\n```\n\nI read that and tried passing `check.names=FALSE` to solve an \"ugly name\nproblem\" I was seeing.\n\nThat of course is an error:\n\n```\nError in data.frame(..., check.names = FALSE) : \n  formal argument \"check.names\" matched by multiple actual arguments\n```\n\nSo I would quibble that \"these can be further arguments to `data.frame` besides\n`check.names`\".\n\n`?cbind.data.frame` as a whole can be said to be accurate because we see this\nelsewhere (`\\section{Data frame methods}`):\n\n```\n  The \\code{cbind} data frame method is just a wrapper for\n  \\code{\\link{data.frame}(..., check.names = FALSE)}.  This means that\n  it will split matrix columns in data frame arguments.\n```\n\nHowever I read the above in `\\item{\\dots}` and didn't feel the need to read the\nwhole page, and besides this does not address the issue I encountered head-on.\n\nAn alternative\/further enhancement would be for `cbind.data.frame` itself to\nensure `!hasName(list(...), \"check.names\"), but given `cbind.data.frame()`\nreally is just a trivial wrapper to `data.frame()`, I worry that\novercomplicates the implementation.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1733626248.503939",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "v9GvA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18834] New: ?cbind.data.frame '...' argument could be improved to highlight check.names= should not be provided",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18834"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18834\n           Summary: ?cbind.data.frame '...' argument could be improved to\n                    highlight check.names= should not be provided\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: minor\n          Priority: P5\n         Component: Documentation\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWe have this in "
                            },
                            {
                                "type": "text",
                                "text": "?cbind.data.frame",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "  \\item{\\dots}{(generalized) vectors or matrices.  These can be given as named\n    arguments.  Other \\R objects may be coerced as appropriate, or S4\n    methods may be used: see sections \\sQuote{Details} and\n    \\sQuote{Value}.  (For the \\code{\"data.frame\"} method of \\code{cbind}\n    these can be further arguments to \\code{\\link{data.frame}} such as\n    \\code{stringsAsFactors}.)}\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI read that and tried passing "
                            },
                            {
                                "type": "text",
                                "text": "check.names=FALSE",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to solve an \"ugly name\nproblem\" I was seeing.\n\nThat of course is an error:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Error in data.frame(..., check.names = FALSE) : \n  formal argument \"check.names\" matched by multiple actual arguments\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nSo I would quibble that \"these can be further arguments to "
                            },
                            {
                                "type": "text",
                                "text": "data.frame",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " besides\n"
                            },
                            {
                                "type": "text",
                                "text": "check.names",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\".\n\n"
                            },
                            {
                                "type": "text",
                                "text": "?cbind.data.frame",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as a whole can be said to be accurate because we see this\nelsewhere ("
                            },
                            {
                                "type": "text",
                                "text": "\\section{Data frame methods}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "):\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "  The \\code{cbind} data frame method is just a wrapper for\n  \\code{\\link{data.frame}(..., check.names = FALSE)}.  This means that\n  it will split matrix columns in data frame arguments.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nHowever I read the above in "
                            },
                            {
                                "type": "text",
                                "text": "\\item{\\dots}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and didn't feel the need to read the\nwhole page, and besides this does not address the issue I encountered head-on.\n\nAn alternative\/further enhancement would be for "
                            },
                            {
                                "type": "text",
                                "text": "cbind.data.frame",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " itself to\nensure "
                            },
                            {
                                "type": "text",
                                "text": "!hasName(list(...), \"check.names\"), but given ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "cbind.data.frame()`\nreally is just a trivial wrapper to "
                            },
                            {
                                "type": "text",
                                "text": "data.frame()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", I worry that\novercomplicates the implementation."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
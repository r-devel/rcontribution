[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18699] 10x faster duplicated() for numeric_version*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18699>\n\nKurt Hornik (<mailto:Kurt.Hornik@wu.ac.at|Kurt.Hornik@wu.ac.at>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|---                         |FIXED\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #2 from Kurt Hornik (<mailto:Kurt.Hornik@wu.ac.at|Kurt.Hornik@wu.ac.at>) ---\nThanks again.\nI just committed a variant of the patch to the trunk (c86424).\nOne needs to skip adding the extra 0s for 0-length elts representing missings,\nas otherwise missings and all-zeros come out the same.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713193756.339409",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pI8E",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18699] 10x faster duplicated() for numeric_version",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18699"
                            },
                            {
                                "type": "text",
                                "text": "\n\nKurt Hornik ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:Kurt.Hornik@wu.ac.at",
                                "text": "Kurt.Hornik@wu.ac.at",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|---                         |FIXED\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #2 from Kurt Hornik ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:Kurt.Hornik@wu.ac.at",
                                "text": "Kurt.Hornik@wu.ac.at",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThanks again.\nI just committed a variant of the patch to the trunk (c86424).\nOne needs to skip adding the extra 0s for 0-length elts representing missings,\nas otherwise missings and all-zeros come out the same."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18703] New: Warn in library(include.only=) calls where that directive is ignored*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18703>\n\n            Bug ID: 18703\n           Summary: Warn in library(include.only=) calls where that\n                    directive is ignored\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Add-ons\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>\n\nFollowing up r-devel thread\n<https:\/\/stat.ethz.ch\/pipermail\/r-devel\/2024-April\/083319.html>.\n\nThis is Martin's suggestion:\n\n```\n    &gt;&gt; I would assume that\n\n    &gt;&gt; library(Matrix, include.only=\"isDiagonal\")\n\n    &gt;&gt; implies that only `isDiagonal` ends up on the search path\n\n    &gt; This could also be a reasonable behavior, but neither does that happen\n    &gt; today.\n\nIndeed; I think we should signal a warning at least in the case\nit does not happen --- namely when \"parts of Matrix\" are already\nin the search path.\n```\n\nI have interpreted this conservatively so that\n\n```\nlibrary(Matrix)\nlibrary(Matrix)\n```\n\nGives no warning, neither does\n\n```\nlibrary(Matrix, include.only=\"isDiagonal\")\nlibrary(Matrix)\n```\n\nThat is, we only throw a new warning in `library()` when (1) the package is\nalready attached and (2) the current call uses `include.only=`.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713199556.768629",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "oMg",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18703] New: Warn in library(include.only=) calls where that directive is ignored",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18703"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18703\n           Summary: Warn in library(include.only=) calls where that\n                    directive is ignored\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Add-ons\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFollowing up r-devel thread\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stat.ethz.ch\/pipermail\/r-devel\/2024-April\/083319.html"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nThis is Martin's suggestion:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "    >> I would assume that\n\n    >> library(Matrix, include.only=\"isDiagonal\")\n\n    >> implies that only `isDiagonal` ends up on the search path\n\n    > This could also be a reasonable behavior, but neither does that happen\n    > today.\n\nIndeed; I think we should signal a warning at least in the case\nit does not happen --- namely when \"parts of Matrix\" are already\nin the search path.\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI have interpreted this conservatively so that\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "library(Matrix)\nlibrary(Matrix)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nGives no warning, neither does\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "library(Matrix, include.only=\"isDiagonal\")\nlibrary(Matrix)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThat is, we only throw a new warning in "
                            },
                            {
                                "type": "text",
                                "text": "library()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " when (1) the package is\nalready attached and (2) the current call uses "
                            },
                            {
                                "type": "text",
                                "text": "include.only=",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18704] New: Enhance detach() for packages to return what names were detached*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18704>\n\n            Bug ID: 18704\n           Summary: Enhance detach() for packages to return what names\n                    were detached\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Add-ons\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>\n\nFollowing up r-devel thread\n<https:\/\/stat.ethz.ch\/pipermail\/r-devel\/2024-April\/083319.html>.\n\nMartin's suggestion:\n\n```\n    &gt;&gt; ?library could also mention using detach() followed by library() or\n    &gt;&gt; attachNamespace() with a new include.only specification.\n\n    &gt; This is the \"quite hard to accomplish\" I alluded to, admittedly I hadn't\n    &gt; forced myself to write it all out -- maybe it's not as bad as all that.\n    &gt; After some iterations, today I think we'd want to do...\n\n    &gt; modify_attach &lt;- function(pkg, new_names) {\n    &gt;   if (!startsWith(pkg, \"package:\")) pkg &lt;- paste0(\"package:\", pkg)\n    &gt;   old &lt;- tryCatch(ls(pkg, all.names=TRUE), error=\\(c) character())\n    &gt;   if (length(old)) detach(pkg)\n    &gt;   attachNamespace(.rmpkg(pkg), include.only=c(new_names, old))\n    &gt; }\n\n    &gt; Perhaps detach() could invisibly return the exported names to make this a\n    &gt; tiny bit easier (today it returns NULL):\n\nI agree that such changed detach() behavior would be \"nice\" here;\nbut I wouldn't like to change its default behavior, notably as\nin 99.5% of its use, the names would not be used.\nI'd agree to add a new option for detach() to return the names\n(visibly in that case).\n```\n\nI still think returning the names by default (_invisibly_) should be considered\n-- those 99.5% of cases where it's ignored will continue to work and ostensibly\nbehave \"as before\" because the different return is just ignored.\n\nOne reason I'm not convinced about using an option is that we already have\ndifferent return behavior of `detach()` for detaching environments vs. packages\n-- the former returns \"the environment which was returned by `attach` when the\nobject was attached\".\n\nSo any new option for `detach()` would have to either (a) override that return\nbehavior for `detach(env)` to return `ls(env)` instead or (b) be an option that\nhas no effect for `detach(env)` and only applies for `detach(package)`, a\ndesign which I find awkward if we can avoid it.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713200106.648809",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ONnnM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18704] New: Enhance detach() for packages to return what names were detached",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18704"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18704\n           Summary: Enhance detach() for packages to return what names\n                    were detached\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Add-ons\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFollowing up r-devel thread\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stat.ethz.ch\/pipermail\/r-devel\/2024-April\/083319.html"
                            },
                            {
                                "type": "text",
                                "text": ".\n\nMartin's suggestion:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "    >> ?library could also mention using detach() followed by library() or\n    >> attachNamespace() with a new include.only specification.\n\n    > This is the \"quite hard to accomplish\" I alluded to, admittedly I hadn't\n    > forced myself to write it all out -- maybe it's not as bad as all that.\n    > After some iterations, today I think we'd want to do...\n\n    > modify_attach <- function(pkg, new_names) {\n    >   if (!startsWith(pkg, \"package:\")) pkg <- paste0(\"package:\", pkg)\n    >   old <- tryCatch(ls(pkg, all.names=TRUE), error=\\(c) character())\n    >   if (length(old)) detach(pkg)\n    >   attachNamespace(.rmpkg(pkg), include.only=c(new_names, old))\n    > }\n\n    > Perhaps detach() could invisibly return the exported names to make this a\n    > tiny bit easier (today it returns NULL):\n\nI agree that such changed detach() behavior would be \"nice\" here;\nbut I wouldn't like to change its default behavior, notably as\nin 99.5% of its use, the names would not be used.\nI'd agree to add a new option for detach() to return the names\n(visibly in that case).\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI still think returning the names by default ("
                            },
                            {
                                "type": "text",
                                "text": "invisibly",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") should be considered\n-- those 99.5% of cases where it's ignored will continue to work and ostensibly\nbehave \"as before\" because the different return is just ignored.\n\nOne reason I'm not convinced about using an option is that we already have\ndifferent return behavior of "
                            },
                            {
                                "type": "text",
                                "text": "detach()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " for detaching environments vs. packages\n-- the former returns \"the environment which was returned by "
                            },
                            {
                                "type": "text",
                                "text": "attach",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " when the\nobject was attached\".\n\nSo any new option for "
                            },
                            {
                                "type": "text",
                                "text": "detach()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would have to either (a) override that return\nbehavior for "
                            },
                            {
                                "type": "text",
                                "text": "detach(env)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to return "
                            },
                            {
                                "type": "text",
                                "text": "ls(env)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " instead or (b) be an option that\nhas no effect for "
                            },
                            {
                                "type": "text",
                                "text": "detach(env)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and only applies for "
                            },
                            {
                                "type": "text",
                                "text": "detach(package)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", a\ndesign which I find awkward if we can avoid it."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18705] New: Document (lack of) include.only= behavior under \"reattachment\", and suggested workaround*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18705>\n\n            Bug ID: 18705\n           Summary: Document (lack of) include.only= behavior under\n                    \"reattachment\", and suggested workaround\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Documentation\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>\n\nFollowing up r-devel thread\n<https:\/\/stat.ethz.ch\/pipermail\/r-devel\/2024-April\/083319.html>.\n\n\nThis is Martin's suggestion:\n\n```\n    &gt; Regardless, I think your suggestion to just point to\n    &gt; detach()+attachNamespace() is reasonable enough, the rare users that care\n    &gt; about this are likely to be able to figure out the rest from there.\n\nSo I think we agree here;  mentioning such a modify_attach()\n... I'd use an example *without* tryCatch() as I think the user\n    should choose their own line of action in such cases\n...\non the help page would then be appropriate.\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713200195.733079",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "SncM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18705] New: Document (lack of) include.only= behavior under \"reattachment\", and suggested workaround",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18705"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18705\n           Summary: Document (lack of) include.only= behavior under\n                    \"reattachment\", and suggested workaround\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Documentation\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFollowing up r-devel thread\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/stat.ethz.ch\/pipermail\/r-devel\/2024-April\/083319.html"
                            },
                            {
                                "type": "text",
                                "text": ".\n\n\n\nThis is Martin's suggestion:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "    > Regardless, I think your suggestion to just point to\n    > detach()+attachNamespace() is reasonable enough, the rare users that care\n    > about this are likely to be able to figure out the rest from there.\n\nSo I think we agree here;  mentioning such a modify_attach()\n... I'd use an example *without* tryCatch() as I think the user\n    should choose their own line of action in such cases\n...\non the help page would then be appropriate.\n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18705] Document (lack of) include.only= behavior under \"reattachment\", and suggested workaround*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18705>\n\n--- Comment #1 from Michael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) ---\nCreated attachment 3331\n  --&gt; <https:\/\/bugs.r-project.org\/attachment.cgi?id=3331&amp;action=edit>\nDescribe re-attach behavior and workarounds in ?library\n\nTo get things started, here is a suggested improvement to the wording in\n`?library`.\n\nI include an example around a modified version of the `modify_attach()`\nfunction used in the r-devel thread which avoids `tryCatch()`, corrects an\nomission of `character.only=` in `detach()`, and switches to `library()` over\n`attachNamespace()` given we're in `?library`.\n\nI also tried to refine wording around \"attach\" and \"load\".\n\nI note that the old phrasing \"[library does] not reload a namespace which is\nalready loaded\" is not _precisely_ true, in the following sense:\n\n```\nloadNamespace(\"Matrix\")\ntrace(loadNamespace, at=1, quote(message(\"Loading \", package)))\nlibrary(Matrix)\n# Tracing loadNamespace(package, lib.loc) step 1 \n# Loading Matrix\n```\n\nI.e., it's really `loadNamespace()` that has the behavior of skipping reloading\na namespace which is already loaded.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713245326.113209",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "eo\/g=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18705] Document (lack of) include.only= behavior under \"reattachment\", and suggested workaround",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18705"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #1 from Michael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nCreated attachment 3331\n  --> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3331&amp;action=edit",
                                "text": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3331&action=edit"
                            },
                            {
                                "type": "text",
                                "text": "\nDescribe re-attach behavior and workarounds in ?library\n\nTo get things started, here is a suggested improvement to the wording in\n"
                            },
                            {
                                "type": "text",
                                "text": "?library",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nI include an example around a modified version of the "
                            },
                            {
                                "type": "text",
                                "text": "modify_attach()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nfunction used in the r-devel thread which avoids "
                            },
                            {
                                "type": "text",
                                "text": "tryCatch()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", corrects an\nomission of "
                            },
                            {
                                "type": "text",
                                "text": "character.only=",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in "
                            },
                            {
                                "type": "text",
                                "text": "detach()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and switches to "
                            },
                            {
                                "type": "text",
                                "text": "library()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " over\n"
                            },
                            {
                                "type": "text",
                                "text": "attachNamespace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " given we're in "
                            },
                            {
                                "type": "text",
                                "text": "?library",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nI also tried to refine wording around \"attach\" and \"load\".\n\nI note that the old phrasing \"[library does] not reload a namespace which is\nalready loaded\" is not "
                            },
                            {
                                "type": "text",
                                "text": "precisely",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " true, in the following sense:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "loadNamespace(\"Matrix\")\ntrace(loadNamespace, at=1, quote(message(\"Loading \", package)))\nlibrary(Matrix)\n# Tracing loadNamespace(package, lib.loc) step 1 \n# Loading Matrix\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI.e., it's really "
                            },
                            {
                                "type": "text",
                                "text": "loadNamespace()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " that has the behavior of skipping reloading\na namespace which is already loaded."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
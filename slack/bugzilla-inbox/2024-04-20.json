[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18706] double colon operator in formulas, in particular as relates to stats::offset*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18706>\n\nElin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |elin.waring@gmail.com\n\n--- Comment #5 from Elin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) ---\nI had a memory of a past issue about offset and terms() which is\nbug 17169  \nmaking me wonder whether it is a deeper issue.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713633082.551899",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gXJZ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18706] double colon operator in formulas, in particular as relates to stats::offset",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18706"
                            },
                            {
                                "type": "text",
                                "text": "\n\nElin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |elin.waring@gmail.com\n\n--- Comment #5 from Elin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI had a memory of a past issue about offset and terms() which is\nbug 17169  \nmaking me wonder whether it is a deeper issue."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 7895] Error with user defined split function in rpart*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=7895>\n\n--- Comment #5 from Elin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) ---\nSee <https:\/\/github.com\/bethatkinson\/rpart\/issues\/13>",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713635799.189829",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "0Md9",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 7895] Error with user defined split function in rpart",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=7895"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #5 from Elin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nSee "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/bethatkinson\/rpart\/issues\/13"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 16750] Treat character as factor in summary.default*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=16750>\n\nMichael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |michaelchirico4@gmail.com\n\n--- Comment #1 from Michael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) ---\nOne concern on initial glance is what happens when there are many unique\nstrings in the vector, but `summary.factor()`'s `maxsum=` argument handles this\nnicely:\n\n```\nx=factor(sample(levels(interaction(letters, letters)), 1e5, TRUE))\ny=seq_along(x)\nsummary(data.frame(x,y))\n#        x               y         \n#  q.v    :  185   Min.   :     1  \n#  d.v    :  179   1st Qu.: 25001  \n#  c.b    :  178   Median : 50000  \n#  c.l    :  178   Mean   : 50000  \n#  k.t    :  176   3rd Qu.: 75000  \n#  v.b    :  176   Max.   :100000  \n#  (Other):98928\n```\n\nEven in the case of all strings being unique, the factor summary seems nicer:\n\n```\nsummary(data.frame(l=factor(letters), i=1:26))\n#        l            i        \n#  a      : 1   Min.   : 1.00  \n#  b      : 1   1st Qu.: 7.25  \n#  c      : 1   Median :13.50  \n#  d      : 1   Mean   :13.50  \n#  e      : 1   3rd Qu.:19.75  \n#  f      : 1   Max.   :26.00  \n#  (Other):20 \n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713647832.609919",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "UL2pc",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 16750] Treat character as factor in summary.default",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=16750"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMichael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |michaelchirico4@gmail.com\n\n--- Comment #1 from Michael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nOne concern on initial glance is what happens when there are many unique\nstrings in the vector, but "
                            },
                            {
                                "type": "text",
                                "text": "summary.factor()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "'s "
                            },
                            {
                                "type": "text",
                                "text": "maxsum=",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " argument handles this\nnicely:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "x=factor(sample(levels(interaction(letters, letters)), 1e5, TRUE))\ny=seq_along(x)\nsummary(data.frame(x,y))\n#        x               y         \n#  q.v    :  185   Min.   :     1  \n#  d.v    :  179   1st Qu.: 25001  \n#  c.b    :  178   Median : 50000  \n#  c.l    :  178   Mean   : 50000  \n#  k.t    :  176   3rd Qu.: 75000  \n#  v.b    :  176   Max.   :100000  \n#  (Other):98928\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nEven in the case of all strings being unique, the factor summary seems nicer:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "summary(data.frame(l=factor(letters), i=1:26))\n#        l            i        \n#  a      : 1   Min.   : 1.00  \n#  b      : 1   1st Qu.: 7.25  \n#  c      : 1   Median :13.50  \n#  d      : 1   Mean   :13.50  \n#  e      : 1   3rd Qu.:19.75  \n#  f      : 1   Max.   :26.00  \n#  (Other):20 \n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 16845] There appears to be an error computing the CDF of a non-central T distributed random variable using the pt() function*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=16845>\n\nMichael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |michaelchirico4@gmail.com\n\n--- Comment #2 from Michael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) ---\nI confirm the discontinuity highlighted is still present.\n\nTyping out the code from the doc since it's in an image and not otherwise\ncopy-paste-able:\n\n```\n# FIGURE 1\nrsd.range = seq(.001, .05, .0001)*100\nrho.range = 100 \/ rsd.range\nprob.above = pt(q = 1 \/ .0378, df=1, ncp=sqrt(2)*rho.range)\nplot(rsd.range, prob.above, type='n', xlab=\"'true' %RSD\", ylab=\"Probability\nobserved %RSD (n=2) &gt;= 3.78%\")\nlines(rsd.range, prob.above)\n```\n\nOther code in the doc is easily copy-pasted, I'm doing so here for simplicity:\n\n```\n# MISC calculations\npt(q=1\/0.0378, df=1, ncp=sqrt(2) * 100 \/ RSD)\nmean(rt(10000000, df=1, ncp=sqrt(2) *100 \/ RSD) &lt;= 1\/0.0378\n```\n\n```\n# TABLE 3\nDiscontinuity.tab = data.frame(\n  n=integer(0), lim=double(0), ncp=double(0),\n  rsd=double(0), pt=double(0), \n  rsd.next=double(0), pt.next=double(0))\nlim.range = c(.02, .03, .04, .05, .1, .15, .25, .35)\nlim.range = c(lim.range, .5, 1 - rev(lim.range))\n\nfor (n in 2:6)\n{\n  rsd.range = seq(0.037*sqrt(n\/2), 0.038*sqrt(n\/2),.000001) * 100    # range of\n%RSD (or %CV) values\n  rho.range = 100\/rsd.range                # rho = mean\/stdev\n\n  for (m.lim in lim.range)\n  {\n    <http:\/\/res.pt|res.pt> =  100 * pt(1\/m.lim, n-1, ncp = sqrt(n) * rho.range)\n    # <http:\/\/res.pt|res.pt> = <http:\/\/res.pt[!is.na(res.pt)]|res.pt[!is.na(res.pt)]>\n    idx = which(<http:\/\/res.pt[-1]|res.pt[-1]> &lt; res.pt[-length(res.pt)])\n    if (length(idx) &gt;0 &amp; all(<http:\/\/res.pt[c|res.pt[c>(idx, idx+1)] &gt; 1e-10))\n    {\n      this.discontinuity = \n         data.frame(n, lim=m.lim, ncp = sqrt(n)* rho.range[min(idx)],\n                    rsd=rsd.range[min(idx)], pt = <http:\/\/res.pt[min(idx)]|res.pt[min(idx)]>,\n                    rsd.next = rsd.range[min(idx)+1], pt.next =\n<http:\/\/res.pt[min(idx)+1]|res.pt[min(idx)+1]>)\n        Discontinuity.tab = rbind(Discontinuity.tab, this.discontinuity)\n    }\n  }\n}\nDiscontinuity.tab\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713648620.339569",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "siLT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 16845] There appears to be an error computing the CDF of a non-central T distributed random variable using the pt() function",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=16845"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMichael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |michaelchirico4@gmail.com\n\n--- Comment #2 from Michael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI confirm the discontinuity highlighted is still present.\n\nTyping out the code from the doc since it's in an image and not otherwise\ncopy-paste-able:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# FIGURE 1\nrsd.range = seq(.001, .05, .0001)*100\nrho.range = 100 \/ rsd.range\nprob.above = pt(q = 1 \/ .0378, df=1, ncp=sqrt(2)*rho.range)\nplot(rsd.range, prob.above, type='n', xlab=\"'true' %RSD\", ylab=\"Probability\nobserved %RSD (n=2) >= 3.78%\")\nlines(rsd.range, prob.above)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nOther code in the doc is easily copy-pasted, I'm doing so here for simplicity:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# MISC calculations\npt(q=1\/0.0378, df=1, ncp=sqrt(2) * 100 \/ RSD)\nmean(rt(10000000, df=1, ncp=sqrt(2) *100 \/ RSD) <= 1\/0.0378\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# TABLE 3\nDiscontinuity.tab = data.frame(\n  n=integer(0), lim=double(0), ncp=double(0),\n  rsd=double(0), pt=double(0), \n  rsd.next=double(0), pt.next=double(0))\nlim.range = c(.02, .03, .04, .05, .1, .15, .25, .35)\nlim.range = c(lim.range, .5, 1 - rev(lim.range))\n\nfor (n in 2:6)\n{\n  rsd.range = seq(0.037*sqrt(n\/2), 0.038*sqrt(n\/2),.000001) * 100    # range of\n%RSD (or %CV) values\n  rho.range = 100\/rsd.range                # rho = mean\/stdev\n\n  for (m.lim in lim.range)\n  {\n    "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/res.pt",
                                "text": "res.pt"
                            },
                            {
                                "type": "text",
                                "text": " =  100 * pt(1\/m.lim, n-1, ncp = sqrt(n) * rho.range)\n    # "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/res.pt",
                                "text": "res.pt"
                            },
                            {
                                "type": "text",
                                "text": " = "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/res.pt[!is.na(res.pt)]",
                                "text": "res.pt[!is.na(res.pt)]",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n    idx = which("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/res.pt[-1]",
                                "text": "res.pt[-1]",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": " < res.pt[-length(res.pt)])\n    if (length(idx) >0 & all("
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/res.pt[c",
                                "text": "res.pt[c",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "(idx, idx+1)] > 1e-10))\n    {\n      this.discontinuity = \n         data.frame(n, lim=m.lim, ncp = sqrt(n)* rho.range[min(idx)],\n                    rsd=rsd.range[min(idx)], pt = "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/res.pt[min(idx)]",
                                "text": "res.pt[min(idx)]",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ",\n                    rsd.next = rsd.range[min(idx)+1], pt.next =\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/res.pt[min(idx)+1]",
                                "text": "res.pt[min(idx)+1]",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ")\n        Discontinuity.tab = rbind(Discontinuity.tab, this.discontinuity)\n    }\n  }\n}\nDiscontinuity.tab\n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 16750] Treat character as factor in summary.default*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=16750>\n\nElin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |elin.waring@gmail.com\n\n--- Comment #2 from Elin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) ---\nI think that there are numerous better ways to summarize character variables\nbut the best choices depend on the nature of the data.  Some character\nvariables work better as factors, and  the change of the default to\nStringsAsFactors = FALSE means that you need to be more intentional about\nexplicitly declaring them.  Others would potentially want to know how many\nunique strings there are etc. There are many options for this in various\npackages (skimr being the one I am most familiar with).",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713648738.975679",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "6prd",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 16750] Treat character as factor in summary.default",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=16750"
                            },
                            {
                                "type": "text",
                                "text": "\n\nElin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |elin.waring@gmail.com\n\n--- Comment #2 from Elin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI think that there are numerous better ways to summarize character variables\nbut the best choices depend on the nature of the data.  Some character\nvariables work better as factors, and  the change of the default to\nStringsAsFactors = FALSE means that you need to be more intentional about\nexplicitly declaring them.  Others would potentially want to know how many\nunique strings there are etc. There are many options for this in various\npackages (skimr being the one I am most familiar with)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 16865] base::glob2rx does not recognise escaped wildcards*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=16865>\n\nMichael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |michaelchirico4@gmail.com\n\n--- Comment #1 from Michael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) ---\nHonestly not sure this is worth supporting -- `glob2rx()` is behaving as\ndocumented (under the proviso that arbitrary characters may not work as an\nexact translation), and the use cases you provide have trivial workaround\n(`Sys.glob()` works correctly, and `list.files()` can just accept a regex\ndirectly: `list.files(pattern = \"[*][.]txt\")`).\n\nThe only place (besides tests) in the R sources actually calling `glob2rx()` is\nhere in {tools}:\n\n<https:\/\/github.com\/r-devel\/r-svn\/blob\/fce7d681089410df8376d9eef3891b28eeb084ba\/src\/library\/tools\/R\/utils.R#L2039>\n\nWhich operates on R package names --&gt; `*` is invalid anyway.\n\nUsage in CRAN packages of `glob2rx()` _with non-literal pattern_ (where this\nproblem with escaping might cause more headaches) is quite rare:\n\n<https:\/\/github.com\/search?q=org%3Acran+lang%3AR+%2Fglob2rx%5B%28%5D%5Cs*%5B%5E+%27%22%29%5D%2F&amp;type=code>\n\nAnd there are no call sites with an attempt to escape `*` (i.e., silently in\nerror):\n\n<https:\/\/github.com\/search?q=org%3Acran+lang%3AR+%2Fglob2rx%5B%28%5D%5Cs*%5B%27%22%5D%5B%5E%27%22%5D*%5B%5C%5C%5D%5B*%5D%2F&amp;type=code>\n\nPossibly, this could be closed with more specific documentation:\n\n```\n-\\code{glob2rx()} may not work correctly with arbitrary characters in\n\\code{pattern}.\n+\\code{glob2rx()} may not work correctly with arbitrary characters in\n\\code{pattern}, for example escaped special characters.\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1713649374.367119",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qq1Q",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 16865] base::glob2rx does not recognise escaped wildcards",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=16865"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMichael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |michaelchirico4@gmail.com\n\n--- Comment #1 from Michael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nHonestly not sure this is worth supporting -- "
                            },
                            {
                                "type": "text",
                                "text": "glob2rx()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is behaving as\ndocumented (under the proviso that arbitrary characters may not work as an\nexact translation), and the use cases you provide have trivial workaround\n("
                            },
                            {
                                "type": "text",
                                "text": "Sys.glob()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " works correctly, and "
                            },
                            {
                                "type": "text",
                                "text": "list.files()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " can just accept a regex\ndirectly: "
                            },
                            {
                                "type": "text",
                                "text": "list.files(pattern = \"[*][.]txt\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ").\n\nThe only place (besides tests) in the R sources actually calling "
                            },
                            {
                                "type": "text",
                                "text": "glob2rx()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is\nhere in {tools}:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-devel\/r-svn\/blob\/fce7d681089410df8376d9eef3891b28eeb084ba\/src\/library\/tools\/R\/utils.R#L2039"
                            },
                            {
                                "type": "text",
                                "text": "\n\nWhich operates on R package names --> "
                            },
                            {
                                "type": "text",
                                "text": "*",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is invalid anyway.\n\nUsage in CRAN packages of "
                            },
                            {
                                "type": "text",
                                "text": "glob2rx()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "with non-literal pattern",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (where this\nproblem with escaping might cause more headaches) is quite rare:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/search?q=org%3Acran+lang%3AR+%2Fglob2rx%5B%28%5D%5Cs*%5B%5E+%27%22%29%5D%2F&amp;type=code",
                                "text": "https:\/\/github.com\/search?q=org%3Acran+lang%3AR+%2Fglob2rx%5B%28%5D%5Cs*%5B%5E+%27%22%29%5D%2F&type=code"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAnd there are no call sites with an attempt to escape "
                            },
                            {
                                "type": "text",
                                "text": "*",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (i.e., silently in\nerror):\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/search?q=org%3Acran+lang%3AR+%2Fglob2rx%5B%28%5D%5Cs*%5B%27%22%5D%5B%5E%27%22%5D*%5B%5C%5C%5D%5B*%5D%2F&amp;type=code",
                                "text": "https:\/\/github.com\/search?q=org%3Acran+lang%3AR+%2Fglob2rx%5B%28%5D%5Cs*%5B%27%22%5D%5B%5E%27%22%5D*%5B%5C%5C%5D%5B*%5D%2F&type=code"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPossibly, this could be closed with more specific documentation:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "-\\code{glob2rx()} may not work correctly with arbitrary characters in\n\\code{pattern}.\n+\\code{glob2rx()} may not work correctly with arbitrary characters in\n\\code{pattern}, for example escaped special characters.\n"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18828] isGeneric(f=) and isGeneric(f=, fdef=) behave inconsistently for primitive functions*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18828>\n\n--- Comment #4 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\n(In reply to Mikael Jagan from comment #2)\n .......\n&gt; Hence it seems that there is an opportunity here to decide between two paths:\n&gt; \n&gt; * Eliminate from the paragraph the qualifier \"non-default\", which did not\n&gt; exist before.  Then have `isGeneric` behave as you suggested: `isGeneric(f)`\n&gt; tests whether `getGeneric(f)` is non-`NULL`, without consulting the method\n&gt; table.\n&gt; * Keep the qualifier \"non-default\", respecting the intention of the original\n&gt; source code.  Then have `isGeneric` consult the method table in all cases.\n&gt; \n&gt; In my opinion, the first approach is both more intuitive and more useful,\n&gt; because then `isGeneric(f)` can then be used as a test of whether\n&gt; `setGeneric(f)` or `setMethod(f)` would create a new generic function\n&gt; object.  The second approach is confusing to me because the distinction\n&gt; between default and non-default methods seems arbitrary.\n\nI'd agree with you that the first approach would be desirable.\nThe (only?) good reason against it would be if it breaks more than a negligible\npart of current S4 code \"out there\".\n\nWould we get help testing an R-devel branch (with that change) against BioC and\n CRAN packages which have {`methods`} among their (recursive ?) dependencies?\n\n&gt; Another complication, relevant the above discussion but perhaps not\n&gt; affecting primitive functions: Should `isGeneric` (gain an option to)\n&gt; consider implicit generic functions?  It is possible (e.g., for `f =\n&gt; \"qr.X\"`) that `getGeneric(f)` is `NULL` but `implicitGeneric(f)` is\n&gt; non-`NULL`.\n\nThat's a good suggestion, notably as you mention to use `isGeneric()` in order\nto check if `setMethod()` would create a new generic function.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1736329373.875549",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fva\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18828] isGeneric(f=) and isGeneric(f=, fdef=) behave inconsistently for primitive functions",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18828"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #4 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Mikael Jagan from comment #2)\n ......."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Hence it seems that there is an opportunity here to decide between two paths:\n\n* Eliminate from the paragraph the qualifier \"non-default\", which did not\nexist before.  Then have "
                            },
                            {
                                "type": "text",
                                "text": "isGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " behave as you suggested: "
                            },
                            {
                                "type": "text",
                                "text": "isGeneric(f)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\ntests whether "
                            },
                            {
                                "type": "text",
                                "text": "getGeneric(f)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is non-"
                            },
                            {
                                "type": "text",
                                "text": "NULL",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", without consulting the method\ntable.\n* Keep the qualifier \"non-default\", respecting the intention of the original\nsource code.  Then have "
                            },
                            {
                                "type": "text",
                                "text": "isGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " consult the method table in all cases.\n\nIn my opinion, the first approach is both more intuitive and more useful,\nbecause then "
                            },
                            {
                                "type": "text",
                                "text": "isGeneric(f)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " can then be used as a test of whether\n"
                            },
                            {
                                "type": "text",
                                "text": "setGeneric(f)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " or "
                            },
                            {
                                "type": "text",
                                "text": "setMethod(f)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would create a new generic function\nobject.  The second approach is confusing to me because the distinction\nbetween default and non-default methods seems arbitrary."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI'd agree with you that the first approach would be desirable.\nThe (only?) good reason against it would be if it breaks more than a negligible\npart of current S4 code \"out there\".\n\nWould we get help testing an R-devel branch (with that change) against BioC and\n CRAN packages which have {"
                            },
                            {
                                "type": "text",
                                "text": "methods",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "} among their (recursive ?) dependencies?\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Another complication, relevant the above discussion but perhaps not\naffecting primitive functions: Should "
                            },
                            {
                                "type": "text",
                                "text": "isGeneric",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (gain an option to)\nconsider implicit generic functions?  It is possible (e.g., for `f =\n\"qr.X\""
                            },
                            {
                                "type": "text",
                                "text": ") that ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "getGeneric(f)` is "
                            },
                            {
                                "type": "text",
                                "text": "NULL",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but "
                            },
                            {
                                "type": "text",
                                "text": "implicitGeneric(f)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is\nnon-"
                            },
                            {
                                "type": "text",
                                "text": "NULL",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThat's a good suggestion, notably as you mention to use "
                            },
                            {
                                "type": "text",
                                "text": "isGeneric()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in order\nto check if "
                            },
                            {
                                "type": "text",
                                "text": "setMethod()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would create a new generic function."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18837] New: glib-2.0.pc gives disallow cflags*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18837>\n\n            Bug ID: 18837\n           Summary: glib-2.0.pc gives disallow cflags\n           Product: Rtools\n           Version: 4.4\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Toolchain and libraries\n          Assignee: <mailto:tomas.kalibera@gmail.com|tomas.kalibera@gmail.com>\n          Reporter: <mailto:jeroenooms@gmail.com|jeroenooms@gmail.com>\n\nIf we try to use harfbuzz in a package we get a check NOTE:\n\n\n```\n* checking compilation flags used ... NOTE\nCompilation used the following non-portable flag(s):\n  '-mms-bitfields'\n```\n\nThe problem is in glib-2.0.pc:\n\n```\npkg-config --cflags glib-2.0\n# -IC:\/rtools44\/X86_64~1.POS\/include\/glib-2.0 -pthread\n-IC:\/rtools44\/X86_64~1.POS\/lib\/glib-2.0\/include -mms-bitfields\n-IC:\/rtools44\/X86_64~1.POS\/include -DPCRE2_STATIC\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1736364970.604349",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "agPWC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18837] New: glib-2.0.pc gives disallow cflags",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18837"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18837\n           Summary: glib-2.0.pc gives disallow cflags\n           Product: Rtools\n           Version: 4.4\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Toolchain and libraries\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:tomas.kalibera@gmail.com",
                                "text": "tomas.kalibera@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:jeroenooms@gmail.com",
                                "text": "jeroenooms@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nIf we try to use harfbuzz in a package we get a check NOTE:\n\n\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "* checking compilation flags used ... NOTE\nCompilation used the following non-portable flag(s):\n  '-mms-bitfields'\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe problem is in glib-2.0.pc:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "pkg-config --cflags glib-2.0\n# -IC:\/rtools44\/X86_64~1.POS\/include\/glib-2.0 -pthread\n-IC:\/rtools44\/X86_64~1.POS\/lib\/glib-2.0\/include -mms-bitfields\n-IC:\/rtools44\/X86_64~1.POS\/include -DPCRE2_STATIC\n"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
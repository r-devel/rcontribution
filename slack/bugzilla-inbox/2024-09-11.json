[
    {
        "subtype": "bot_message",
        "text": "*[Bug 15027] max.print is ignored for matrix  *and* other array headers*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=15027>\n\n--- Comment #14 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nThank you.  The patch \"looks good\" (from quick browsing).\nIf I apply it and run a 'make check-devel' in the R sources,\nit does reveal a bug you must have introduced inadvertently, the check \"fails\"\nwhen running `tests\/print-tests-2.R` comparing with the saved output in \n`tests\/print-tests-2.Rout.save`:\n```\nrunning code in '..\/..\/R\/tests\/reg-tests-2.R' ... OK\n  comparing 'reg-tests-2.Rout' to '..\/..\/R\/tests\/reg-tests-2.Rout.save'\n...7701c7701\n&lt; D4    \n---\n&gt; D4     I\nmake[3]: *** [..\/..\/R\/tests\/Makefile.common:125: reg-tests-2.Rout] Error 1\n.............................\nmake: *** [Makefile:309: check-devel] Error 2\n```\n\nA smaller repr.ex is the following:\n```\n   array(, 0:1, dimnames = list(NULL, D1 = \"I\"))\n```\nwhich used to print\n```\n&gt; array(, 0:2, dimnames = list(NULL, D1 = \"c1\", D2 = c(\"r1\",\"r2\")))\n, , D2 = r1\n\n      D1\n       c1\n\n, , D2 = r2\n\n      D1\n       c1\n\n&gt; \n```\nbut after applying the patch gives\n```\n&gt; array(, 0:2, dimnames = list(NULL, D1 = \"c1\", D2 = c(\"r1\",\"r2\")))\n, , D2 = r1\n\n      D1\n       c1\n\n, , D2 = r2\n\n      D1\n\n\n&gt; \n```\n(same result **apart** from the missing  `     c1`  in the 2nd-to-last line\n(last line is empty in both cases)\n\n\nNote: If you find the problem and the change wrt to your current patch is very\nsmall\n      I'd appreciate an __incremental__ patch, just showing that last change\n...",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1726050816.333059",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "e8wlY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "*[Bug 15027] max.print is ignored for matrix  "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " other array headers*\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=15027"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #14 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThank you.  The patch \"looks good\" (from quick browsing).\nIf I apply it and run a 'make check-devel' in the R sources,\nit does reveal a bug you must have introduced inadvertently, the check \"fails\"\nwhen running "
                            },
                            {
                                "type": "text",
                                "text": "tests\/print-tests-2.R",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " comparing with the saved output in \n"
                            },
                            {
                                "type": "text",
                                "text": "tests\/print-tests-2.Rout.save",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "running code in '..\/..\/R\/tests\/reg-tests-2.R' ... OK\n  comparing 'reg-tests-2.Rout' to '..\/..\/R\/tests\/reg-tests-2.Rout.save'\n...7701c7701\n< D4    \n---\n> D4     I\nmake[3]: *** [..\/..\/R\/tests\/Makefile.common:125: reg-tests-2.Rout] Error 1\n.............................\nmake: *** [Makefile:309: check-devel] Error 2\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nA smaller repr.ex is the following:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "   array(, 0:1, dimnames = list(NULL, D1 = \"I\"))\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "which used to print"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> array(, 0:2, dimnames = list(NULL, D1 = \"c1\", D2 = c(\"r1\",\"r2\")))\n, , D2 = r1\n\n      D1\n       c1\n\n, , D2 = r2\n\n      D1\n       c1\n\n> \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "but after applying the patch gives"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> array(, 0:2, dimnames = list(NULL, D1 = \"c1\", D2 = c(\"r1\",\"r2\")))\n, , D2 = r1\n\n      D1\n       c1\n\n, , D2 = r2\n\n      D1\n\n\n> \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "(same result **apart** from the missing  "
                            },
                            {
                                "type": "text",
                                "text": "     c1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  in the 2nd-to-last line\n(last line is empty in both cases)\n\n\n\nNote: If you find the problem and the change wrt to your current patch is very\nsmall\n      I'd appreciate an __incremental__ patch, just showing that last change\n..."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 15027] max.print is ignored for matrix  *and* other array headers*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=15027>\n\n--- Comment #15 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\n(In reply to Martin Maechler from comment #14)\n\"of course\" the above was a wrong reprex (2D array = matrix), \nthe correct one is with a 3D array, as shown in the two R outputs below.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1726050967.473699",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "qLIwR",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "*[Bug 15027] max.print is ignored for matrix  "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " other array headers*\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=15027"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #15 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Martin Maechler from comment #14)\n\"of course\" the above was a wrong reprex (2D array = matrix), \nthe correct one is with a 3D array, as shown in the two R outputs below."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18794] New: 'R_check_class_and_super' does not test for non-objects*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18794>\n\n            Bug ID: 18794\n           Summary: 'R_check_class_and_super' does not test for\n                    non-objects\n           Product: R\n           Version: R 4.4.x\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Low-level\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>\n\n```\n#include &lt;Rinternals.h&gt;\nSEXP Rcce(SEXP x)\n{\n        static const char *valid[] = { \"NA\", \"\" };\n        return ScalarInteger(R_check_class_etc(x, valid));\n}\n```\n\n```\n&gt; .Call(\"Rcce\", NULL)\n[1] 0\n```\n\nThe correct value is -1, not 0, because `NULL` does not inherit from `\"NA\"`.  A\npatch would test the object bit before getting the `class` attribute and\ncoercing it to `CHARSXP` ...\n\n```\nIndex: src\/main\/objects.c\n===================================================================\n--- src\/main\/objects.c  (revision 87117)\n+++ src\/main\/objects.c  (working copy)\n@@ -1117,6 +1117,7 @@\n attribute_hidden\n int R_check_class_and_super(SEXP x, const char **valid, SEXP rho)\n {\n+    if (isObject(x)) {\n     int ans;\n     SEXP clattr = getAttrib(x, R_ClassSymbol);\n     SEXP cl = PROTECT(asChar(clattr));\n@@ -1176,6 +1177,7 @@\n        UNPROTECT(2); \/* superCl, rho *\/\n     }\n     UNPROTECT(1); \/* cl *\/\n+    }\n     return -1;\n }\n\n\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1726077020.688489",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pBQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18794] New: 'R_check_class_and_super' does not test for non-objects",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18794"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18794\n           Summary: 'R_check_class_and_super' does not test for\n                    non-objects\n           Product: R\n           Version: R 4.4.x\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Low-level\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "#include <Rinternals.h>\nSEXP Rcce(SEXP x)\n{\n        static const char *valid[] = { \"NA\", \"\" };\n        return ScalarInteger(R_check_class_etc(x, valid));\n}\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> .Call(\"Rcce\", NULL)\n[1] 0\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe correct value is -1, not 0, because "
                            },
                            {
                                "type": "text",
                                "text": "NULL",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does not inherit from "
                            },
                            {
                                "type": "text",
                                "text": "\"NA\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  A\npatch would test the object bit before getting the "
                            },
                            {
                                "type": "text",
                                "text": "class",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " attribute and\ncoercing it to "
                            },
                            {
                                "type": "text",
                                "text": "CHARSXP",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ...\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Index: src\/main\/objects.c\n===================================================================\n--- src\/main\/objects.c  (revision 87117)\n+++ src\/main\/objects.c  (working copy)\n@@ -1117,6 +1117,7 @@\n attribute_hidden\n int R_check_class_and_super(SEXP x, const char **valid, SEXP rho)\n {\n+    if (isObject(x)) {\n     int ans;\n     SEXP clattr = getAttrib(x, R_ClassSymbol);\n     SEXP cl = PROTECT(asChar(clattr));\n@@ -1176,6 +1177,7 @@\n        UNPROTECT(2); \/* superCl, rho *\/\n     }\n     UNPROTECT(1); \/* cl *\/\n+    }\n     return -1;\n }\n\n\n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18794] 'R_check_class_and_super' needs test for objects without class attribute*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18794>\n\n--- Comment #1 from Mikael Jagan (<mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>) ---\nI should point out that `R_check_class_and_super` does not consider the\n_implicit_ class of objects without a class attribute, so the proposed change\nwould not change the current behaviour except where `\"NA\"` appears in the list\nof \"valid\" classes.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1726106149.239009",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Fakm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18794] 'R_check_class_and_super' needs test for objects without class attribute",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18794"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #1 from Mikael Jagan ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI should point out that "
                            },
                            {
                                "type": "text",
                                "text": "R_check_class_and_super",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does not consider the\n"
                            },
                            {
                                "type": "text",
                                "text": "implicit",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " class of objects without a class attribute, so the proposed change\nwould not change the current behaviour except where "
                            },
                            {
                                "type": "text",
                                "text": "\"NA\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " appears in the list\nof \"valid\" classes."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
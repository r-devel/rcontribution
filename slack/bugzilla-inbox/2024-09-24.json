[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18801] Confusing behavior of quote= in print.table*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18801>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n             Status|UNCONFIRMED                 |CONFIRMED\n     Ever confirmed|0                           |1\n\n--- Comment #1 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nAmazing ... \nI do agree that the  `quote` argument as implemented is almost always useless.\nI'm almost sure, I will not have used it ever.\nStill, not all `\"table\"` objects need to be have produced by `table()` {or\nsimilar}, i.e., one *may* have tables with string entries.\n\nIn addition, what I *have* used quite frequently is  `print.table(&lt;matrix&gt;,\nzero.print = \".\")`\n\nwhich is *very* nice to make the console output much more readable for sparse\nmatrices  {{and R's `Matrix` package uses a sophisticated version of this, as\npart of its `print()\/show()` methods for (formally classed) sparse matrices}}.\n\nNote that the documentation is not wrong strictly, as indeed, \n- by the time, `quote` is applied, all the numeric entries have become strings \nand \n- it does not at all talk about `dimnames` (also in your example, we have a 1D\narray with dimnames, see `str(.)`):\n```\n&gt; str(table(rep(c(\"\", \" \", \"  \"), 9:11)))\n 'table' int [1:3(1d)] 9 10 11\n - attr(*, \"dimnames\")=List of 1\n  ..$ : chr [1:3] \"\" \" \" \"  \"\n&gt; \n``` \nbut of course, it is *not* what you'd like to get here _and_\nthe documentation is not precise enough to become even misleading.\n\nFor back compatibility reasons, it'd be best to consider allowing  `quote =\n\"dimnames\"` (or equivalently `quote = \"names\"` )\nor introduce a new optional argument, say `namesQuote = &lt;logical&gt;`  or \n`namesQuote = &lt;q-alike&gt;)`  where in the latter case,\n`dQuote(&lt;names&gt;, q = namesQuote)` would be called inside `print.table()`.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1727171488.875069",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kxWm",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18801] Confusing behavior of quote= in print.table",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18801"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n             Status|UNCONFIRMED                 |CONFIRMED\n     Ever confirmed|0                           |1\n\n--- Comment #1 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nAmazing ... \nI do agree that the  "
                            },
                            {
                                "type": "text",
                                "text": "quote",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " argument as implemented is almost always useless.\nI'm almost sure, I will not have used it ever.\nStill, not all "
                            },
                            {
                                "type": "text",
                                "text": "\"table\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " objects need to be have produced by "
                            },
                            {
                                "type": "text",
                                "text": "table()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " {or\nsimilar}, i.e., one "
                            },
                            {
                                "type": "text",
                                "text": "may",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " have tables with string entries.\n\nIn addition, what I "
                            },
                            {
                                "type": "text",
                                "text": "have",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " used quite frequently is  `print.table(<matrix>,\nzero.print = \".\")`\n\nwhich is "
                            },
                            {
                                "type": "text",
                                "text": "very",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " nice to make the console output much more readable for sparse\nmatrices  {{and R's "
                            },
                            {
                                "type": "text",
                                "text": "Matrix",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " package uses a sophisticated version of this, as\npart of its "
                            },
                            {
                                "type": "text",
                                "text": "print()\/show()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " methods for (formally classed) sparse matrices}}.\n\nNote that the documentation is not wrong strictly, as indeed, \n- by the time, "
                            },
                            {
                                "type": "text",
                                "text": "quote",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is applied, all the numeric entries have become strings \nand \n- it does not at all talk about "
                            },
                            {
                                "type": "text",
                                "text": "dimnames",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (also in your example, we have a 1D\narray with dimnames, see "
                            },
                            {
                                "type": "text",
                                "text": "str(.)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "):"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> str(table(rep(c(\"\", \" \", \"  \"), 9:11)))\n 'table' int [1:3(1d)] 9 10 11\n - attr(*, \"dimnames\")=List of 1\n  ..$ : chr [1:3] \"\" \" \" \"  \"\n> \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": " \nbut of course, it is "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " what you'd like to get here "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nthe documentation is not precise enough to become even misleading.\n\nFor back compatibility reasons, it'd be best to consider allowing  `quote =\n\"dimnames\""
                            },
                            {
                                "type": "text",
                                "text": " (or equivalently ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "quote = \"names\"` )\nor introduce a new optional argument, say "
                            },
                            {
                                "type": "text",
                                "text": "namesQuote = <logical>",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  or \n"
                            },
                            {
                                "type": "text",
                                "text": "namesQuote = <q-alike>)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  where in the latter case,\n"
                            },
                            {
                                "type": "text",
                                "text": "dQuote(<names>, q = namesQuote)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " would be called inside "
                            },
                            {
                                "type": "text",
                                "text": "print.table()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
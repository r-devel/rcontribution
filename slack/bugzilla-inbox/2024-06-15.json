[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18743] \"hclust()\" documentation about \"ward.D\" and \"ward.D2\" need to be revised. In addition to the incorrect description of the \"ward.D\" and \"ward.D2\" options, there is a lack of correct information about the value of d to be set.*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18743>\n\n--- Comment #5 from Atsushi Kimura (<mailto:atkimura@nstac.go.jp|atkimura@nstac.go.jp>) ---\nI'm sorry. My previous comment was hard to read because there were no line\nbreaks, so I'm sending it again. I've corrected some of the typos.\n\n\n(In reply to Elin Waring from comment #3)\nThank you for your comment.\n\nAs far as I can tell, the reason why there are two methods for \"hclust\" is as\nfollows.\n\nFirst, the \"ward.D\" option was implemented. This is a direct successor to the\n\"ward\" option from versions before 3.03.\n\nAfter that, the \"ward.D2\" option was implemented. The details of this are\ndescribed in [R logo] CHANGES IN R 3.1.0 in R NEWS as follows:\n・hclust() gains a new method \"ward.D2\" which implements Ward's method\ncorrectly. The previous \"ward\" method is \"ward.D\" now, with the old name still\nworking. Thanks to research and proposals by Pierre Legendre.\n\n From here on, it's just my imagination, but Pierre Legendre's proposal was\nthat \"If you set the Euclidean distance as the argument d (dissimilarity), the\n\"ward.D\" option will not return the correct analysis results. This is because\nthe \"ward.D\" option processes based on ESS (squared Euclidean distance) in the\ninternal processing. If you pass the Euclidean distance, which is the output of\nthe dist() function, as an argument, the internal processing must also be\nreworked to be based on the square root of ESS.\" \n\nTherefore, I think they implemented a new \"ward.D2\" option that performs\ninternal processing based on the square root of ESS (Euclidean distance) as the\ndissimilarity. I think that's how the two different options were implemented.\nHowever, I would like to reiterate that if you set the dissimilarity passed as\nd appropriately, both options will output the same analysis results. The output\nheight value is based on the dissimilarity used in the internal processing, so\nthe result of \"ward.D\" is the same as the result of squaring the result of\n\"ward.D2\".",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718435873.264209",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "2nby4",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18743] \"hclust()\" documentation about \"ward.D\" and \"ward.D2\" need to be revised. In addition to the incorrect description of the \"ward.D\" and \"ward.D2\" options, there is a lack of correct information about the value of d to be set.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18743"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #5 from Atsushi Kimura ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:atkimura@nstac.go.jp",
                                "text": "atkimura@nstac.go.jp",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI'm sorry. My previous comment was hard to read because there were no line\nbreaks, so I'm sending it again. I've corrected some of the typos.\n\n\n\n(In reply to Elin Waring from comment #3)\nThank you for your comment.\n\nAs far as I can tell, the reason why there are two methods for \"hclust\" is as\nfollows.\n\nFirst, the \"ward.D\" option was implemented. This is a direct successor to the\n\"ward\" option from versions before 3.03.\n\nAfter that, the \"ward.D2\" option was implemented. The details of this are\ndescribed in [R logo] CHANGES IN R 3.1.0 in R NEWS as follows:\n・hclust() gains a new method \"ward.D2\" which implements Ward's method\ncorrectly. The previous \"ward\" method is \"ward.D\" now, with the old name still\nworking. Thanks to research and proposals by Pierre Legendre.\n\n From here on, it's just my imagination, but Pierre Legendre's proposal was\nthat \"If you set the Euclidean distance as the argument d (dissimilarity), the\n\"ward.D\" option will not return the correct analysis results. This is because\nthe \"ward.D\" option processes based on ESS (squared Euclidean distance) in the\ninternal processing. If you pass the Euclidean distance, which is the output of\nthe dist() function, as an argument, the internal processing must also be\nreworked to be based on the square root of ESS.\" \n\nTherefore, I think they implemented a new \"ward.D2\" option that performs\ninternal processing based on the square root of ESS (Euclidean distance) as the\ndissimilarity. I think that's how the two different options were implemented.\nHowever, I would like to reiterate that if you set the dissimilarity passed as\nd appropriately, both options will output the same analysis results. The output\nheight value is based on the dissimilarity used in the internal processing, so\nthe result of \"ward.D\" is the same as the result of squaring the result of\n\"ward.D2\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18701] ?print.default gives misleading description of na.print=*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18701>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n         Resolution|---                         |FIXED\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #2 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nThank you Michael!\nI've finally added your sentence (r 86748).",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718443235.864609",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "YNH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18701] ?print.default gives misleading description of na.print=",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18701"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n         Resolution|---                         |FIXED\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #2 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThank you Michael!\nI've finally added your sentence (r 86748)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18702] print.data.frame does not respect na.print for missing column names*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18702>\n\n--- Comment #2 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\n(In reply to Elin Waring from comment #1)\n\nThe above is not true at all:  It is even well documented,\n`?print.data.frame` contains\n\n   Usage:\n\n     ## S3 method for class 'data.frame'\n     print(x, ..., digits = NULL,\n           quote = FALSE, right = TRUE, row.names = TRUE, max = NULL)\n\n   Arguments:\n\n       x: object of class data.frame.\n\n     ...: optional arguments to `print` methods.\n\nAnd it's also trivial to see in print.data.frame that `...` is explicitly\npassed: `print(m, ..., `.  Rather the problem is that the character matrix `m`\nat that point has \"NA\" instead of NA_character_ colnames.\n\nI'm looking into fixing the bug now.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718461859.141149",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3ZU\/l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18702] print.data.frame does not respect na.print for missing column names",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18702"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #2 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Elin Waring from comment #1)\n\nThe above is not true at all:  It is even well documented,\n"
                            },
                            {
                                "type": "text",
                                "text": "?print.data.frame",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " contains\n\n   Usage:\n\n     ## S3 method for class 'data.frame'\n     print(x, ..., digits = NULL,\n           quote = FALSE, right = TRUE, row.names = TRUE, max = NULL)\n\n   Arguments:\n\n       x: object of class data.frame.\n\n     ...: optional arguments to "
                            },
                            {
                                "type": "text",
                                "text": "print",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " methods.\n\nAnd it's also trivial to see in print.data.frame that "
                            },
                            {
                                "type": "text",
                                "text": "...",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is explicitly\npassed: "
                            },
                            {
                                "type": "text",
                                "text": "print(m, ..., ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  Rather the problem is that the character matrix "
                            },
                            {
                                "type": "text",
                                "text": "m",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nat that point has \"NA\" instead of NA_character_ colnames.\n\nI'm looking into fixing the bug now."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18745] New: format(&lt;data.frame&gt;) does not keep `_NA_character` column names*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18745>\n\n            Bug ID: 18745\n           Summary: format(&lt;data.frame&gt;) does not keep `_NA_character`\n                    column names\n           Product: R\n           Version: R 4.4.x\n          Hardware: Other\n                OS: Linux\n            Status: NEW\n          Severity: normal\n          Priority: P5\n         Component: Low-level\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>\n\nAnalyzing (the first part) of Bug 18702  has revealed that the behavior of\n`format()` is the culprit.  It(s data.frame method) *does* return a\n`data.frame` as it should, but that resulting data frame does not keep the\ncolumn names in this case.\n\nA minimal example, using Michael's from bug 18702:\n```\nx &lt;- setNames(data.frame(TRUE), NA_character_)\nstopifnot(is.na(names(x)))\n\n# ==&gt; Bug in format.data.frame()\nstopifnot(is.data.frame(fx &lt;- format(x)))\nnames(x)\nnames(fx)\n```\nwhere the last two show\n```\n&gt; names(x)\n[1] NA\n&gt; names(fx)\n[1] \"NA\"\n&gt; \n```\n\nI think this should be fixed, but am waiting for comments, as I'm not 100% sure\nif changing this will not have too many \"bad\" consequences.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718469030.816839",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3kbss",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18745] New: format(<data.frame>) does not keep ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "_NA_character",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " column names",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18745"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18745\n           Summary: format(<data.frame>) does not keep "
                            },
                            {
                                "type": "text",
                                "text": "_NA_character",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n                    column names\n           Product: R\n           Version: R 4.4.x\n          Hardware: Other\n                OS: Linux\n            Status: NEW\n          Severity: normal\n          Priority: P5\n         Component: Low-level\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n\nAnalyzing (the first part) of Bug 18702  has revealed that the behavior of\n"
                            },
                            {
                                "type": "text",
                                "text": "format()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is the culprit.  It(s data.frame method) "
                            },
                            {
                                "type": "text",
                                "text": "does",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " return a\n"
                            },
                            {
                                "type": "text",
                                "text": "data.frame",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as it should, but that resulting data frame does not keep the\ncolumn names in this case.\n\nA minimal example, using Michael's from bug 18702:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "x <- setNames(data.frame(TRUE), NA_character_)\nstopifnot(is.na(names(x)))\n\n# ==> Bug in format.data.frame()\nstopifnot(is.data.frame(fx <- format(x)))\nnames(x)\nnames(fx)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "where the last two show"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> names(x)\n[1] NA\n> names(fx)\n[1] \"NA\"\n> \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI think this should be fixed, but am waiting for comments, as I'm not 100% sure\nif changing this will not have too many \"bad\" consequences."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18702] print.data.frame does not respect na.print for missing column names*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18702>\n\n--- Comment #3 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nElin has been right that there *are* several issues here:\n\n1. Very basically: for `names(.)` and `dimnames(.)` there is really not a\ndifference between `\"NA\"`  and `NA_character_`.  \nThis is documented insofar as  ?names has a paragraph\n\n     A name can be character `NA`, but such a name will never be\n     matched and is likely to lead to confusion.\n\nImportant parts of R's internal code indeed has been adapted to this, by\n*treating*  `NA_character_` names identical to `\"NA\"` ones, e.g. by silently\ntreating them identically:\n```\n&gt; dput(x &lt;- c(`NA` = NA, \"NA\" = \"N.A.\"))\nc(`NA` = NA, `NA` = \"N.A.\")\n&gt; <http:\/\/is.na|is.na>(print(names(x)))\n[1] \"NA\" \"NA\"\n[1] FALSE FALSE\n&gt; \n```\n\n2. The same happens  for data.frame (col)names:  Using `NA_character_`\n instead of \"NA\" is *not* recommended and __likely to lead to confusion__ \nand as you can see, actually the same happens as for atomic vector names: the\nNA's are all made into (the 2-character) string  `\"NA\"`:\n```\nd1 &lt;- data.frame(num=c(1,NA), ch=c(\"a\",NA),\n                 \"NA\" = c(\"NA\", NA), `NA` = c(NA, FALSE))\nstr(d1) # colnames \"NA.\" and \"NA..\"\n  # Only with explict `check.names = FALSE` you *think* you get `NA_character_`\nnames\nd2 &lt;- data.frame(num=c(1,NA), ch=c(\"a\",NA),\n                 \"NA\" = c(\"NA\", NA), `NA` = c(NA, FALSE), check.names=FALSE)\n```\nNow,\n```\n&gt; str(d2) # colnames[3:4] are both `NA` (but actually, no: they are `\"NA\"` !)\ndata.frame':    2 obs. of  4 variables:\n $ num: num  1 NA\n $ ch : chr  \"a\" NA\n $ NA : chr  \"NA\" NA\n $ NA : logi  NA FALSE\n\nchNms &lt;- c(\"num\", \"ch\", \"NA\", \"NA\")\nstopifnot(exprs = {\n    identical(chNms,    names(d2))\n    identical(chNms, colnames(d2))\n    identical(chNms, dimnames(d2)[[2]])\n    identical(chNms, variable.names(d2))\n})\n```\n\nMichael's trick to still have true `NA_character_` colnames in a data.frame\ndoes work {unfortunately}, and probably too many things would break if we'd\nchange that...\nso I'm continuing the story  even though started with showing that\n`NA_character` names are generally *not* ok in R..\n\n```\ndN &lt;- d2; names(dN)[3:4] &lt;- NA_character_\nnames(dN) # \"num\" \"ch\"  NA    NA\nchNN &lt;- c(\"num\", \"ch\", NA, NA)\nstopifnot(identical(chNN, names(dN)))\n\n## Interestingly,  as.matrix(.) *does* keep the \"true NA\" names,\n## and can have them (of course) in row or column names:\n(mN &lt;- as.matrix(dN)) # a character matrix --- but with the *same* dimnames,\ni.e., keeping \"true NA\"\n(m1 &lt;- mN[1,])\nstopifnot(exprs = {\n    identical(chNN, colnames(mN))\n    identical(chNN, names(m1))\n    identical(chNN, rownames(t(mN)))\n})\n\n## Also note, that data.frame *row* names are *not* allowed to be \"true NA\":\ndNN &lt;- dN;      rownames(dNN) &lt;- c(\"1\", \"NA\") # fine\ndNN &lt;- dN; try( rownames(dNN) &lt;- c(\"1\", NA) ) # --&gt; error\n                                        # Error in `.rowNamesDF&lt;-`(x, value =\nvalue) :\n                                        #   missing values in 'row.names' are\nnot allowed\n```\n\nNow back to this PR, we can debug and find that the problem really happens \nwhen   `format.data.frame(&lt;data.frame&gt;)` does translate `NA_character_`  to \n`\"NA\"`\nand our bug (part 1) is really  a bug in format.data.frame:\n\n```\nstopifnot(identical(chNN, names(dN)))\n&gt; rbind(dN = names(dN),\n        fdN= names(format(dN)))\n    [,1]  [,2] [,3] [,4]\ndN  \"num\" \"ch\" NA   NA  \nfdN \"num\" \"ch\" \"NA\" \"NA\"\n```\nI have now submitted  (a minimal version of) the above as a new PR, bug 18745.\n\nPart 2 of this PR  should remain here:  For data.frames  `na.print` does work\ndifferently for  character (and factor)   vs  numeric, logical, ..  \neven when `na.print` works the same for all atomic vectors.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718469226.854479",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "gLQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18702] print.data.frame does not respect na.print for missing column names",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18702"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #3 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nElin has been right that there "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " several issues here:\n\n1. Very basically: for "
                            },
                            {
                                "type": "text",
                                "text": "names(.)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "dimnames(.)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " there is really not a\ndifference between "
                            },
                            {
                                "type": "text",
                                "text": "\"NA\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  and "
                            },
                            {
                                "type": "text",
                                "text": "NA_character_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".  \nThis is documented insofar as  ?names has a paragraph\n\n     A name can be character "
                            },
                            {
                                "type": "text",
                                "text": "NA",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but such a name will never be\n     matched and is likely to lead to confusion.\n\nImportant parts of R's internal code indeed has been adapted to this, by\n"
                            },
                            {
                                "type": "text",
                                "text": "treating",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  "
                            },
                            {
                                "type": "text",
                                "text": "NA_character_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " names identical to "
                            },
                            {
                                "type": "text",
                                "text": "\"NA\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ones, e.g. by silently\ntreating them identically:"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> dput(x <- c(`NA` = NA, \"NA\" = \"N.A.\"))\nc(`NA` = NA, `NA` = \"N.A.\")\n> "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/is.na",
                                "text": "is.na"
                            },
                            {
                                "type": "text",
                                "text": "(print(names(x)))\n[1] \"NA\" \"NA\"\n[1] FALSE FALSE\n> \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n2. The same happens  for data.frame (col)names:  Using "
                            },
                            {
                                "type": "text",
                                "text": "NA_character_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n instead of \"NA\" is "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " recommended and __likely to lead to confusion__ \nand as you can see, actually the same happens as for atomic vector names: the\nNA's are all made into (the 2-character) string  "
                            },
                            {
                                "type": "text",
                                "text": "\"NA\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "d1 <- data.frame(num=c(1,NA), ch=c(\"a\",NA),\n                 \"NA\" = c(\"NA\", NA), `NA` = c(NA, FALSE))\nstr(d1) # colnames \"NA.\" and \"NA..\"\n  # Only with explict `check.names = FALSE` you *think* you get `NA_character_`\nnames\nd2 <- data.frame(num=c(1,NA), ch=c(\"a\",NA),\n                 \"NA\" = c(\"NA\", NA), `NA` = c(NA, FALSE), check.names=FALSE)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Now,"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> str(d2) # colnames[3:4] are both `NA` (but actually, no: they are `\"NA\"` !)\ndata.frame':    2 obs. of  4 variables:\n $ num: num  1 NA\n $ ch : chr  \"a\" NA\n $ NA : chr  \"NA\" NA\n $ NA : logi  NA FALSE\n\nchNms <- c(\"num\", \"ch\", \"NA\", \"NA\")\nstopifnot(exprs = {\n    identical(chNms,    names(d2))\n    identical(chNms, colnames(d2))\n    identical(chNms, dimnames(d2)[[2]])\n    identical(chNms, variable.names(d2))\n})\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nMichael's trick to still have true "
                            },
                            {
                                "type": "text",
                                "text": "NA_character_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " colnames in a data.frame\ndoes work {unfortunately}, and probably too many things would break if we'd\nchange that...\nso I'm continuing the story  even though started with showing that\n"
                            },
                            {
                                "type": "text",
                                "text": "NA_character",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " names are generally "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ok in R..\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "dN <- d2; names(dN)[3:4] <- NA_character_\nnames(dN) # \"num\" \"ch\"  NA    NA\nchNN <- c(\"num\", \"ch\", NA, NA)\nstopifnot(identical(chNN, names(dN)))\n\n## Interestingly,  as.matrix(.) *does* keep the \"true NA\" names,\n## and can have them (of course) in row or column names:\n(mN <- as.matrix(dN)) # a character matrix --- but with the *same* dimnames,\ni.e., keeping \"true NA\"\n(m1 <- mN[1,])\nstopifnot(exprs = {\n    identical(chNN, colnames(mN))\n    identical(chNN, names(m1))\n    identical(chNN, rownames(t(mN)))\n})\n\n## Also note, that data.frame *row* names are *not* allowed to be \"true NA\":\ndNN <- dN;      rownames(dNN) <- c(\"1\", \"NA\") # fine\ndNN <- dN; try( rownames(dNN) <- c(\"1\", NA) ) # --> error\n                                        # Error in `.rowNamesDF<-`(x, value =\nvalue) :\n                                        #   missing values in 'row.names' are\nnot allowed\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nNow back to this PR, we can debug and find that the problem really happens \nwhen   "
                            },
                            {
                                "type": "text",
                                "text": "format.data.frame(<data.frame>)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does translate "
                            },
                            {
                                "type": "text",
                                "text": "NA_character_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  to \n"
                            },
                            {
                                "type": "text",
                                "text": "\"NA\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nand our bug (part 1) is really  a bug in format.data.frame:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "stopifnot(identical(chNN, names(dN)))\n> rbind(dN = names(dN),\n        fdN= names(format(dN)))\n    [,1]  [,2] [,3] [,4]\ndN  \"num\" \"ch\" NA   NA  \nfdN \"num\" \"ch\" \"NA\" \"NA\"\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I have now submitted  (a minimal version of) the above as a new PR, bug 18745.\n\nPart 2 of this PR  should remain here:  For data.frames  "
                            },
                            {
                                "type": "text",
                                "text": "na.print",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does work\ndifferently for  character (and factor)   vs  numeric, logical, ..  \neven when "
                            },
                            {
                                "type": "text",
                                "text": "na.print",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " works the same for all atomic vectors."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18746] New: ?all.equal should mention it ignores the S4 bit?*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18746>\n\n            Bug ID: 18746\n           Summary: ?all.equal should mention it ignores the S4 bit?\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Documentation\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>\n\nNoticed this today:\n\n```\nall.equal(1:10, asS4(1:10))\n# [1] TRUE\n```\n\nObviously, `identical()` fails for these two objects.\n\nI am assuming* it's intentional that `all.equal()` ignores the S4 bit, at least\nfor the base methods documented in `?all.equal`, but it would be nice for this\nto be documented more explicitly.\n\nIf it's confirmed this is just a documentation issue I can work on a patch -- I\nthink just including the above as an example would be plenty.\n\nContext: working on <https:\/\/github.com\/Rdatatable\/data.table\/issues\/6185>\n\n* Some evidence: this behavior is mentioned in Bug #13209",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718515662.824639",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "owk",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18746] New: ?all.equal should mention it ignores the S4 bit?",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18746"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18746\n           Summary: ?all.equal should mention it ignores the S4 bit?\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Documentation\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nNoticed this today:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "all.equal(1:10, asS4(1:10))\n# [1] TRUE\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nObviously, "
                            },
                            {
                                "type": "text",
                                "text": "identical()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " fails for these two objects.\n\nI am assuming* it's intentional that "
                            },
                            {
                                "type": "text",
                                "text": "all.equal()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ignores the S4 bit, at least\nfor the base methods documented in "
                            },
                            {
                                "type": "text",
                                "text": "?all.equal",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but it would be nice for this\nto be documented more explicitly.\n\nIf it's confirmed this is just a documentation issue I can work on a patch -- I\nthink just including the above as an example would be plenty.\n\nContext: working on "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/Rdatatable\/data.table\/issues\/6185"
                            },
                            {
                                "type": "text",
                                "text": "\n\n* Some evidence: this behavior is mentioned in Bug #13209"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
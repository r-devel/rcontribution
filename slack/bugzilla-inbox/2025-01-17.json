[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18839] New: R should produce .mo files*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18839>\n\n            Bug ID: 18839\n           Summary: R should produce .mo files\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Translations\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>\n\n.mo files are compiled .po files.\n\nMuch like how we let R handle compilation of .c to .o files, I think it makes\nmost sense to ship only .po files and let the package build process handle\ncompilation of .po to .mo.\n\nIn particular this would remove one toilsome step from the translation process\nby eliminating the risk of forgetting to compile .po files and accidentally\nreleasing code where .po and .mo are out of sync.\n\nThis request applies equally to R itself as well as for package code.\n\nOne potential downside I have not thought through carefully enough yet is if\nthis induces any new system requirements:\n\n - For developers of packages with .po files, they should already have `msgfmt`\navailable\n - For users of packages installed from binary, .mo should already be compiled\n - For users of packages installed from source, they may no longer get\ntranslations available where they previously came pre-compiled.\n   + There's an interaction with `capabilities('NLS')`, though. I'm not sure\nit's possible\/how common it is to have a machine that has NLS capabilities but\nnot `msgfmt`. Would that be possible if R was installed pre-compiled but\npackages are built from source?\n   + Windows users building from source require Rtools, which comes with\n`gettext`, right? Or it could pretty easily be included?\n\nAnother question is how to handle transitioning packages that are currently\nshipping .mo files -- should we build tooling to always compile .mo, compare it\nto the existing .mo files, and WARN if different? Simply ignore the inst\/po\ndirectory right away? Other considerations?\n\nNB: This bug is being filed as a long-overdue follow-up to discussions held at\nthe R Dev Sprint in Warwick, 2023.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1737141049.571249",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4LUb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18839] New: R should produce .mo files",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18839"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18839\n           Summary: R should produce .mo files\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Translations\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\n.mo files are compiled .po files.\n\nMuch like how we let R handle compilation of .c to .o files, I think it makes\nmost sense to ship only .po files and let the package build process handle\ncompilation of .po to .mo.\n\nIn particular this would remove one toilsome step from the translation process\nby eliminating the risk of forgetting to compile .po files and accidentally\nreleasing code where .po and .mo are out of sync.\n\nThis request applies equally to R itself as well as for package code.\n\nOne potential downside I have not thought through carefully enough yet is if\nthis induces any new system requirements:\n\n - For developers of packages with .po files, they should already have "
                            },
                            {
                                "type": "text",
                                "text": "msgfmt",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\navailable\n - For users of packages installed from binary, .mo should already be compiled\n - For users of packages installed from source, they may no longer get\ntranslations available where they previously came pre-compiled.\n   + There's an interaction with "
                            },
                            {
                                "type": "text",
                                "text": "capabilities('NLS')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", though. I'm not sure\nit's possible\/how common it is to have a machine that has NLS capabilities but\nnot "
                            },
                            {
                                "type": "text",
                                "text": "msgfmt",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". Would that be possible if R was installed pre-compiled but\npackages are built from source?\n   + Windows users building from source require Rtools, which comes with\n"
                            },
                            {
                                "type": "text",
                                "text": "gettext",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", right? Or it could pretty easily be included?\n\nAnother question is how to handle transitioning packages that are currently\nshipping .mo files -- should we build tooling to always compile .mo, compare it\nto the existing .mo files, and WARN if different? Simply ignore the inst\/po\ndirectory right away? Other considerations?\n\nNB: This bug is being filed as a long-overdue follow-up to discussions held at\nthe R Dev Sprint in Warwick, 2023."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "+1",
                "users": [
                    "U01KXU8UNRX"
                ],
                "count": 1
            }
        ]
    }
]
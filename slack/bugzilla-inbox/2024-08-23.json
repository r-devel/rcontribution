[
    {
        "subtype": "bot_message",
        "text": "*[Bug 8934] Irregularity in stem() display*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=8934>\n\n--- Comment #9 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nAt the R Dev Day in Salzburg,  Di Cook who knows John Tukey's writing well,\nassured us that he had talked about several versions of stem and leaf displays\nand that she didn't there was any special casing of n = 1.\nWe also quickly mentioned giving a warning for small n (why just for n=1 ..).\n\nI strongly believe we should keep this simple, and so now just elide the\nspecial casing such that  `stem(1)` works the \"same\" as all other.\n --&gt; R-devel svn rev 87043.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1724402128.197519",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Yvb",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 8934] Irregularity in stem() display",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=8934"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #9 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nAt the R Dev Day in Salzburg,  Di Cook who knows John Tukey's writing well,\nassured us that he had talked about several versions of stem and leaf displays\nand that she didn't there was any special casing of n = 1.\nWe also quickly mentioned giving a warning for small n (why just for n=1 ..).\n\nI strongly believe we should keep this simple, and so now just elide the\nspecial casing such that  "
                            },
                            {
                                "type": "text",
                                "text": "stem(1)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " works the \"same\" as all other.\n --> R-devel svn rev 87043."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18782] seq.POSIXt can return POSIXct objects with integer storage type*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18782>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n\n--- Comment #2 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nI should have replied earlier, here, sorry:\n\nI pretty strongly disagree this to be a bug.\nThere are quite a few functions in R which may return integer or double type.\nand this has always be on purpose.\nThe average Joe\/Jane User should not have to think about integer vs double;\nthey should just think \"numeric\" (which encompasses both).\n\nYes, that's quite different to compiled languages and other \"strongly typed\"\nlanguages.\nAlso, the ambiguity allows to save storage whenever integer is appropriate and\neven much more extremely (via ALTREP) when the integer is `1:n`.\n\n`typeof()` is function for advanced R users,  `is.numeric(.)` is what users\nshould use more often.\n\n(I'd close this as invalid, but keep it open for others to chime in ..)",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1724408469.378299",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "G5mK1",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18782] seq.POSIXt can return POSIXct objects with integer storage type",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18782"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n\n--- Comment #2 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI should have replied earlier, here, sorry:\n\nI pretty strongly disagree this to be a bug.\nThere are quite a few functions in R which may return integer or double type.\nand this has always be on purpose.\nThe average Joe\/Jane User should not have to think about integer vs double;\nthey should just think \"numeric\" (which encompasses both).\n\nYes, that's quite different to compiled languages and other \"strongly typed\"\nlanguages.\nAlso, the ambiguity allows to save storage whenever integer is appropriate and\neven much more extremely (via ALTREP) when the integer is "
                            },
                            {
                                "type": "text",
                                "text": "1:n",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\n"
                            },
                            {
                                "type": "text",
                                "text": "typeof()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is function for advanced R users,  "
                            },
                            {
                                "type": "text",
                                "text": "is.numeric(.)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is what users\nshould use more often.\n\n(I'd close this as invalid, but keep it open for others to chime in ..)"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18786] show() on a non-syntactic name prints invalid code for showMethods()*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18786>\n\nSebastian Meyer (<mailto:seb.meyer@fau.de|seb.meyer@fau.de>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n             Status|UNCONFIRMED                 |CLOSED\n         Resolution|---                         |FIXED\n                 CC|                            |seb.meyer@fau.de\n\n--- Comment #1 from Sebastian Meyer (<mailto:seb.meyer@fau.de|seb.meyer@fau.de>) ---\nThanks, problem confirmed and fixed.\n\nThe patch needed a revision. `showGen` could be \"&lt;pkg&gt;:::&lt;nam&gt;\" and only the\nname of the generic should be backticked if necessary. I used `qnam &lt;-\ndeparse1(as.name(nam), backtick = TRUE)`, committed as c87048.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1724413347.786759",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "V\/3eS",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18786] show() on a non-syntactic name prints invalid code for showMethods()",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18786"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSebastian Meyer ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:seb.meyer@fau.de",
                                "text": "seb.meyer@fau.de"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n             Status|UNCONFIRMED                 |CLOSED\n         Resolution|---                         |FIXED\n                 CC|                            |seb.meyer@fau.de\n\n--- Comment #1 from Sebastian Meyer ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:seb.meyer@fau.de",
                                "text": "seb.meyer@fau.de"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThanks, problem confirmed and fixed.\n\nThe patch needed a revision. "
                            },
                            {
                                "type": "text",
                                "text": "showGen",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " could be \"<pkg>:::<nam>\" and only the\nname of the generic should be backticked if necessary. I used `qnam <-\ndeparse1(as.name(nam), backtick = TRUE)`, committed as c87048."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18782] seq.POSIXt can return POSIXct objects with integer storage type*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18782>\n\n--- Comment #3 from Michael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) ---\nthe reason I think of this as a \"bug\" is the consistency issue -- the analogous\ncode for seq.Date returns double:\n\n<https:\/\/github.com\/r-devel\/r-svn\/blob\/4339636dfebc9cdd5d4e301b0ec3390563101240\/src\/library\/base\/R\/dates.R#L265>\n\nI can't see an argument for one to return double, the other integer. If\nanything, I'd expect \"seq.Date might return integer but seq.POSIXt always\nreturns double\" -- support for fractional days is an oddity while sub-second\naccuracy is obviously beneficial.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1724421491.282819",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WXLG",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18782] seq.POSIXt can return POSIXct objects with integer storage type",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18782"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #3 from Michael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nthe reason I think of this as a \"bug\" is the consistency issue -- the analogous\ncode for seq.Date returns double:\n\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-devel\/r-svn\/blob\/4339636dfebc9cdd5d4e301b0ec3390563101240\/src\/library\/base\/R\/dates.R#L265"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI can't see an argument for one to return double, the other integer. If\nanything, I'd expect \"seq.Date might return integer but seq.POSIXt always\nreturns double\" -- support for fractional days is an oddity while sub-second\naccuracy is obviously beneficial."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18784] Function RQuartz_glyph in devQuartz.c segfaults when font is not found.*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18784>\n\n--- Comment #9 from Tomek Gieorgijewski (<mailto:cybergeorge2020@gmail.com|cybergeorge2020@gmail.com>) ---\nAd. `CFRelease(ctFont)`: It could potentially segfault because function\n`CTFontCreateWithFontDescriptor` will return NULL when its first argument\n(`descriptor`) is NULL. \nHowever, we check before that for `cfFontDescriptors` nullity and I assume that\nthe `cfFontDescriptors` if not null will have at least one element.\nApple says here:\n[CTFontCreateWithFontDescriptor](<https:\/\/developer.apple.com\/documentation\/coretext\/1509056-ctfontcreatewithfontdescriptor?language=objc>)\nthat the first argument is not nullable but I was able to run such code.\n\nThe other parameters are not also impacting because, size is always some kind\nof double, and matrix can be NULL and function tries to return the best\npossible match. I even tried with negative size.\n\nSo I think this is higly not plausible to `ctFont` be NULL at this point in\ncode (after this patch is applied, of course).\n\nAd. `CGColorRelease(fillColorRef)`: According to this reference:\n[CGColorRelease](<https:\/\/developer.apple.com\/documentation\/coregraphics\/1586340-cgcolorrelease\/>)\nthis function accepts NULL and does not crash, so we are safe here.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1724423767.809899",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "R95",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18784] Function RQuartz_glyph in devQuartz.c segfaults when font is not found.",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18784"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #9 from Tomek Gieorgijewski ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:cybergeorge2020@gmail.com",
                                "text": "cybergeorge2020@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nAd. "
                            },
                            {
                                "type": "text",
                                "text": "CFRelease(ctFont)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": It could potentially segfault because function\n"
                            },
                            {
                                "type": "text",
                                "text": "CTFontCreateWithFontDescriptor",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " will return NULL when its first argument\n("
                            },
                            {
                                "type": "text",
                                "text": "descriptor",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") is NULL. \nHowever, we check before that for "
                            },
                            {
                                "type": "text",
                                "text": "cfFontDescriptors",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " nullity and I assume that\nthe "
                            },
                            {
                                "type": "text",
                                "text": "cfFontDescriptors",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " if not null will have at least one element.\nApple says here:\n[CTFontCreateWithFontDescriptor]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.apple.com\/documentation\/coretext\/1509056-ctfontcreatewithfontdescriptor?language=objc"
                            },
                            {
                                "type": "text",
                                "text": ")\nthat the first argument is not nullable but I was able to run such code.\n\nThe other parameters are not also impacting because, size is always some kind\nof double, and matrix can be NULL and function tries to return the best\npossible match. I even tried with negative size.\n\nSo I think this is higly not plausible to "
                            },
                            {
                                "type": "text",
                                "text": "ctFont",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " be NULL at this point in\ncode (after this patch is applied, of course).\n\nAd. "
                            },
                            {
                                "type": "text",
                                "text": "CGColorRelease(fillColorRef)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ": According to this reference:\n[CGColorRelease]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/developer.apple.com\/documentation\/coregraphics\/1586340-cgcolorrelease\/"
                            },
                            {
                                "type": "text",
                                "text": ")\nthis function accepts NULL and does not crash, so we are safe here."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18654] xyTable fails when both x and y are NA*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18654>\n\nZhian Kamvar (<mailto:zkamvar@gmail.com|zkamvar@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |zkamvar@gmail.com\n\n--- Comment #8 from Zhian Kamvar (<mailto:zkamvar@gmail.com|zkamvar@gmail.com>) ---\nCreated attachment 3395\n  --&gt; <https:\/\/bugs.r-project.org\/attachment.cgi?id=3395&amp;action=edit>\nModified HT patch with docs, examples, and tests\n\nI have updated the patch according to the request in comment#7:\n\n - update patch to use `xor()`\n - add documentation\n - add examples\n - add tests based on Heather's comments\n\nI have run R CMD check on all the packages listed, confirming that they all\npass with no ERRORs, WARNINGs, or NOTEs",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1724437813.879739",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kTNdY",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18654] xyTable fails when both x and y are NA",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18654"
                            },
                            {
                                "type": "text",
                                "text": "\n\nZhian Kamvar ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:zkamvar@gmail.com",
                                "text": "zkamvar@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |zkamvar@gmail.com\n\n--- Comment #8 from Zhian Kamvar ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:zkamvar@gmail.com",
                                "text": "zkamvar@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nCreated attachment 3395\n  --> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3395&amp;action=edit",
                                "text": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3395&action=edit"
                            },
                            {
                                "type": "text",
                                "text": "\nModified HT patch with docs, examples, and tests\n\nI have updated the patch according to the request in comment#7:\n\n - update patch to use "
                            },
                            {
                                "type": "text",
                                "text": "xor()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n - add documentation\n - add examples\n - add tests based on Heather's comments\n\nI have run R CMD check on all the packages listed, confirming that they all\npass with no ERRORs, WARNINGs, or NOTEs"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
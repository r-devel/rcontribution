[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18739] On using Cdqrls() &amp; influence() in a R package (CRAN compliant)*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739>\n\n--- Comment #2 from Geoffroy Berthelot (<mailto:geoffroy.berthelot@insep.fr|geoffroy.berthelot@insep.fr>) ---\nThank you for your fast reply.\nWe benchmarked lm.fit() and other libraries (Eigen, Armadillo) which are all\ncomparables in terms of running time. The issue rises when retrieving the\nstudentized residuals: the Cdqrls + influence couple becomes incredibly\nefficient compared to all other alternatives (including Armadillo, etc).",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718175899.258459",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TTTK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18739] On using Cdqrls() & influence() in a R package (CRAN compliant)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #2 from Geoffroy Berthelot ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:geoffroy.berthelot@insep.fr",
                                "text": "geoffroy.berthelot@insep.fr"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThank you for your fast reply.\nWe benchmarked lm.fit() and other libraries (Eigen, Armadillo) which are all\ncomparables in terms of running time. The issue rises when retrieving the\nstudentized residuals: the Cdqrls + influence couple becomes incredibly\nefficient compared to all other alternatives (including Armadillo, etc)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18739] On using Cdqrls() &amp; influence() in a R package (CRAN compliant)*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n             Status|UNCONFIRMED                 |CONFIRMED\n     Ever confirmed|0                           |1\n\n--- Comment #3 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\n(In reply to Luke Tierney from comment #1)\nNote that we (well, I) have added  `.lm.fit()` as an even faster version of\n`lm.fit() *exactly* for this purpose (and it *is* documented) so `<http:\/\/qr.ls|qr.ls>` is\nalready there under a different name.\n\nI also tend to agree to a version of the `qr.influence()` above ... Also,\nthe  current `lm.influence(*, do.coef=FALSE)`  may already be a relevant step\nin that direction.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718176854.350939",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "MeUAF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18739] On using Cdqrls() & influence() in a R package (CRAN compliant)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |maechler@stat.math.ethz.ch\n             Status|UNCONFIRMED                 |CONFIRMED\n     Ever confirmed|0                           |1\n\n--- Comment #3 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Luke Tierney from comment #1)\nNote that we (well, I) have added  "
                            },
                            {
                                "type": "text",
                                "text": ".lm.fit()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as an even faster version of\n"
                            },
                            {
                                "type": "text",
                                "text": "lm.fit() *exactly* for this purpose (and it *is* documented) so ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/qr.ls",
                                "text": "qr.ls"
                            },
                            {
                                "type": "text",
                                "text": "` is\nalready there under a different name.\n\nI also tend to agree to a version of the "
                            },
                            {
                                "type": "text",
                                "text": "qr.influence()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " above ... Also,\nthe  current "
                            },
                            {
                                "type": "text",
                                "text": "lm.influence(*, do.coef=FALSE)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  may already be a relevant step\nin that direction."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18739] On using Cdqrls() &amp; influence() in a R package (CRAN compliant)*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739>\n\n--- Comment #4 from Geoffroy Berthelot (<mailto:geoffroy.berthelot@insep.fr|geoffroy.berthelot@insep.fr>) ---\n(In reply to Martin Maechler from comment #3)\nThe information for computing the studentized residuals (qr, qraux) is returned\nby `.lm.fit()`, but: \n```\n  n = 10\n  set.seed(1)\n  y = rnorm(n)\n  x &lt;- rnorm(n)\n  reg &lt;- .lm.fit(cbind(1, x), y)\n  reg_stud &lt;- rstudent(reg)\n```\nreturns an error, as `rstudent()` wants a model object, not a list.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718177639.346629",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "WGgb\/",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18739] On using Cdqrls() & influence() in a R package (CRAN compliant)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #4 from Geoffroy Berthelot ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:geoffroy.berthelot@insep.fr",
                                "text": "geoffroy.berthelot@insep.fr"
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Martin Maechler from comment #3)\nThe information for computing the studentized residuals (qr, qraux) is returned\nby "
                            },
                            {
                                "type": "text",
                                "text": ".lm.fit()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but: "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "  n = 10\n  set.seed(1)\n  y = rnorm(n)\n  x <- rnorm(n)\n  reg <- .lm.fit(cbind(1, x), y)\n  reg_stud <- rstudent(reg)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "returns an error, as "
                            },
                            {
                                "type": "text",
                                "text": "rstudent()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " wants a model object, not a list."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18739] On using Cdqrls() &amp; influence() in a R package (CRAN compliant)*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739>\n\n--- Comment #5 from Luke Tierney (<mailto:luke@stat.uiowa.edu|luke@stat.uiowa.edu>) ---\n(In reply to Geoffroy Berthelot from comment #4)\nYou can make it work with this little cheat:\n\n```\nclass(reg) &lt;- \"lm\"\nreg$qr &lt;- reg\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718190749.775949",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Jguc3",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18739] On using Cdqrls() & influence() in a R package (CRAN compliant)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #5 from Luke Tierney ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:luke@stat.uiowa.edu",
                                "text": "luke@stat.uiowa.edu",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Geoffroy Berthelot from comment #4)\nYou can make it work with this little cheat:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "class(reg) <- \"lm\"\nreg$qr <- reg\n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18739] On using Cdqrls() &amp; influence() in a R package (CRAN compliant)*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739>\n\n--- Comment #6 from Luke Tierney (<mailto:luke@stat.uiowa.edu|luke@stat.uiowa.edu>) ---\n(In reply to Martin Maechler from comment #3)\n`lm,influence` does help; you need something like\n\n```\nreg &lt;- .lm.fit(cbind(1, x), y)\nreg$qr &lt;- reg\ninf &lt;- lm.influence(reg, do.coef = FALSE)\n```\nto make it work. There is still a fair bit of overhead though, so\n`qr.influence()` might still be worth while for this sort of setting.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718191478.526909",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HzO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18739] On using Cdqrls() & influence() in a R package (CRAN compliant)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18739"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #6 from Luke Tierney ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:luke@stat.uiowa.edu",
                                "text": "luke@stat.uiowa.edu",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Martin Maechler from comment #3)\n"
                            },
                            {
                                "type": "text",
                                "text": "lm,influence",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does help; you need something like\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "reg <- .lm.fit(cbind(1, x), y)\nreg$qr <- reg\ninf <- lm.influence(reg, do.coef = FALSE)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "to make it work. There is still a fair bit of overhead though, so\n"
                            },
                            {
                                "type": "text",
                                "text": "qr.influence()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " might still be worth while for this sort of setting."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18741] New: `seq()` error message of bad `length.out`*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18741>\n\n            Bug ID: 18741\n           Summary: `seq()` error message of bad `length.out`\n           Product: R\n           Version: R 4.4.x\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Wishlist\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:olivierroy71@hotmail.com|olivierroy71@hotmail.com>\n\nI wonder if `seq()` could yield a better error message when length.out is not a\nsingle integer.\n\n```r\nseq(1, length.out = NA)\n#&gt; 'length.out' must be a must be a non-negative number\n```\n\n\n```r\nseq(1, length.out = NA)\n#&gt; 'length.out' must be a must be a non-negative number\n```\n\nThis should error, and say that it got length = 2?\n```r\nseq(1, length.out = c(1, 3))\n\n#&gt;  Warning in seq.default(1, length.out = c(1, 3)) :\n#&gt;  first element used of 'length.out' argument\n# error could be clearer\nseq(1, length.out = c(NA, 3)\n```\n\n\nI am proposing this to make it easier to debug when used in nested functions or\ncalls. It is hard to understand what went wrong easily without rethrowing\ncustom error messages with `withCallingHandlers()`, but since that seemed\nverbose, I thought I'd open a ticket to see if you are willing to make any\nchanges in R itself.\n\nThanks for considering.\n\nSomething like \n\n```r\nif (!is.null(length.out) &amp;&amp; anyNA(length.out)) {\n  stop(\"length.out must be a non-negative number, not 'NA'.\")\n}\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718197931.434999",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "iD6zB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18741] New: ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "seq()",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " error message of bad ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "length.out",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18741"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18741\n           Summary: "
                            },
                            {
                                "type": "text",
                                "text": "seq()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " error message of bad "
                            },
                            {
                                "type": "text",
                                "text": "length.out",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n           Product: R\n           Version: R 4.4.x\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Wishlist\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:olivierroy71@hotmail.com",
                                "text": "olivierroy71@hotmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI wonder if "
                            },
                            {
                                "type": "text",
                                "text": "seq()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " could yield a better error message when length.out is not a\nsingle integer.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "r\nseq(1, length.out = NA)\n#> 'length.out' must be a must be a non-negative number\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "r\nseq(1, length.out = NA)\n#> 'length.out' must be a must be a non-negative number\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThis should error, and say that it got length = 2?"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "r\nseq(1, length.out = c(1, 3))\n\n#>  Warning in seq.default(1, length.out = c(1, 3)) :\n#>  first element used of 'length.out' argument\n# error could be clearer\nseq(1, length.out = c(NA, 3)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n\n\nI am proposing this to make it easier to debug when used in nested functions or\ncalls. It is hard to understand what went wrong easily without rethrowing\ncustom error messages with "
                            },
                            {
                                "type": "text",
                                "text": "withCallingHandlers()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", but since that seemed\nverbose, I thought I'd open a ticket to see if you are willing to make any\nchanges in R itself.\n\nThanks for considering.\n\nSomething like \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "r\nif (!is.null(length.out) && anyNA(length.out)) {\n  stop(\"length.out must be a non-negative number, not 'NA'.\")\n}\n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18742] New: Issues with \"cannot return a promise (PROMSXP) object\"*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742>\n\n            Bug ID: 18742\n           Summary: Issues with \"cannot return a promise (PROMSXP) object\"\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: major\n          Priority: P5\n         Component: Language\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:akwsimmo@gmail.com|akwsimmo@gmail.com>\n\nRecently, there were complaints of an arbitrary code execution bug in R. I've\nlooked over it a few times but to me it seems to be a lack of understanding of\nthe language itself:\n\n```\nx &lt;- readRDS(\"\/file\/containing\/promise.rds\")\nx\n```\n\nThey would call this arbitrary code execution despite the fact that they\nexplicitly asked `x` to be evaluated.\n\nThat being said, I understand why there was a desire to change this; a newbie\nmay not grasp the subtleties and implications of restoring an R object, so this\nhelps prevent them from doing something they did not intend.\n\nHowever, the current solution of throwing an error `\"cannot return a promise\n(PROMSXP) object\"` on every instance of unserializing a promise is the wrong\nway to go about it. This means that all legitimate and desired cases of saving\nand loading a promise are not allowed including creating promises in a\nnamespace and having them restored with `lazyLoadDBfetch()`.\n\nIn particular, this is negatively affecting my R package `this.path`.\n\nI would suggest a different solution, something like adding an argument\n`allow.promises = FALSE` to `readRDS()`, `unserialize()`, and others that\ncontrols whether promises are allowed to be loaded, and allowing\n`lazyLoadDBfetch()` to unconditionally restore a promise object.\n\nThank you!",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718207715.152289",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "jI3MT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18742] New: Issues with \"cannot return a promise (PROMSXP) object\"",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18742\n           Summary: Issues with \"cannot return a promise (PROMSXP) object\"\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: All\n                OS: All\n            Status: UNCONFIRMED\n          Severity: major\n          Priority: P5\n         Component: Language\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:akwsimmo@gmail.com",
                                "text": "akwsimmo@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nRecently, there were complaints of an arbitrary code execution bug in R. I've\nlooked over it a few times but to me it seems to be a lack of understanding of\nthe language itself:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "x <- readRDS(\"\/file\/containing\/promise.rds\")\nx\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThey would call this arbitrary code execution despite the fact that they\nexplicitly asked "
                            },
                            {
                                "type": "text",
                                "text": "x",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to be evaluated.\n\nThat being said, I understand why there was a desire to change this; a newbie\nmay not grasp the subtleties and implications of restoring an R object, so this\nhelps prevent them from doing something they did not intend.\n\nHowever, the current solution of throwing an error `\"cannot return a promise\n(PROMSXP) object\"` on every instance of unserializing a promise is the wrong\nway to go about it. This means that all legitimate and desired cases of saving\nand loading a promise are not allowed including creating promises in a\nnamespace and having them restored with "
                            },
                            {
                                "type": "text",
                                "text": "lazyLoadDBfetch()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nIn particular, this is negatively affecting my R package "
                            },
                            {
                                "type": "text",
                                "text": "this.path",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nI would suggest a different solution, something like adding an argument\n"
                            },
                            {
                                "type": "text",
                                "text": "allow.promises = FALSE",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to "
                            },
                            {
                                "type": "text",
                                "text": "readRDS()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "unserialize()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", and others that\ncontrols whether promises are allowed to be loaded, and allowing\n"
                            },
                            {
                                "type": "text",
                                "text": "lazyLoadDBfetch()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to unconditionally restore a promise object.\n\nThank you!"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742>\n\nLuke Tierney (<mailto:luke@stat.uiowa.edu|luke@stat.uiowa.edu>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |luke@stat.uiowa.edu\n         Resolution|---                         |INVALID\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #1 from Luke Tierney (<mailto:luke@stat.uiowa.edu|luke@stat.uiowa.edu>) ---\nPromise objects, in particular unevaluated ones, are an internal implementation\ndetail that should not be able to directly reach R code or even external C\ncode. They should only exist in environment bindings as the current\nimplementation of delayed bindings. R code and C code that uses them now will\nneed to adapt. The R and C API are currently lacking some facilities needed for\nworking with delayed assignments; adding these is work in progress.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718208724.616249",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "KpHyO",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742"
                            },
                            {
                                "type": "text",
                                "text": "\n\nLuke Tierney ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:luke@stat.uiowa.edu",
                                "text": "luke@stat.uiowa.edu",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |luke@stat.uiowa.edu\n         Resolution|---                         |INVALID\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #1 from Luke Tierney ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:luke@stat.uiowa.edu",
                                "text": "luke@stat.uiowa.edu",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nPromise objects, in particular unevaluated ones, are an internal implementation\ndetail that should not be able to directly reach R code or even external C\ncode. They should only exist in environment bindings as the current\nimplementation of delayed bindings. R code and C code that uses them now will\nneed to adapt. The R and C API are currently lacking some facilities needed for\nworking with delayed assignments; adding these is work in progress."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742>\n\n--- Comment #2 from Andrew Simmons (<mailto:akwsimmo@gmail.com|akwsimmo@gmail.com>) ---\nI feel like you didn't actually read all of what I wrote.\n\nIf you have no intentions to change `readRDS()`, `unserialize()`, etc. because\npromises are internal objects then that's fine, that's the team's decision. I\nstill think it's wrong but I can adapt to it.\n\nThe second part of what I wrote is that I'm using `delayedAssign()`, which is\nnot an internal function, to create delayed bindings in my packages at install\ntime, but now they cannot be restored at load time. I'm not using any internal\nfeatures here, I'm using the language and its features in a legitimate way.\nPlease help me with this, thank you.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718213155.341179",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wIvID",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #2 from Andrew Simmons ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:akwsimmo@gmail.com",
                                "text": "akwsimmo@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI feel like you didn't actually read all of what I wrote.\n\nIf you have no intentions to change "
                            },
                            {
                                "type": "text",
                                "text": "readRDS()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "unserialize()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", etc. because\npromises are internal objects then that's fine, that's the team's decision. I\nstill think it's wrong but I can adapt to it.\n\nThe second part of what I wrote is that I'm using "
                            },
                            {
                                "type": "text",
                                "text": "delayedAssign()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which is\nnot an internal function, to create delayed bindings in my packages at install\ntime, but now they cannot be restored at load time. I'm not using any internal\nfeatures here, I'm using the language and its features in a legitimate way.\nPlease help me with this, thank you."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742>\n\nAndrew Simmons (<mailto:akwsimmo@gmail.com|akwsimmo@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n             Status|CLOSED                      |VERIFIED\n         Resolution|INVALID                     |WISHLIST",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718213186.069769",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "m+Ab",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742"
                            },
                            {
                                "type": "text",
                                "text": "\n\nAndrew Simmons ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:akwsimmo@gmail.com",
                                "text": "akwsimmo@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n             Status|CLOSED                      |VERIFIED\n         Resolution|INVALID                     |WISHLIST"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742>\n\nLuke Tierney (<mailto:luke@stat.uiowa.edu|luke@stat.uiowa.edu>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|WISHLIST                    |FIXED\n\n--- Comment #3 from Luke Tierney (<mailto:luke@stat.uiowa.edu|luke@stat.uiowa.edu>) ---\n(In reply to Andrew Simmons from comment #2)\n&gt; I feel like you didn't actually read all of what I wrote.\n\nThat is a risk you take when you mix up two different issues.\n\n&gt; If you have no intentions to change `readRDS()`, `unserialize()`, etc.\n&gt; because promises are internal objects then that's fine, that's the team's\n&gt; decision. I still think it's wrong but I can adapt to it.\n\nIt is not wrong. Promises are awkward to deal with and inefficient so moving\ntowards getting rid of them is the right thing to do for making progress in R.\n\nThe change to `readRDS` and `unserialize` happened before R 4.4.0 was released,\nmainly to assuage the silly \"security\" issue. I would have preferred a more\nextensive change, but it broke too many things and will have to wait for now.\n\n&gt; The second part of what I wrote is that I'm using `delayedAssign()`, which\n&gt; is not an internal function, to create delayed bindings in my packages at\n&gt; install time, but now they cannot be restored at load time. I'm not using\n&gt; any internal features here, I'm using the language and its features in a\n&gt; legitimate way. Please help me with this, thank you.\n\nThis was a very recent change that has been reverted for now. It would have\ngotten fixed sooner (by a couple of hours) if you had made clear it is your\nprimary concern instead of leading with the `readRDS` issue that happened long\nago.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718214462.483609",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "8cNf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742"
                            },
                            {
                                "type": "text",
                                "text": "\n\nLuke Tierney ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:luke@stat.uiowa.edu",
                                "text": "luke@stat.uiowa.edu",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|WISHLIST                    |FIXED\n\n--- Comment #3 from Luke Tierney ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:luke@stat.uiowa.edu",
                                "text": "luke@stat.uiowa.edu",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Andrew Simmons from comment #2)"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I feel like you didn't actually read all of what I wrote."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThat is a risk you take when you mix up two different issues.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "If you have no intentions to change "
                            },
                            {
                                "type": "text",
                                "text": "readRDS()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": "unserialize()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", etc.\nbecause promises are internal objects then that's fine, that's the team's\ndecision. I still think it's wrong but I can adapt to it."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIt is not wrong. Promises are awkward to deal with and inefficient so moving\ntowards getting rid of them is the right thing to do for making progress in R.\n\nThe change to "
                            },
                            {
                                "type": "text",
                                "text": "readRDS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "unserialize",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " happened before R 4.4.0 was released,\nmainly to assuage the silly \"security\" issue. I would have preferred a more\nextensive change, but it broke too many things and will have to wait for now.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "The second part of what I wrote is that I'm using "
                            },
                            {
                                "type": "text",
                                "text": "delayedAssign()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", which\nis not an internal function, to create delayed bindings in my packages at\ninstall time, but now they cannot be restored at load time. I'm not using\nany internal features here, I'm using the language and its features in a\nlegitimate way. Please help me with this, thank you."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThis was a very recent change that has been reverted for now. It would have\ngotten fixed sooner (by a couple of hours) if you had made clear it is your\nprimary concern instead of leading with the "
                            },
                            {
                                "type": "text",
                                "text": "readRDS",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " issue that happened long\nago."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742>\n\n--- Comment #4 from Andrew Simmons (<mailto:akwsimmo@gmail.com|akwsimmo@gmail.com>) ---\nOkay, awesome, thank you so much, glad to see this resolved.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718215578.342009",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Thuu",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18742] Issues with \"cannot return a promise (PROMSXP) object\"",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18742"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #4 from Andrew Simmons ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:akwsimmo@gmail.com",
                                "text": "akwsimmo@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nOkay, awesome, thank you so much, glad to see this resolved."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18741] `seq()` error message of bad `length.out`*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18741>\n\nElin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |elin.waring@gmail.com\n\n--- Comment #1 from Elin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) ---\n\n```\nseq(1, length.out = c(3, NA)\n```\njust gives the warning for length greater than one so I don't think that\n<http:\/\/any.NA|any.NA>() is really necessary.\n\nIn `seq.default()` the check for `length.out = NA` is in this code\n\n```\nelse if (!is.finite(length.out) || length.out &lt; 0L) \n        stop(\"'length.out' must be a non-negative number\")\n```\nI think you are suggesting that this would be improved by adding the value of\nlength.out to the message.  Something like\n\n\n```\nelse if (!is.finite(length.out) || length.out &lt; 0L) \n        stop(paste0(\"'length.out' must be a non-negative number not \",\nlength.out))\n```\n\nAre you also suggesting a change to the warning for when `length(length.out) &gt;\n1L`?",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718261548.008329",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "1s96R",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18741] ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "seq()",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " error message of bad ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "length.out",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18741"
                            },
                            {
                                "type": "text",
                                "text": "\n\nElin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |elin.waring@gmail.com\n\n--- Comment #1 from Elin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "seq(1, length.out = c(3, NA)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "just gives the warning for length greater than one so I don't think that\n"
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/any.NA",
                                "text": "any.NA"
                            },
                            {
                                "type": "text",
                                "text": "() is really necessary.\n\nIn "
                            },
                            {
                                "type": "text",
                                "text": "seq.default()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the check for "
                            },
                            {
                                "type": "text",
                                "text": "length.out = NA",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is in this code\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "else if (!is.finite(length.out) || length.out < 0L) \n        stop(\"'length.out' must be a non-negative number\")\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "I think you are suggesting that this would be improved by adding the value of\nlength.out to the message.  Something like\n\n\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "else if (!is.finite(length.out) || length.out < 0L) \n        stop(paste0(\"'length.out' must be a non-negative number not \",\nlength.out))\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nAre you also suggesting a change to the warning for when `length(length.out) >\n1L`?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
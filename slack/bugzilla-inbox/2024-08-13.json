[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18777] nlme::gls crash when using corARMA but the data do not contain enough visits*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18777>\n\n--- Comment #6 from Sebastian Meyer (<mailto:seb.meyer@fau.de|seb.meyer@fau.de>) ---\n(In reply to Liming Li from comment #5)\nThis example may not crash but valgrind would still show memory access errors\nfrom ARMA_corr(). The implementation assumes that p and q don't exceed the\nmaximum time difference in the data (which is no real limitation as such\nparameters would not be identifiable anyway).",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1723543933.720259",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RPQsB",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18777] nlme::gls crash when using corARMA but the data do not contain enough visits",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18777"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #6 from Sebastian Meyer ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:seb.meyer@fau.de",
                                "text": "seb.meyer@fau.de"
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Liming Li from comment #5)\nThis example may not crash but valgrind would still show memory access errors\nfrom ARMA_corr(). The implementation assumes that p and q don't exceed the\nmaximum time difference in the data (which is no real limitation as such\nparameters would not be identifiable anyway)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18192] nlme crashes when spatial correlation structure is included*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18192>\n\n--- Comment #9 from Elin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) ---\nI tried to explore in more detail why the functions were not searched for in\nthe right environment (see the original email link in comment 6).  \n\nOne thing that I wanted to note is that there seems to be an issue with the .C\ninterfaces.  This is not something I usually look at, but when I tried\nassigning the global environment explicitly to the functions in the email that\ndid produce the message in the email. But then I got messages like this.\n\n&gt; Error in .C(\"mixed_loglik\", as.double(conLin$Xy), as.integer(unlist(dims)),  : \n  C symbol name \"mixed_loglik\" not in load table\n\nwhen running a models.\n\n\nBut if I put nlme::: inside the .C calls, I don't get that message.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1723557085.178229",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "wfTf",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18192] nlme crashes when spatial correlation structure is included",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18192"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #9 from Elin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI tried to explore in more detail why the functions were not searched for in\nthe right environment (see the original email link in comment 6).  \n\nOne thing that I wanted to note is that there seems to be an issue with the .C\ninterfaces.  This is not something I usually look at, but when I tried\nassigning the global environment explicitly to the functions in the email that\ndid produce the message in the email. But then I got messages like this.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Error in .C(\"mixed_loglik\", as.double(conLin$Xy), as.integer(unlist(dims)),  : "
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "  C symbol name \"mixed_loglik\" not in load table\n\nwhen running a models.\n\n\n\nBut if I put nlme::: inside the .C calls, I don't get that message."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 16567] Claims about computational complexity of findInterval*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=16567>\n\n--- Comment #10 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\n(In reply to Martin Maechler from comment #9)\nI have done so, now, committed a few minutes ago: svn rev 87006  (R-devel).\n\nWe may keep the item open -- to remind ourselves that it would be nice\nif R could be made to \"hash\" properties such as \"sortedness\" and\n\"free-of-NA\/NaN\"\nfor atomic vectors.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1723565351.031499",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Vg7d",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 16567] Claims about computational complexity of findInterval",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=16567"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #10 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Martin Maechler from comment #9)\nI have done so, now, committed a few minutes ago: svn rev 87006  (R-devel).\n\nWe may keep the item open -- to remind ourselves that it would be nice\nif R could be made to \"hash\" properties such as \"sortedness\" and\n\"free-of-NA\/NaN\"\nfor atomic vectors."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18779] New: NextMethod() fails in S3 methods dispatched by internal general cbind, rbind*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18779>\n\n            Bug ID: 18779\n           Summary: NextMethod() fails in S3 methods dispatched by\n                    internal general cbind, rbind\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Low-level\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>\n\n```\n&gt; m &lt;- function(...) { cat(\"a\\n\"); NextMethod() }\n&gt; for (generic in c(\"c\", \"cbind\", \"rbind\")) .S3method(generic, \"a\", m)\n&gt; x &lt;- structure(0, class = \"a\")\n&gt; c(x)\na\n[1] 0\n&gt; cbind(x)\na\nError in NextMethod() : generic function not specified\n&gt; rbind(x)\na\nError in NextMethod() : generic function not specified\n```\n\nThe error message suggests that the method call is not evaluated in an\nenvironment containing the variables `.Generic`, `.Method`, `.Class`, etc.\nessential for correct `NextMethod()` dispatch.  Indeed:\n\n```\n&gt; debug(m)\n&gt; c(x)\ndebugging in: c.a(x)\ndebug at #1: {\n    cat(\"a\\n\")\n    NextMethod()\n}\nBrowse[1]&gt; ls(all.names = TRUE)\n[1] \"...\"             \".Class\"          \".Generic\"        \".GenericCallEnv\"\n[5] \".GenericDefEnv\"  \".Group\"          \".Method\"        \nBrowse[1]&gt; Q\n&gt; cbind(x)\ndebugging in: cbind(deparse.level, ...)\ndebug at #1: {\n    cat(\"a\\n\")\n    NextMethod()\n}\nBrowse[1]&gt; ls(all.names = TRUE)\n[1] \"...\"\nBrowse[1]&gt; Q\n&gt; rbind(x)\ndebugging in: rbind(deparse.level, ...)\ndebug at #1: {\n    cat(\"a\\n\")\n    NextMethod()\n}\nBrowse[1]&gt; ls(all.names = TRUE)\n[1] \"...\"\nBrowse[1]&gt; Q\n```\n\nComparing `do_c` and `do_bind`, both defined in `bind.c`, it seems clear that\nthe difference is that `do_c` calls `DispatchAnyOrEval` whereas `do_bind`\nperforms method look-up and evaluation \"manually\", notably _not_ constructing a\nspecial environment for evaluation of the method call.\n\nIt is well documented (e.g., in `help(\"cbind\")` and by comments in the body of\nof `do_bind`) that internal generic functions dispatching on `...` are likely\nto behave specially.  Still, I wonder if we should aim to have `do_c` and\n`do_bind` share more code and ultimately use the same mechanism for dispatch.\n\nLuke made a similar comment in bug 18579, comment 4:\n\n&gt; All that said, the differences in implementation between `do_c()` and `do_bind()` seem a little odd and it might be worth looking into sharing more code.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1723566668.055539",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "HyT",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18779] New: NextMethod() fails in S3 methods dispatched by internal general cbind, rbind",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18779"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18779\n           Summary: NextMethod() fails in S3 methods dispatched by\n                    internal general cbind, rbind\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Low-level\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> m <- function(...) { cat(\"a\\n\"); NextMethod() }\n> for (generic in c(\"c\", \"cbind\", \"rbind\")) .S3method(generic, \"a\", m)\n> x <- structure(0, class = \"a\")\n> c(x)\na\n[1] 0\n> cbind(x)\na\nError in NextMethod() : generic function not specified\n> rbind(x)\na\nError in NextMethod() : generic function not specified\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe error message suggests that the method call is not evaluated in an\nenvironment containing the variables "
                            },
                            {
                                "type": "text",
                                "text": ".Generic",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": ".Method",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", "
                            },
                            {
                                "type": "text",
                                "text": ".Class",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", etc.\nessential for correct "
                            },
                            {
                                "type": "text",
                                "text": "NextMethod()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " dispatch.  Indeed:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> debug(m)\n> c(x)\ndebugging in: c.a(x)\ndebug at #1: {\n    cat(\"a\\n\")\n    NextMethod()\n}\nBrowse[1]> ls(all.names = TRUE)\n[1] \"...\"             \".Class\"          \".Generic\"        \".GenericCallEnv\"\n[5] \".GenericDefEnv\"  \".Group\"          \".Method\"        \nBrowse[1]> Q\n> cbind(x)\ndebugging in: cbind(deparse.level, ...)\ndebug at #1: {\n    cat(\"a\\n\")\n    NextMethod()\n}\nBrowse[1]> ls(all.names = TRUE)\n[1] \"...\"\nBrowse[1]> Q\n> rbind(x)\ndebugging in: rbind(deparse.level, ...)\ndebug at #1: {\n    cat(\"a\\n\")\n    NextMethod()\n}\nBrowse[1]> ls(all.names = TRUE)\n[1] \"...\"\nBrowse[1]> Q\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nComparing "
                            },
                            {
                                "type": "text",
                                "text": "do_c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "do_bind",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", both defined in "
                            },
                            {
                                "type": "text",
                                "text": "bind.c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", it seems clear that\nthe difference is that "
                            },
                            {
                                "type": "text",
                                "text": "do_c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " calls "
                            },
                            {
                                "type": "text",
                                "text": "DispatchAnyOrEval",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " whereas "
                            },
                            {
                                "type": "text",
                                "text": "do_bind",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nperforms method look-up and evaluation \"manually\", notably "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " constructing a\nspecial environment for evaluation of the method call.\n\nIt is well documented (e.g., in "
                            },
                            {
                                "type": "text",
                                "text": "help(\"cbind\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and by comments in the body of\nof "
                            },
                            {
                                "type": "text",
                                "text": "do_bind",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") that internal generic functions dispatching on "
                            },
                            {
                                "type": "text",
                                "text": "...",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are likely\nto behave specially.  Still, I wonder if we should aim to have "
                            },
                            {
                                "type": "text",
                                "text": "do_c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and\n"
                            },
                            {
                                "type": "text",
                                "text": "do_bind",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " share more code and ultimately use the same mechanism for dispatch.\n\nLuke made a similar comment in bug 18579, comment 4:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "All that said, the differences in implementation between "
                            },
                            {
                                "type": "text",
                                "text": "do_c()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "do_bind()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " seem a little odd and it might be worth looking into sharing more code."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18690] Increase CONSOLE_BUFFER_SIZE and \/ or warn if input is truncated*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18690>\n\n--- Comment #2 from Tomas Kalibera (<mailto:tomas.kalibera@gmail.com|tomas.kalibera@gmail.com>) ---\nI've made changes to R-devel to support input lines of unlimited length on Unix\nterminals (where readline is used) and on Windows in Rterm.\n\nThe continuation mechanism here is invisible to the user. The line editors now\naccept lines of unlimited length (I modified getline, used by Rterm, to allow\nthat) and the glue code around these line editors can return the long lines\niteratively, following fgets() semantics.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1723567998.673129",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "N3W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18690] Increase CONSOLE_BUFFER_SIZE and \/ or warn if input is truncated",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18690"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #2 from Tomas Kalibera ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:tomas.kalibera@gmail.com",
                                "text": "tomas.kalibera@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI've made changes to R-devel to support input lines of unlimited length on Unix\nterminals (where readline is used) and on Windows in Rterm.\n\nThe continuation mechanism here is invisible to the user. The line editors now\naccept lines of unlimited length (I modified getline, used by Rterm, to allow\nthat) and the glue code around these line editors can return the long lines\niteratively, following fgets() semantics."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18772] In \"Writing R Extensions\" Sec 1.1.1, show how to include an ORCID number*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18772>\n\nKurt Hornik (<mailto:Kurt.Hornik@wu.ac.at|Kurt.Hornik@wu.ac.at>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|---                         |FIXED\n                 CC|                            |Kurt.Hornik@wu.ac.at\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #1 from Kurt Hornik (<mailto:Kurt.Hornik@wu.ac.at|Kurt.Hornik@wu.ac.at>) ---\nThanks: fixed now in the trunk with c87010.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1723572598.631659",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "h\/GSN",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18772] In \"Writing R Extensions\" Sec 1.1.1, show how to include an ORCID number",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18772"
                            },
                            {
                                "type": "text",
                                "text": "\n\nKurt Hornik ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:Kurt.Hornik@wu.ac.at",
                                "text": "Kurt.Hornik@wu.ac.at",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|---                         |FIXED\n                 CC|                            |Kurt.Hornik@wu.ac.at\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #1 from Kurt Hornik ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:Kurt.Hornik@wu.ac.at",
                                "text": "Kurt.Hornik@wu.ac.at",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThanks: fixed now in the trunk with c87010."
                            }
                        ]
                    }
                ]
            }
        ],
        "reactions": [
            {
                "name": "raised_hands",
                "users": [
                    "U07E2H8RKB8"
                ],
                "count": 1
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 17672] seq.Date should accept to,by,length.out (i.e., no need for from)*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=17672>\n\nMichael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|FIXED                       |WISHLIST\n             Status|CLOSED                      |VERIFIED\n\n--- Comment #3 from Michael Chirico (<mailto:michaelchirico4@gmail.com|michaelchirico4@gmail.com>) ---\n(I only have the option to edit the status from FIXED to VERIFIED so I've done\nso)\n\nCame back across the need for this today. It's strange that `seq.default()`\nallows `seq(from=n, by=k, length.out=m)` but `seq.Date()` does not.\n\nSuharto is absolutely right that we can move forward with a patch to\n`seq.Date()`:\n\n```\ndebug(seq.Date)\nseq(to=Sys.Date(), length.out=7, by=1)\n```\n\nAttaches on `seq.Date()` as expected.\n\nI'll revisit a patch, maybe as part of R dev day.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1723592561.946289",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "PmCAQ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 17672] seq.Date should accept to,by,length.out (i.e., no need for from)",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=17672"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMichael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|FIXED                       |WISHLIST\n             Status|CLOSED                      |VERIFIED\n\n--- Comment #3 from Michael Chirico ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:michaelchirico4@gmail.com",
                                "text": "michaelchirico4@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(I only have the option to edit the status from FIXED to VERIFIED so I've done\nso)\n\nCame back across the need for this today. It's strange that "
                            },
                            {
                                "type": "text",
                                "text": "seq.default()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nallows "
                            },
                            {
                                "type": "text",
                                "text": "seq(from=n, by=k, length.out=m)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " but "
                            },
                            {
                                "type": "text",
                                "text": "seq.Date()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does not.\n\nSuharto is absolutely right that we can move forward with a patch to\n"
                            },
                            {
                                "type": "text",
                                "text": "seq.Date()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "debug(seq.Date)\nseq(to=Sys.Date(), length.out=7, by=1)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nAttaches on "
                            },
                            {
                                "type": "text",
                                "text": "seq.Date()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as expected.\n\nI'll revisit a patch, maybe as part of R dev day."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
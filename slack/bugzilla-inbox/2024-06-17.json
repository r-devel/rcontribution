[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18744] R crashes on shutdown in ARM-based Win11 Parallels VM*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18744>\n\nTomas Kalibera (<mailto:tomas.kalibera@gmail.com|tomas.kalibera@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |tomas.kalibera@gmail.com\n\n--- Comment #2 from Tomas Kalibera (<mailto:tomas.kalibera@gmail.com|tomas.kalibera@gmail.com>) ---\nIn principle, crashes during long jumps may be due to SEH info not being as\nWindows expects it. This could be in principle caused by a bug in GCC or in the\nemulator, a bug in base R causing this is very unlikely. Of course if you have\nthe energy to trace this down to the root cause and report to the respective\nproject upstream, so that it could be fixed, that would be nice.\n\nOtherwise, x86_64 R running in emulator on Windows\/aarch64 is not a supported R\nplatform (and I've seen numerical differences where running R tests in the\nemulator). Instead, there is the native version for R 4.4.0 and now 4.4.1.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718618437.037259",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "JpAJ",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18744] R crashes on shutdown in ARM-based Win11 Parallels VM",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18744"
                            },
                            {
                                "type": "text",
                                "text": "\n\nTomas Kalibera ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:tomas.kalibera@gmail.com",
                                "text": "tomas.kalibera@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |tomas.kalibera@gmail.com\n\n--- Comment #2 from Tomas Kalibera ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:tomas.kalibera@gmail.com",
                                "text": "tomas.kalibera@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nIn principle, crashes during long jumps may be due to SEH info not being as\nWindows expects it. This could be in principle caused by a bug in GCC or in the\nemulator, a bug in base R causing this is very unlikely. Of course if you have\nthe energy to trace this down to the root cause and report to the respective\nproject upstream, so that it could be fixed, that would be nice.\n\nOtherwise, x86_64 R running in emulator on Windows\/aarch64 is not a supported R\nplatform (and I've seen numerical differences where running R tests in the\nemulator). Instead, there is the native version for R 4.4.0 and now 4.4.1."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18737] table() on dataframe causes memory leak or unhelpful error*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18737>\n\nTomas Kalibera (<mailto:tomas.kalibera@gmail.com|tomas.kalibera@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |tomas.kalibera@gmail.com\n\n--- Comment #5 from Tomas Kalibera (<mailto:tomas.kalibera@gmail.com|tomas.kalibera@gmail.com>) ---\nI don't see any evidence to suggest there is a \"memory leak\" in the example. I\ncan run \"table(airquality)\" without problems and the memory usage after it\nfinishes, after I run gc() several times, is again very small.\n\nIn principle, it is unfortunately expected that when R is asked to perform a\ncomputation that requires a lot of memory, the system will become unresponsive,\ndepending on the configuration. This is a general property of a\nmulti-processing OS with virtual memory. Disabling swap may lead to faster\ncrashes\/termination of computations that use too much memory, but one may still\nexperience unresponsiveness. \n\nOne could try to diagnose what is happening, whether the system actually froze\nor is still (slowly) computing the result, but it is unlikely to solve the\nproblem in principle: this computation requires a lot of memory and it is not\npossible, at least on the R end, to predict that the system would become\nunresponsive when running the computation.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718631226.960429",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "htww",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18737] table() on dataframe causes memory leak or unhelpful error",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18737"
                            },
                            {
                                "type": "text",
                                "text": "\n\nTomas Kalibera ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:tomas.kalibera@gmail.com",
                                "text": "tomas.kalibera@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |tomas.kalibera@gmail.com\n\n--- Comment #5 from Tomas Kalibera ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:tomas.kalibera@gmail.com",
                                "text": "tomas.kalibera@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI don't see any evidence to suggest there is a \"memory leak\" in the example. I\ncan run \"table(airquality)\" without problems and the memory usage after it\nfinishes, after I run gc() several times, is again very small.\n\nIn principle, it is unfortunately expected that when R is asked to perform a\ncomputation that requires a lot of memory, the system will become unresponsive,\ndepending on the configuration. This is a general property of a\nmulti-processing OS with virtual memory. Disabling swap may lead to faster\ncrashes\/termination of computations that use too much memory, but one may still\nexperience unresponsiveness. \n\nOne could try to diagnose what is happening, whether the system actually froze\nor is still (slowly) computing the result, but it is unlikely to solve the\nproblem in principle: this computation requires a lot of memory and it is not\npossible, at least on the R end, to predict that the system would become\nunresponsive when running the computation."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18733] Add message or warning to `substr()` when `length(start)` and\/or `length(stop)` exceeds `length(x)`*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18733>\n\n--- Comment #2 from Tomas Kalibera (<mailto:tomas.kalibera@gmail.com|tomas.kalibera@gmail.com>) ---\nI've tested this on CRAN\/Bioconductor packages - I've modified R to crash when\none provides \"start\" or \"stop\" longer than the length of \"x\":\n\n--- a\/src\/main\/character.c\n+++ b\/src\/main\/character.c\n@@ -439,6 +439,9 @@ do_substr(SEXP call, SEXP op, SEXP args, SEXP env)\n        if (!isInteger(sa) || !isInteger(so) || k == 0 || l == 0)\n            error(_(\"invalid substring arguments\"));\n\n+       if (k &gt; len || l &gt; len)\n+           *(int *)0 = 1;\n+\n        for (R_xlen_t i = 0; i &lt; len; i++) {\n            int start = INTEGER(sa)[i % k],\n                stop  = INTEGER(so)[i % l];\n\nThere was a number of packages broken by this:\n\nbackports bibtex Biobase CellBarcode cli clinDataReview crayon DiscoRhythm\ndoubt easyr ecb EFAtools ExpHunterSuite explore FIESTA gramEvol huxtable\nigate knitcitations LncFinder mcp medExtractR onbrand pkgdown politeness\nprevalence rasterList RCAS reappraised ReDaMoR RefManageR rsdmx SAScii\nscRNAseq seqimpute simEd SSN2 stringr stringx tutorial.helpers wrMisc\nwrTopDownFrag\n\nI've looked at three of them. In two cases, the code seemed correct and a\nplausible interpretation is that the code was written as intended (bibtex,\nsimEd). In one case, it seemed unintentional (ecb), but I only had a short\nlook.\n\nTo make a case for such a change in the language, in my view, almost all of the\ncases detected should be errors, because introducing a warning would require\nmaintainers of all these packages review, debug, fix, and test their code\n(which would also generate a lot of work for the CRAN\/Bioconductor repository\nmaintainers).\n\nSo, I think all of the cases above would have to be evaluated individually to\nsee whether they are an error or not. I am not sure doing this analysis would\nbe worth the effort - but if someone does that, and the result is that almost\nall of the cases are errors, it might be worth adding that warning.\n\nPlease note that the list of packages affected is a moving target. If the\nanalysis is done later in the future, it should use an updated list.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718638053.132439",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "3PjRs",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18733] Add message or warning to ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "substr()",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " when ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "length(start)",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and\/or ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "length(stop)",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " exceeds ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "length(x)",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18733"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #2 from Tomas Kalibera ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:tomas.kalibera@gmail.com",
                                "text": "tomas.kalibera@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI've tested this on CRAN\/Bioconductor packages - I've modified R to crash when\none provides \"start\" or \"stop\" longer than the length of \"x\":\n\n--- a\/src\/main\/character.c\n+++ b\/src\/main\/character.c\n@@ -439,6 +439,9 @@ do_substr(SEXP call, SEXP op, SEXP args, SEXP env)\n        if (!isInteger(sa) || !isInteger(so) || k == 0 || l == 0)\n            error(_(\"invalid substring arguments\"));\n\n+       if (k > len || l > len)\n+           "
                            },
                            {
                                "type": "text",
                                "text": "(int ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ")0 = 1;\n+\n        for (R_xlen_t i = 0; i < len; i++) {\n            int start = INTEGER(sa)[i % k],\n                stop  = INTEGER(so)[i % l];\n\nThere was a number of packages broken by this:\n\nbackports bibtex Biobase CellBarcode cli clinDataReview crayon DiscoRhythm\ndoubt easyr ecb EFAtools ExpHunterSuite explore FIESTA gramEvol huxtable\nigate knitcitations LncFinder mcp medExtractR onbrand pkgdown politeness\nprevalence rasterList RCAS reappraised ReDaMoR RefManageR rsdmx SAScii\nscRNAseq seqimpute simEd SSN2 stringr stringx tutorial.helpers wrMisc\nwrTopDownFrag\n\nI've looked at three of them. In two cases, the code seemed correct and a\nplausible interpretation is that the code was written as intended (bibtex,\nsimEd). In one case, it seemed unintentional (ecb), but I only had a short\nlook.\n\nTo make a case for such a change in the language, in my view, almost all of the\ncases detected should be errors, because introducing a warning would require\nmaintainers of all these packages review, debug, fix, and test their code\n(which would also generate a lot of work for the CRAN\/Bioconductor repository\nmaintainers).\n\nSo, I think all of the cases above would have to be evaluated individually to\nsee whether they are an error or not. I am not sure doing this analysis would\nbe worth the effort - but if someone does that, and the result is that almost\nall of the cases are errors, it might be worth adding that warning.\n\nPlease note that the list of packages affected is a moving target. If the\nanalysis is done later in the future, it should use an updated list."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18744] R crashes on shutdown in ARM-based Win11 Parallels VM*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18744>\n\n--- Comment #3 from Ivan Krylov (<mailto:ikrylov@disroot.org|ikrylov@disroot.org>) ---\nFWIW, the frames identified as `cli!fopen_file+0x7d98` and\n`cli!fopen_file+0x7bee` in the stack trace most likely belong to the functions\n`_pthread_invoke_cancel` and `pthread_exit`, respectively, and\n[this](<https:\/\/sourceforge.net\/p\/mingw-w64\/mingw-w64\/ci\/15dba71e6464b91510204458aff871f44dc131fb\/tree\/mingw-w64-libraries\/winpthreads\/src\/thread.c#l1115>)\nmust be the crashing `longjmp` in winpthreads. On my x86_64 systems,\n`id-&gt;thread_noposix` is always `1` when stopping the `cli` thread on R\nshutdown, so the branch is not taken (and the `jmp_buf` is full of zeroes).\n\nSince the workaround is [to skip `pthread_cancel(tick_thread)` when running\nemulated](<https:\/\/github.com\/r-lib\/cli\/issues\/494#issuecomment-1180760371>), the\ntest for whether to apply the workaround may need to be changed. Let's continue\nthis in the comments of issue 494?",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718643409.495059",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "4W0Z",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18744] R crashes on shutdown in ARM-based Win11 Parallels VM",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18744"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #3 from Ivan Krylov ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:ikrylov@disroot.org",
                                "text": "ikrylov@disroot.org"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nFWIW, the frames identified as "
                            },
                            {
                                "type": "text",
                                "text": "cli!fopen_file+0x7d98",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and\n"
                            },
                            {
                                "type": "text",
                                "text": "cli!fopen_file+0x7bee",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in the stack trace most likely belong to the functions\n"
                            },
                            {
                                "type": "text",
                                "text": "_pthread_invoke_cancel",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "pthread_exit",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", respectively, and\n[this]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/sourceforge.net\/p\/mingw-w64\/mingw-w64\/ci\/15dba71e6464b91510204458aff871f44dc131fb\/tree\/mingw-w64-libraries\/winpthreads\/src\/thread.c#l1115"
                            },
                            {
                                "type": "text",
                                "text": ")\nmust be the crashing "
                            },
                            {
                                "type": "text",
                                "text": "longjmp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in winpthreads. On my x86_64 systems,\n"
                            },
                            {
                                "type": "text",
                                "text": "id->thread_noposix",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is always "
                            },
                            {
                                "type": "text",
                                "text": "1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " when stopping the "
                            },
                            {
                                "type": "text",
                                "text": "cli",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " thread on R\nshutdown, so the branch is not taken (and the "
                            },
                            {
                                "type": "text",
                                "text": "jmp_buf",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is full of zeroes).\n\nSince the workaround is [to skip "
                            },
                            {
                                "type": "text",
                                "text": "pthread_cancel(tick_thread)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " when running\nemulated]("
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-lib\/cli\/issues\/494#issuecomment-1180760371"
                            },
                            {
                                "type": "text",
                                "text": "), the\ntest for whether to apply the workaround may need to be changed. Let's continue\nthis in the comments of issue 494?"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
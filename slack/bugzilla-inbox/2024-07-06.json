[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18754] identical() gives bad result on weak references*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18754>\n\nLuke Tierney (<mailto:luke@stat.uiowa.edu|luke@stat.uiowa.edu>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |luke@stat.uiowa.edu\n         Resolution|---                         |INVALID\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #1 from Luke Tierney (<mailto:luke@stat.uiowa.edu|luke@stat.uiowa.edu>) ---\nThe notion of identity\/equality\/equivalence is complicated, as reflected by the\nmany options of `identical()`. This is also why trying to use `==`, while\ntempting, is tricky at best since it can't take any of those options. There is\noften not a single best, never mind a single \"correct\", way to define identity.\n\nThat said, for reference objects (i.e. environments, names, weak references,\nand external pointers) usually the most useful notion is pointer identity to\nallow distinguishing different objects in memory and recognizing different\nnames\/paths to the same object in memory. (A different approach was chosen for\nexternal pointers; I don't care for the choice, but don't think it is worth\nchanging).\n\nWith weak references, the key is that two different weak references in memory\nto the same key are still two different weak references. Once the key becomes\nunreachable both weak references are eligible for finalization and clearing.\nThey will (usually) eventually be finalized and cleared, but in an\nindeterminate order. So one weak reference may be cleared while the other is\nnot (and could be used to resurrect the key).  If finalizers are specified for\nboth weak references, they will (usually) both be run eventually.\n\nSo the current definition is the most useful.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1720276618.315149",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "x+5W",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18754] identical() gives bad result on weak references",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18754"
                            },
                            {
                                "type": "text",
                                "text": "\n\nLuke Tierney ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:luke@stat.uiowa.edu",
                                "text": "luke@stat.uiowa.edu",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |luke@stat.uiowa.edu\n         Resolution|---                         |INVALID\n             Status|UNCONFIRMED                 |CLOSED\n\n--- Comment #1 from Luke Tierney ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:luke@stat.uiowa.edu",
                                "text": "luke@stat.uiowa.edu",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThe notion of identity\/equality\/equivalence is complicated, as reflected by the\nmany options of "
                            },
                            {
                                "type": "text",
                                "text": "identical()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". This is also why trying to use "
                            },
                            {
                                "type": "text",
                                "text": "==",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", while\ntempting, is tricky at best since it can't take any of those options. There is\noften not a single best, never mind a single \"correct\", way to define identity.\n\nThat said, for reference objects (i.e. environments, names, weak references,\nand external pointers) usually the most useful notion is pointer identity to\nallow distinguishing different objects in memory and recognizing different\nnames\/paths to the same object in memory. (A different approach was chosen for\nexternal pointers; I don't care for the choice, but don't think it is worth\nchanging).\n\nWith weak references, the key is that two different weak references in memory\nto the same key are still two different weak references. Once the key becomes\nunreachable both weak references are eligible for finalization and clearing.\nThey will (usually) eventually be finalized and cleared, but in an\nindeterminate order. So one weak reference may be cleared while the other is\nnot (and could be used to resurrect the key).  If finalizers are specified for\nboth weak references, they will (usually) both be run eventually.\n\nSo the current definition is the most useful."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18752] Manual page for is.atomic doc should mention change of is.atomic(NULL) in 4.4.0*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18752>\n\nElin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |elin.waring@gmail.com\n\n--- Comment #1 from Elin Waring (<mailto:elin.waring@gmail.com|elin.waring@gmail.com>) ---\nThe news says \n\n```\n\\item \\code{is.atomic(NULL)} now returns \\code{FALSE}, as \\code{NULL}\n      is not an atomic vector.  Strict back-compatibility would\n      replace \\code{is.atomic(foo)} by \\code{(is.null(foo) || is.atomic(foo))}\n      but should happen only sparingly.\n\n```\n\nPotentially I would add \n\n```\n \\code{is.atomic} returns false for \\code{NULL} since R 4.4. \n\n```\n\nAnd add to the examples \n\n```\n# Reproduce pre-4.4 behavior of is.atomic()\nis.null(NULL) || is.atomic(NULL)\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1720299682.775189",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xQtL",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18752] Manual page for is.atomic doc should mention change of is.atomic(NULL) in 4.4.0",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18752"
                            },
                            {
                                "type": "text",
                                "text": "\n\nElin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |elin.waring@gmail.com\n\n--- Comment #1 from Elin Waring ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:elin.waring@gmail.com",
                                "text": "elin.waring@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThe news says \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\\item \\code{is.atomic(NULL)} now returns \\code{FALSE}, as \\code{NULL}\n      is not an atomic vector.  Strict back-compatibility would\n      replace \\code{is.atomic(foo)} by \\code{(is.null(foo) || is.atomic(foo))}\n      but should happen only sparingly.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nPotentially I would add \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": " \\code{is.atomic} returns false for \\code{NULL} since R 4.4. \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nAnd add to the examples \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# Reproduce pre-4.4 behavior of is.atomic()\nis.null(NULL) || is.atomic(NULL)\n"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
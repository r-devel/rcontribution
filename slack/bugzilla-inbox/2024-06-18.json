[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18745] format(&lt;data.frame&gt;) does not keep `_NA_character` column names*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18745>\n\n--- Comment #1 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nCreated attachment 3363\n  --&gt; <https:\/\/bugs.r-project.org\/attachment.cgi?id=3363&amp;action=edit>\npatching `as.data.frame.list()` (+ format.D.F. tweak), incl reg.test\n\nThe really underlying cause seems to be that `do.call(data.frame, &lt;list&gt;)` does\ntreat `NA_character_` and `\"NA\"` the same and we already know (Bug 18702) that\nindeed, `data.frame()` *does* treat these the same, basically turning `NA`\ncolumn names into `\"NA\"` ones.  \n\n... and that's *not* something we'd even consider changing.\nRather, I've been fixing up `as.data.frame.list()` which is called from\n`format.data.frame` and the fix is basically by putting the `NA` column names\nback, after they have been produced by the above `do.call(data.frame, *)`.\n\nMy gut feeling would signal that committing fix to R-devel (see 'Attachment')\nmay well break R code  \"out there\".\n\nIf there's a volunteer checking many\/all CRAN &amp; BioC against such a change, I'd\nbe happy even though that may be \"over cautious\".",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718715650.196129",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Dy9kl",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18745] format(<data.frame>) does not keep ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "_NA_character",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " column names",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18745"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #1 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nCreated attachment 3363\n  --> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3363&amp;action=edit",
                                "text": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3363&action=edit"
                            },
                            {
                                "type": "text",
                                "text": "\npatching "
                            },
                            {
                                "type": "text",
                                "text": "as.data.frame.list()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (+ format.D.F. tweak), incl reg.test\n\nThe really underlying cause seems to be that "
                            },
                            {
                                "type": "text",
                                "text": "do.call(data.frame, <list>)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does\ntreat "
                            },
                            {
                                "type": "text",
                                "text": "NA_character_",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "\"NA\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the same and we already know (Bug 18702) that\nindeed, "
                            },
                            {
                                "type": "text",
                                "text": "data.frame()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "does",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " treat these the same, basically turning "
                            },
                            {
                                "type": "text",
                                "text": "NA",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\ncolumn names into "
                            },
                            {
                                "type": "text",
                                "text": "\"NA\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " ones.  \n\n... and that's "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " something we'd even consider changing.\nRather, I've been fixing up "
                            },
                            {
                                "type": "text",
                                "text": "as.data.frame.list()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which is called from\n"
                            },
                            {
                                "type": "text",
                                "text": "format.data.frame",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and the fix is basically by putting the "
                            },
                            {
                                "type": "text",
                                "text": "NA",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " column names\nback, after they have been produced by the above "
                            },
                            {
                                "type": "text",
                                "text": "do.call(data.frame, *)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nMy gut feeling would signal that committing fix to R-devel (see 'Attachment')\nmay well break R code  \"out there\".\n\nIf there's a volunteer checking many\/all CRAN & BioC against such a change, I'd\nbe happy even though that may be \"over cautious\"."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18741] `seq()` error message of bad `length.out`*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18741>\n\nSebastian Meyer (<mailto:seb.meyer@fau.de|seb.meyer@fau.de>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |seb.meyer@fau.de\n\n--- Comment #6 from Sebastian Meyer (<mailto:seb.meyer@fau.de|seb.meyer@fau.de>) ---\n(In reply to Martin Maechler from comment #2)\nIn principle I'd prefer `seq.default()` to error when `length(length.out) &gt; 1`\njust like it does for non-scalar `by`. I can imagine code where a non-scalar\nargument was given accidentally (maybe something like `sequence()` was\nintended), but not that the first-element fallback was used as a feature. The\ndocumentation is also clear (\"a non-negative number\") and the patch would be\ntrivial.\n\nOTOH, this change did *not* reveal any new check problems when tested on about\n6200 CRAN\/BIOC packages, which suggests that the long-standing warning at least\ndoes a reasonable job in preventing bad code.\n\nAnother aspect to consider is that the `length.out` handling is paralleled in\n`rep()` and it might be desirable to keep the two in sync:\n\n```\nR&gt; rep(1, length.out = 2:1)\n[1] 1 1\nWarning message:\nIn rep(1, length.out = 2:1) : first element used of 'length.out' argument\n```\n\nIn contrast to `seq`, however, `?rep` explicitly documents this behaviour:\n\"Other inputs will be coerced to a double vector and the first element taken.\nIgnored if 'NA' or invalid.\" Note that the latter means `length.out=integer()`\nis a no-op, whereas it is an error in `seq.default`, so the two are not fully\ncompatible already now.\n\nLast but not least, `seq.Date` and `seq.POSIXt` do error for non-scalar\n`length.out`.\n\nOverall, I'd tend to bring `seq.default` in line with these other methods but I\nagree that there is not much to gain.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1718740691.472969",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "A00j",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18741] ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "seq()",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " error message of bad ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "length.out",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18741"
                            },
                            {
                                "type": "text",
                                "text": "\n\nSebastian Meyer ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:seb.meyer@fau.de",
                                "text": "seb.meyer@fau.de"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |seb.meyer@fau.de\n\n--- Comment #6 from Sebastian Meyer ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:seb.meyer@fau.de",
                                "text": "seb.meyer@fau.de"
                            },
                            {
                                "type": "text",
                                "text": ") ---\n(In reply to Martin Maechler from comment #2)\nIn principle I'd prefer "
                            },
                            {
                                "type": "text",
                                "text": "seq.default()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to error when "
                            },
                            {
                                "type": "text",
                                "text": "length(length.out) > 1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\njust like it does for non-scalar "
                            },
                            {
                                "type": "text",
                                "text": "by",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". I can imagine code where a non-scalar\nargument was given accidentally (maybe something like "
                            },
                            {
                                "type": "text",
                                "text": "sequence()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " was\nintended), but not that the first-element fallback was used as a feature. The\ndocumentation is also clear (\"a non-negative number\") and the patch would be\ntrivial.\n\nOTOH, this change did "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " reveal any new check problems when tested on about\n6200 CRAN\/BIOC packages, which suggests that the long-standing warning at least\ndoes a reasonable job in preventing bad code.\n\nAnother aspect to consider is that the "
                            },
                            {
                                "type": "text",
                                "text": "length.out",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " handling is paralleled in\n"
                            },
                            {
                                "type": "text",
                                "text": "rep()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and it might be desirable to keep the two in sync:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "R> rep(1, length.out = 2:1)\n[1] 1 1\nWarning message:\nIn rep(1, length.out = 2:1) : first element used of 'length.out' argument\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIn contrast to "
                            },
                            {
                                "type": "text",
                                "text": "seq",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", however, "
                            },
                            {
                                "type": "text",
                                "text": "?rep",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " explicitly documents this behaviour:\n\"Other inputs will be coerced to a double vector and the first element taken.\nIgnored if 'NA' or invalid.\" Note that the latter means "
                            },
                            {
                                "type": "text",
                                "text": "length.out=integer()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nis a no-op, whereas it is an error in "
                            },
                            {
                                "type": "text",
                                "text": "seq.default",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", so the two are not fully\ncompatible already now.\n\nLast but not least, "
                            },
                            {
                                "type": "text",
                                "text": "seq.Date",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "seq.POSIXt",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " do error for non-scalar\n"
                            },
                            {
                                "type": "text",
                                "text": "length.out",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nOverall, I'd tend to bring "
                            },
                            {
                                "type": "text",
                                "text": "seq.default",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in line with these other methods but I\nagree that there is not much to gain."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
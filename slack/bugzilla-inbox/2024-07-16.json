[
    {
        "subtype": "bot_message",
        "text": "*[Bug 18654] xyTable fails when both x and y are NA*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18654>\n\nPaul Murrell (<mailto:paul@stat.auckland.ac.nz|paul@stat.auckland.ac.nz>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |paul@stat.auckland.ac.nz\n\n--- Comment #7 from Paul Murrell (<mailto:paul@stat.auckland.ac.nz|paul@stat.auckland.ac.nz>) ---\nThanks for the report, analysis, and patch.  A couple of suggestions for next\nsteps:\n\n* Perhaps instead of using ...\n  `<http:\/\/is.na|is.na>(x) != <http:\/\/is.na|is.na>(y)`\n  ... it might be nicer to use ...\n  `xor(<http:\/\/is.na|is.na>(x), <http:\/\/is.na|is.na>(y))`\n  ...?\n\n+ Could you add a patch for the `xyTable.Rd` documentation?\n  Perhaps a Details section that describes how NAs are handled.\n  Perhaps some more examples that demonstrate how NAs are handled.\n\n+ Could you add a patch for additional `tests` to ensure that the handling of\nNAs does not break in future.\n\n+ Confirmation that the patch passes make check-all would be useful.\n\n+ It would also be useful to know that R CMD check passes for the following\nCRAN packages that include calls to xyTable():\n\n  outbreaker2\n  o2geosocial\n  adegenet\n  <http:\/\/soc.ca|soc.ca>\n  adespatial\n  miscor\n  CASMI\n  gridGraphics\n\n The README.md file for {bayesRecon} also includes an example usage.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1721144496.688039",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ALL0p",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18654] xyTable fails when both x and y are NA",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18654"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPaul Murrell ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:paul@stat.auckland.ac.nz",
                                "text": "paul@stat.auckland.ac.nz",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |paul@stat.auckland.ac.nz\n\n--- Comment #7 from Paul Murrell ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:paul@stat.auckland.ac.nz",
                                "text": "paul@stat.auckland.ac.nz",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThanks for the report, analysis, and patch.  A couple of suggestions for next\nsteps:\n\n* Perhaps instead of using ...\n  "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/is.na",
                                "text": "is.na",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(x) != ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/is.na",
                                "text": "is.na",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(y)",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n  ... it might be nicer to use ...\n  "
                            },
                            {
                                "type": "text",
                                "text": "xor(",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/is.na",
                                "text": "is.na",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(x), ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/is.na",
                                "text": "is.na",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "(y))",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n  ...?\n\n+ Could you add a patch for the "
                            },
                            {
                                "type": "text",
                                "text": "xyTable.Rd",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " documentation?\n  Perhaps a Details section that describes how NAs are handled.\n  Perhaps some more examples that demonstrate how NAs are handled.\n\n+ Could you add a patch for additional "
                            },
                            {
                                "type": "text",
                                "text": "tests",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to ensure that the handling of\nNAs does not break in future.\n\n+ Confirmation that the patch passes make check-all would be useful.\n\n+ It would also be useful to know that R CMD check passes for the following\nCRAN packages that include calls to xyTable():\n\n  outbreaker2\n  o2geosocial\n  adegenet\n  "
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/soc.ca",
                                "text": "soc.ca"
                            },
                            {
                                "type": "text",
                                "text": "\n  adespatial\n  miscor\n  CASMI\n  gridGraphics\n\n The README.md file for {bayesRecon} also includes an example usage."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18654] xyTable fails when both x and y are NA*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18654>\n\nPaul Murrell (<mailto:paul@stat.auckland.ac.nz|paul@stat.auckland.ac.nz>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n     Ever confirmed|0                           |1\n             Status|UNCONFIRMED                 |ASSIGNED\n           Assignee|R-core@R-project.org        |paul@stat.auckland.ac.nz",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1721144549.423609",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "g2iVK",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18654] xyTable fails when both x and y are NA",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18654"
                            },
                            {
                                "type": "text",
                                "text": "\n\nPaul Murrell ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:paul@stat.auckland.ac.nz",
                                "text": "paul@stat.auckland.ac.nz",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n     Ever confirmed|0                           |1\n             Status|UNCONFIRMED                 |ASSIGNED\n           Assignee|R-core@R-project.org        |paul@stat.auckland.ac.nz"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 15027] max.print is ignored for matrix  *and* other array headers*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=15027>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n            Summary|max.print is ignored for    |max.print is ignored for\n                   |matrix headers              |matrix  *and* other array\n                   |                            |headers\n\n--- Comment #7 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nThank you very much, Lionel, and  R Dev Day team!\n\nI have committed your proposal (after indeed reverting to keep using `c` inside\nthe type specific functions, and also reverting some white space changes to\nkeep the diff minimal).  The change is in R-devel's svn rev 86902  ca 20 hours\nago.\n\nIndeed, the changes needed in `printArray()` are so much related to those done\nin \n`printMatrix()`,  it does make sense to keep this PR open, \nand extend the issue _title_ to also include arrays.\n\nE.g., as Lionel mentioned in comment 6,\n```\nprint(array(dim = c(2, 2, 1)), max = 1)\n#&gt; [ reached getOption(\"max.print\") -- omitted 1 matrix slice(s) ]\n```\nis wrong  *and* the bug 18763 (comment 5) is really just a version of the\nabove, e.g., using\n\n```\na &lt;- array(1:6, dim=3:1)\nfor(max in 1:6) { cat(\"max =\",max,\":\\n\"); print(a, max = max) }\n```\n\nI'm hence keeping this one open will close the other one",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1721145551.377859",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Zr+D",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "*[Bug 15027] max.print is ignored for matrix  "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " other array headers*\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=15027"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n            Summary|max.print is ignored for    |max.print is ignored for\n                   |matrix headers              |matrix  "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " other array\n                   |                            |headers\n\n--- Comment #7 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThank you very much, Lionel, and  R Dev Day team!\n\nI have committed your proposal (after indeed reverting to keep using "
                            },
                            {
                                "type": "text",
                                "text": "c",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " inside\nthe type specific functions, and also reverting some white space changes to\nkeep the diff minimal).  The change is in R-devel's svn rev 86902  ca 20 hours\nago.\n\nIndeed, the changes needed in "
                            },
                            {
                                "type": "text",
                                "text": "printArray()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are so much related to those done\nin \n"
                            },
                            {
                                "type": "text",
                                "text": "printMatrix()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ",  it does make sense to keep this PR open, \nand extend the issue "
                            },
                            {
                                "type": "text",
                                "text": "title",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to also include arrays.\n\nE.g., as Lionel mentioned in comment 6,"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "print(array(dim = c(2, 2, 1)), max = 1)\n#> [ reached getOption(\"max.print\") -- omitted 1 matrix slice(s) ]\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is wrong  "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " the bug 18763 (comment 5) is really just a version of the\nabove, e.g., using\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a <- array(1:6, dim=3:1)\nfor(max in 1:6) { cat(\"max =\",max,\":\\n\"); print(a, max = max) }\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI'm hence keeping this one open will close the other one"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18763] No warning for omitted rows when the dimensions of an array exceed print.max*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18763>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|---                         |DUPLICATE\n             Status|CONFIRMED                   |CLOSED\n\n--- Comment #1 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nyes, there should be a \"note\" (it is *not* a warning).\n\n```\na &lt;- array(1:6, dim=3:1)\nfor(max in 1:6) { cat(\"max =\",max,\":\\n\"); print(a, max = max) }\n```\nis indeed pretty disappointing (with the last one, max=6, being ok).\n\nI think it makes more sense to finish bug 15027 and call this a duplicate of\nthat, because the patch there or even better the changes committed, i.e.,\n```\nsvn diff -c86902 &gt; pr15027.diff\n```\nwill be very analogous to what is needed for this.\n\n*** This bug has been marked as a duplicate of bug 15027 ***",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1721145564.657869",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "\/O+l",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18763] No warning for omitted rows when the dimensions of an array exceed print.max",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18763"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n         Resolution|---                         |DUPLICATE\n             Status|CONFIRMED                   |CLOSED\n\n--- Comment #1 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nyes, there should be a \"note\" (it is "
                            },
                            {
                                "type": "text",
                                "text": "not",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " a warning).\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "a <- array(1:6, dim=3:1)\nfor(max in 1:6) { cat(\"max =\",max,\":\\n\"); print(a, max = max) }\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "is indeed pretty disappointing (with the last one, max=6, being ok).\n\nI think it makes more sense to finish bug 15027 and call this a duplicate of\nthat, because the patch there or even better the changes committed, i.e.,"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "svn diff -c86902 > pr15027.diff\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "will be very analogous to what is needed for this.\n\n*** This bug has been marked as a duplicate of bug 15027 ***"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 15027] max.print is ignored for matrix  *and* other array headers*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=15027>\n\n--- Comment #8 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\n*** Bug 18763 has been marked as a duplicate of this bug. ***",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1721145565.621929",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "cOH",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "*[Bug 15027] max.print is ignored for matrix  "
                            },
                            {
                                "type": "text",
                                "text": "and",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " other array headers*\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=15027"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #8 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\n*** Bug 18763 has been marked as a duplicate of this bug. ***"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18766] New: ALTREP: Use `DATAPTR_OR_NULL()` in `ExtractSubset()` where possible*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18766>\n\n            Bug ID: 18766\n           Summary: ALTREP: Use `DATAPTR_OR_NULL()` in `ExtractSubset()`\n                    where possible\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Low-level\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:davis@posit.co|davis@posit.co>\n\nCreated attachment 3378\n  --&gt; <https:\/\/bugs.r-project.org\/attachment.cgi?id=3378&amp;action=edit>\nPatch where `DATAPTR_OR_NULL()` is used in `ExtractSubset()`\n\nBug originally reported at r-dev-day PLUS 2024:\n<https:\/\/github.com\/r-devel\/r-dev-day\/issues\/23>\n\nFull GitHub PR with passing tests:\n<https:\/\/github.com\/r-devel\/r-svn\/pull\/176>\n\nJoint work done by:\nDavis Vaughan\nGabe Becker\n\n`ExtractSubset()` is ALTREP friendly through its repeated usage of the\n`*_ELT()` family to extract each element. This allows ALTREP ELT methods to\nrun, avoiding materialization. However, this comes with significant indirection\noverhead compared to non-ALTREP objects, where the `*_ELT()` family are inlined\nfunctions. Even when the ALTREP ELT method implementation is extremely fast,\nthe indirection overhead alone typically results in subsetting being 2-3x\nslower for ALTREP objects.\n\nAn alternative approach is to first call `DATAPTR_OR_NULL()` to check if we can\nget a read only pointer to the object. This is always possible for non-ALTREP\nobjects, and is sometimes possible without materialization for ALTREP objects\n(like ALTREP \"views\" into other existing data). The read only pointer can be\nused for extraction rather than repeatedly calling an `*_ELT()` method, which\nends up being much faster for the ALTREP case.\n\nThe attached patch adds a `DATAPTR_OR_NULL()` path to `ExtractSubset()` in a\nway that reuses most of the existing infrastructure.\n\nThree notes:\n\n- The logical path was accidentally using `NA_INTEGER`. It wasn't hurting\nanything, but I swapped it for `NA_LOGICAL`.\n- It is worth noting that there are also very similarly designed\n`MATRIX_SUBSET_LOOP()` and `ARRAY_SUBSET_LOOP()` macros in this file. I believe\nthese could also benefit from this new approach, but I did not touch these for\nnow.\n- The `VECSXP` path is tied up with the `EXPRSXP` path. We could detangle them\nso the `VECSXP` path can use `DATAPTR_OR_NULL()` and also get these benefits,\nbut I was not sure how important `VECTOR_ELT_FIX_NAMED()` was, so I've left in\nthe old behavior for now. It would be pretty nice if we could decide that\n`VECTOR_ELT_FIX_NAMED()` isn't actually needed.\n\nHere is a before\/after benchmark using this rlang PR where ALTREP views are\nbeing implemented <https:\/\/github.com\/r-lib\/rlang\/pull\/1725>. As expected, this\nallows ALTREP subsetting performance to be identical to non-ALTREP subsetting\nwhen the ALTREP class can provide a read only dataptr!\n\n```\n# Small view containing 10,000 elements\nbase &lt;- sample(1e6)\nx &lt;- base[seq(from = 10, length.out = 1e4)]\nx_altrep &lt;- rlang:::vec_view(base, start = 10, size = 1e4)\n\n# Small continguous slice\nidx &lt;- seq(from = 1L, length.out = 100L)\nbench::mark(\n  x[idx],\n  x_altrep[idx],\n  iterations = 100000\n)\n\n# Before\n#&gt; # A tibble: 2 × 6\n#&gt;   expression         min   median `itr\/sec` mem_alloc `gc\/sec`\n#&gt;   &lt;bch:expr&gt;    &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 x[idx]           164ns    246ns  3270065.      448B        0\n#&gt; 2 x_altrep[idx]    615ns    738ns  1264755.      448B        0\n\n# After\n#&gt; # A tibble: 2 × 6\n#&gt;   expression         min   median `itr\/sec` mem_alloc `gc\/sec`\n#&gt;   &lt;bch:expr&gt;    &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 x[idx]           164ns    246ns  3335983.      448B        0\n#&gt; 2 x_altrep[idx]    164ns    246ns  3222577.      448B        0\n\n",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1721149476.433819",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "b7H",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18766] New: ALTREP: Use ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "DATAPTR_OR_NULL()",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in ",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "ExtractSubset()",
                                "style": {
                                    "bold": true,
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " where possible",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18766"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18766\n           Summary: ALTREP: Use "
                            },
                            {
                                "type": "text",
                                "text": "DATAPTR_OR_NULL()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in "
                            },
                            {
                                "type": "text",
                                "text": "ExtractSubset()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n                    where possible\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Low-level\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:davis@posit.co",
                                "text": "davis@posit.co"
                            },
                            {
                                "type": "text",
                                "text": "\n\nCreated attachment 3378\n  --> "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3378&amp;action=edit",
                                "text": "https:\/\/bugs.r-project.org\/attachment.cgi?id=3378&action=edit"
                            },
                            {
                                "type": "text",
                                "text": "\nPatch where "
                            },
                            {
                                "type": "text",
                                "text": "DATAPTR_OR_NULL()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is used in "
                            },
                            {
                                "type": "text",
                                "text": "ExtractSubset()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n\nBug originally reported at r-dev-day PLUS 2024:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-devel\/r-dev-day\/issues\/23"
                            },
                            {
                                "type": "text",
                                "text": "\n\nFull GitHub PR with passing tests:\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-devel\/r-svn\/pull\/176"
                            },
                            {
                                "type": "text",
                                "text": "\n\nJoint work done by:\nDavis Vaughan\nGabe Becker\n\n"
                            },
                            {
                                "type": "text",
                                "text": "ExtractSubset()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is ALTREP friendly through its repeated usage of the\n"
                            },
                            {
                                "type": "text",
                                "text": "*_ELT()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " family to extract each element. This allows ALTREP ELT methods to\nrun, avoiding materialization. However, this comes with significant indirection\noverhead compared to non-ALTREP objects, where the "
                            },
                            {
                                "type": "text",
                                "text": "*_ELT()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " family are inlined\nfunctions. Even when the ALTREP ELT method implementation is extremely fast,\nthe indirection overhead alone typically results in subsetting being 2-3x\nslower for ALTREP objects.\n\nAn alternative approach is to first call "
                            },
                            {
                                "type": "text",
                                "text": "DATAPTR_OR_NULL()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to check if we can\nget a read only pointer to the object. This is always possible for non-ALTREP\nobjects, and is sometimes possible without materialization for ALTREP objects\n(like ALTREP \"views\" into other existing data). The read only pointer can be\nused for extraction rather than repeatedly calling an "
                            },
                            {
                                "type": "text",
                                "text": "*_ELT()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " method, which\nends up being much faster for the ALTREP case.\n\nThe attached patch adds a "
                            },
                            {
                                "type": "text",
                                "text": "DATAPTR_OR_NULL()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " path to "
                            },
                            {
                                "type": "text",
                                "text": "ExtractSubset()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " in a\nway that reuses most of the existing infrastructure.\n\nThree notes:\n\n- The logical path was accidentally using "
                            },
                            {
                                "type": "text",
                                "text": "NA_INTEGER",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ". It wasn't hurting\nanything, but I swapped it for "
                            },
                            {
                                "type": "text",
                                "text": "NA_LOGICAL",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n- It is worth noting that there are also very similarly designed\n"
                            },
                            {
                                "type": "text",
                                "text": "MATRIX_SUBSET_LOOP()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "ARRAY_SUBSET_LOOP()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " macros in this file. I believe\nthese could also benefit from this new approach, but I did not touch these for\nnow.\n- The "
                            },
                            {
                                "type": "text",
                                "text": "VECSXP",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " path is tied up with the "
                            },
                            {
                                "type": "text",
                                "text": "EXPRSXP",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " path. We could detangle them\nso the "
                            },
                            {
                                "type": "text",
                                "text": "VECSXP",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " path can use "
                            },
                            {
                                "type": "text",
                                "text": "DATAPTR_OR_NULL()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and also get these benefits,\nbut I was not sure how important "
                            },
                            {
                                "type": "text",
                                "text": "VECTOR_ELT_FIX_NAMED()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " was, so I've left in\nthe old behavior for now. It would be pretty nice if we could decide that\n"
                            },
                            {
                                "type": "text",
                                "text": "VECTOR_ELT_FIX_NAMED()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " isn't actually needed.\n\nHere is a before\/after benchmark using this rlang PR where ALTREP views are\nbeing implemented "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/r-lib\/rlang\/pull\/1725"
                            },
                            {
                                "type": "text",
                                "text": ". As expected, this\nallows ALTREP subsetting performance to be identical to non-ALTREP subsetting\nwhen the ALTREP class can provide a read only dataptr!\n\n```\n# Small view containing 10,000 elements\nbase <- sample(1e6)\nx <- base[seq(from = 10, length.out = 1e4)]\nx_altrep <- rlang:::vec_view(base, start = 10, size = 1e4)\n\n# Small continguous slice\nidx <- seq(from = 1L, length.out = 100L)\nbench::mark(\n  x[idx],\n  x_altrep[idx],\n  iterations = 100000\n)\n\n# Before\n#> # A tibble: 2 × 6\n#>   expression         min   median "
                            },
                            {
                                "type": "text",
                                "text": "itr\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mem_alloc "
                            },
                            {
                                "type": "text",
                                "text": "gc\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n#>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 x[idx]           164ns    246ns  3270065.      448B        0\n#> 2 x_altrep[idx]    615ns    738ns  1264755.      448B        0\n\n# After\n#> # A tibble: 2 × 6\n#>   expression         min   median "
                            },
                            {
                                "type": "text",
                                "text": "itr\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mem_alloc "
                            },
                            {
                                "type": "text",
                                "text": "gc\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n#>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 x[idx]           164ns    246ns  3335983.      448B        0\n#> 2 x_altrep[idx]    164ns    246ns  3222577.      448B        0"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "# Small random slice\nidx &lt;- sample(1e4L, size = 100L)\nbench::mark(\n  x[idx],\n  x_altrep[idx],\n  iterations = 100000\n)\n\n# Before\n#&gt; # A tibble: 2 × 6\n#&gt;   expression         min   median `itr\/sec` mem_alloc `gc\/sec`\n#&gt;   &lt;bch:expr&gt;    &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 x[idx]           164ns    246ns  3391526.      448B     33.9\n#&gt; 2 x_altrep[idx]    615ns    738ns  1264125.      448B     12.6\n\n# After\n#&gt; # A tibble: 2 × 6\n#&gt;   expression         min   median `itr\/sec` mem_alloc `gc\/sec`\n#&gt;   &lt;bch:expr&gt;    &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 x[idx]           164ns    246ns  3438653.      448B     34.4\n#&gt; 2 x_altrep[idx]    164ns    246ns  3227056.      448B     32.3\n\n# Large view containing 5,000,000 elements\nbase &lt;- sample(1e7)\nx &lt;- base[seq(from = 1000, length.out = 5e6)]\nx_altrep &lt;- rlang:::vec_view(base, start = 1000, size = 5e6)\n\n# Large continguous slice\nidx &lt;- seq(from = 1L, length.out = 1e6L)\nbench::mark(\n  x[idx],\n  x_altrep[idx],\n  iterations = 1000\n)\n\n# Before\n#&gt; # A tibble: 2 × 6\n#&gt;   expression         min   median `itr\/sec` mem_alloc `gc\/sec`\n#&gt;   &lt;bch:expr&gt;    &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 x[idx]           1.6ms   1.79ms      539.    3.81MB    43.7 \n#&gt; 2 x_altrep[idx]   6.43ms   6.68ms      149.    3.81MB     6.85\n\n# After\n#&gt; # A tibble: 2 × 6\n#&gt;   expression         min   median `itr\/sec` mem_alloc `gc\/sec`\n#&gt;   &lt;bch:expr&gt;    &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 x[idx]          1.53ms   1.84ms      540.    3.81MB     43.8\n#&gt; 2 x_altrep[idx]   1.49ms   1.82ms      542.    3.81MB     24.9\n\n# Large random slice\nidx &lt;- sample(5e6L, size = 1e6L)\nbench::mark(\n  x[idx],\n  x_altrep[idx],\n  iterations = 1000\n)\n\n# Before\n#&gt; # A tibble: 2 × 6\n#&gt;   expression         min   median `itr\/sec` mem_alloc `gc\/sec`\n#&gt;   &lt;bch:expr&gt;    &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 x[idx]          2.73ms      3ms     317.     3.81MB    16.7 \n#&gt; 2 x_altrep[idx]   9.97ms   10.4ms      90.3    3.81MB     4.45\n\n# After\n#&gt; # A tibble: 2 × 6\n#&gt;   expression         min   median `itr\/sec` mem_alloc `gc\/sec`\n#&gt;   &lt;bch:expr&gt;    &lt;bch:tm&gt; &lt;bch:tm&gt;     &lt;dbl&gt; &lt;bch:byt&gt;    &lt;dbl&gt;\n#&gt; 1 x[idx]          2.39ms   2.62ms      379.    3.81MB     19.9\n#&gt; 2 x_altrep[idx]   2.39ms   2.61ms      378.    3.81MB     18.6\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1721149476.466699",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "TBF=",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# Small random slice\nidx <- sample(1e4L, size = 100L)\nbench::mark(\n  x[idx],\n  x_altrep[idx],\n  iterations = 100000\n)\n\n# Before\n#> # A tibble: 2 × 6\n#>   expression         min   median "
                            },
                            {
                                "type": "text",
                                "text": "itr\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mem_alloc "
                            },
                            {
                                "type": "text",
                                "text": "gc\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n#>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 x[idx]           164ns    246ns  3391526.      448B     33.9\n#> 2 x_altrep[idx]    615ns    738ns  1264125.      448B     12.6\n\n# After\n#> # A tibble: 2 × 6\n#>   expression         min   median "
                            },
                            {
                                "type": "text",
                                "text": "itr\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mem_alloc "
                            },
                            {
                                "type": "text",
                                "text": "gc\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n#>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 x[idx]           164ns    246ns  3438653.      448B     34.4\n#> 2 x_altrep[idx]    164ns    246ns  3227056.      448B     32.3\n\n# Large view containing 5,000,000 elements\nbase <- sample(1e7)\nx <- base[seq(from = 1000, length.out = 5e6)]\nx_altrep <- rlang:::vec_view(base, start = 1000, size = 5e6)\n\n# Large continguous slice\nidx <- seq(from = 1L, length.out = 1e6L)\nbench::mark(\n  x[idx],\n  x_altrep[idx],\n  iterations = 1000\n)\n\n# Before\n#> # A tibble: 2 × 6\n#>   expression         min   median "
                            },
                            {
                                "type": "text",
                                "text": "itr\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mem_alloc "
                            },
                            {
                                "type": "text",
                                "text": "gc\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n#>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 x[idx]           1.6ms   1.79ms      539.    3.81MB    43.7 \n#> 2 x_altrep[idx]   6.43ms   6.68ms      149.    3.81MB     6.85\n\n# After\n#> # A tibble: 2 × 6\n#>   expression         min   median "
                            },
                            {
                                "type": "text",
                                "text": "itr\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mem_alloc "
                            },
                            {
                                "type": "text",
                                "text": "gc\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n#>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 x[idx]          1.53ms   1.84ms      540.    3.81MB     43.8\n#> 2 x_altrep[idx]   1.49ms   1.82ms      542.    3.81MB     24.9\n\n# Large random slice\nidx <- sample(5e6L, size = 1e6L)\nbench::mark(\n  x[idx],\n  x_altrep[idx],\n  iterations = 1000\n)\n\n# Before\n#> # A tibble: 2 × 6\n#>   expression         min   median "
                            },
                            {
                                "type": "text",
                                "text": "itr\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mem_alloc "
                            },
                            {
                                "type": "text",
                                "text": "gc\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n#>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 x[idx]          2.73ms      3ms     317.     3.81MB    16.7 \n#> 2 x_altrep[idx]   9.97ms   10.4ms      90.3    3.81MB     4.45\n\n# After\n#> # A tibble: 2 × 6\n#>   expression         min   median "
                            },
                            {
                                "type": "text",
                                "text": "itr\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " mem_alloc "
                            },
                            {
                                "type": "text",
                                "text": "gc\/sec",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n#>   <bch:expr>    <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl>\n#> 1 x[idx]          2.39ms   2.62ms      379.    3.81MB     19.9\n#> 2 x_altrep[idx]   2.39ms   2.61ms      378.    3.81MB     18.6\n```"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18765] filters argument matched by multiple actual arguments with install.packages*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18765>\n\nLluís (<mailto:lluis.revilla@gmail.com|lluis.revilla@gmail.com>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |lluis.revilla@gmail.com\n\n--- Comment #1 from Lluís (<mailto:lluis.revilla@gmail.com|lluis.revilla@gmail.com>) ---\nDiagnostic\n----------\n\nI can reproduce this in r86902, nice example! I think this comes from not\nchecking the arguments of filter before using the options at line 765 of\nsrc\/library\/utils\/R\/packages2.R when checking for source packages.\n\nRelevant code from that file:\n\n```\nif(is.null(available)) {\n        filters &lt;- getOption(\"available_packages_filters\")\n        if(!is.null(filters)) {\n            available &lt;- available.packages(contriburl = contriburl,\n                                            method = method, ...)\n        } else {\n            f &lt;- setdiff(available_packages_filters_default,\n                         c(\"R_version\", \"duplicates\"))\n            av2 &lt;- available.packages(contriburl = contriburl, filters = f,\n                                      method = method, ...)\n            f &lt;- available_packages_filters_db[[\"R_version\"]]\n            f2 &lt;- available_packages_filters_db[[\"duplicates\"]]\n            available &lt;- f2(f(av2))\n        }\n    }\n\n```\n\nThe filters are saved without checking if anything was passed explicitly to\n`install.packages` which then leads to having two arguments with the same name\n(`filters = NULL` and  `filters == \"license\/FOSS\"` via ...). \n\nOrigin\n------\n\nThis code was added in r79166 (~4 years ago):\nhttps:\/\/svn.r-project.org\/R\/trunk\/?p=79166 which includes this news: \n\n&gt; When `install.packages()` fails to find a package in a source repository it mentions package versions which are excluded by their R version requirement and links to hints on why a package might not be found.\n\nThis doesn't seem intended.\n\nPossible solutions\n------------------\n\nOne solution might be to check `if (is.null(filters) &amp;&amp; \"filters\" %in%\n...names())` to give precedence to what is passed explicitly over the option. \n\nAnother approach would be to merge both filters. I am not sure how, but it\nmight add complexity (while it might be preferred from an R administrator point\nof view).\n\nRelated problems\n----------------\n\nI searched for additional calls to available.packages, and I don't think this\nproblem is present in other calls as no were else the filters argument is\npassed explicitly:\n\n```\ngrep -n -A 1 \"available.packages(\" packages2.R\n262:        av &lt;- available.packages(contriburl = contriburl, method = method,\n263-                                     ...)\n--\n436:            available.packages(contriburl = contriburl, method = method,\n437-                               fields = \"NeedsCompilation\", ...)\n--\n441:        av2 &lt;- available.packages(contriburl = contrib.url(repos, type2),\n442-                                  method = method, ...)\n--\n564:                    available.packages(contriburl = contriburl2, method =\nmethod, ...)),\n565-                        error = function(e)e)\n--\n569:                    available.packages(contriburl = contrib.url(repos,\ntype),\n570-                                       method = method, ...)\n--\n575:                    available.packages(contriburl = contrib.url(repos,\ntype),\n576-                                       method = method, ...)\n--\n760:            available &lt;- available.packages(contriburl = contriburl,\n761-                                            method = method, ...)\n--\n765:            av2 &lt;- available.packages(contriburl = contriburl, filters = f,\n766-                                      method = method, ...)\n```\n\n**However**, on line 437 it doesn't makes use of the recently added new option\n",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1721169399.449219",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "117HA",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18765] filters argument matched by multiple actual arguments with install.packages",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18765"
                            },
                            {
                                "type": "text",
                                "text": "\n\nLluís ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:lluis.revilla@gmail.com",
                                "text": "lluis.revilla@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |lluis.revilla@gmail.com\n\n--- Comment #1 from Lluís ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:lluis.revilla@gmail.com",
                                "text": "lluis.revilla@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nDiagnostic\n----------\n\nI can reproduce this in r86902, nice example! I think this comes from not\nchecking the arguments of filter before using the options at line 765 of\nsrc\/library\/utils\/R\/packages2.R when checking for source packages.\n\nRelevant code from that file:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "if(is.null(available)) {\n        filters <- getOption(\"available_packages_filters\")\n        if(!is.null(filters)) {\n            available <- available.packages(contriburl = contriburl,\n                                            method = method, ...)\n        } else {\n            f <- setdiff(available_packages_filters_default,\n                         c(\"R_version\", \"duplicates\"))\n            av2 <- available.packages(contriburl = contriburl, filters = f,\n                                      method = method, ...)\n            f <- available_packages_filters_db[[\"R_version\"]]\n            f2 <- available_packages_filters_db[[\"duplicates\"]]\n            available <- f2(f(av2))\n        }\n    }\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe filters are saved without checking if anything was passed explicitly to\n"
                            },
                            {
                                "type": "text",
                                "text": "install.packages",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " which then leads to having two arguments with the same name\n("
                            },
                            {
                                "type": "text",
                                "text": "filters = NULL",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and  "
                            },
                            {
                                "type": "text",
                                "text": "filters == \"license\/FOSS\"",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " via ...). \n\nOrigin\n------\n\nThis code was added in r79166 (~4 years ago):\nhttps:\/\/svn.r-project.org\/R\/trunk\/?p=79166 which includes this news: \n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_quote",
                        "elements": [
                            {
                                "type": "text",
                                "text": "When "
                            },
                            {
                                "type": "text",
                                "text": "install.packages()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " fails to find a package in a source repository it mentions package versions which are excluded by their R version requirement and links to hints on why a package might not be found."
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThis doesn't seem intended.\n\nPossible solutions\n------------------\n\nOne solution might be to check `if (is.null(filters) && \"filters\" %in%\n...names())` to give precedence to what is passed explicitly over the option. \n\nAnother approach would be to merge both filters. I am not sure how, but it\nmight add complexity (while it might be preferred from an R administrator point\nof view).\n\nRelated problems\n----------------\n\nI searched for additional calls to available.packages, and I don't think this\nproblem is present in other calls as no were else the filters argument is\npassed explicitly:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "grep -n -A 1 \"available.packages(\" packages2.R\n262:        av <- available.packages(contriburl = contriburl, method = method,\n263-                                     ...)\n--\n436:            available.packages(contriburl = contriburl, method = method,\n437-                               fields = \"NeedsCompilation\", ...)\n--\n441:        av2 <- available.packages(contriburl = contrib.url(repos, type2),\n442-                                  method = method, ...)\n--\n564:                    available.packages(contriburl = contriburl2, method =\nmethod, ...)),\n565-                        error = function(e)e)\n--\n569:                    available.packages(contriburl = contrib.url(repos,\ntype),\n570-                                       method = method, ...)\n--\n575:                    available.packages(contriburl = contrib.url(repos,\ntype),\n576-                                       method = method, ...)\n--\n760:            available <- available.packages(contriburl = contriburl,\n761-                                            method = method, ...)\n--\n765:            av2 <- available.packages(contriburl = contriburl, filters = f,\n766-                                      method = method, ...)\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\n**However**, on line 437 it doesn't makes use of the recently added new option"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "\"available_packages_fields\" which is a different but related bug. In this case\nthere would be an error if filters tried to use a field not present.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1721169399.470169",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xpv",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\"available_packages_fields\" which is a different but related bug. In this case\nthere would be an error if filters tried to use a field not present."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
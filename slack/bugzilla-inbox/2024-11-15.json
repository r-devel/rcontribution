[
    {
        "subtype": "bot_message",
        "text": "*[Bug 14843] dev.print treats background inconsistently*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=14843>\n\n--- Comment #3 from Fang (<mailto:zhou.zfang@gmail.com|zhou.zfang@gmail.com>) ---\nOriginal poster here. I've tested (on windows, version 4.4.1) and can confirm\nthis behaviour is still present after all these years. I seem to recall I was\nusing linux at the time I originally reported, but can't confirm if the issue\nis still happening there.\n\nEffect also appears with dev.copy.\n\ndev.new(); plot(1)\ndev.copy(png, bg=\"red\"); dev.off() # produces transparent graph\n\ndev.copy(jpeg, bg=\"red\"); dev.off() # produces red graph",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1731670961.957149",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Ukha",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 14843] dev.print treats background inconsistently",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=14843"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #3 from Fang ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:zhou.zfang@gmail.com",
                                "text": "zhou.zfang@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nOriginal poster here. I've tested (on windows, version 4.4.1) and can confirm\nthis behaviour is still present after all these years. I seem to recall I was\nusing linux at the time I originally reported, but can't confirm if the issue\nis still happening there.\n\nEffect also appears with dev.copy.\n\ndev.new(); plot(1)\ndev.copy(png, bg=\"red\"); dev.off() # produces transparent graph\n\ndev.copy(jpeg, bg=\"red\"); dev.off() # produces red graph"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18820] download.file() does not send the configured User-Agent with libcurl*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18820>\n\nKurt Hornik (<mailto:Kurt.Hornik@wu.ac.at|Kurt.Hornik@wu.ac.at>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |Kurt.Hornik@wu.ac.at\n\n--- Comment #1 from Kurt Hornik (<mailto:Kurt.Hornik@wu.ac.at|Kurt.Hornik@wu.ac.at>) ---\nThe code in src\/modules\/internet\/libcurl.c does\n\n    SEXP sua = GetOption1(install(\"HTTPUserAgent\")); \/\/ set in utils startup\n    if (TYPEOF(sua) == STRSXP &amp;&amp; LENGTH(sua) == 1 ) {\n        const void *vmax = vmaxget();\n        const char *p = translateChar(STRING_ELT(sua, 0));\n        if (p[0] &amp;&amp; p[1] &amp;&amp; p[2] &amp;&amp; p[0] == 'R' &amp;&amp; p[1] == ' ' &amp;&amp; p[2] == '(')\n{\n        } else {\n            Default = 0;\n            curl_easy_setopt(hnd, CURLOPT_USERAGENT, p);\n        }\n        vmaxset(vmax);\n    }\n\nSo anything not starting with \"R (\" will do:\n\nR&gt; options(\"HTTPUserAgent\" = \"foobar\")\nR&gt; download.file(\"<https:\/\/httpbin.org\/headers>\", tmp &lt;- tempfile());\nreadLines(tmp)\ntrying URL '<https:\/\/httpbin.org\/headers>'\nContent type 'application\/json' length 168 bytes\n==================================================\ndownloaded 168 bytes\n\n[1] \"{\"                                                                    \n[2] \"  \\\"headers\\\": {\"                                                     \n[3] \"    \\\"Accept\\\": \\\"*\/*\\\", \"                                            \n[4] \"    \\\"Host\\\": \\\"<http:\/\/httpbin.org|httpbin.org>\\\", \"                                      \n[5] \"    \\\"User-Agent\\\": \\\"foobar\\\", \"                                     \n[6] \"    \\\"X-Amzn-Trace-Id\\\": \\\"Root=1-67375633-00700a792332138d1b54200f\\\"\"\n[7] \"  }\"                                                                  \n[8] \"}\"",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1731679898.012469",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "xzw",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18820] download.file() does not send the configured User-Agent with libcurl",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18820"
                            },
                            {
                                "type": "text",
                                "text": "\n\nKurt Hornik ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:Kurt.Hornik@wu.ac.at",
                                "text": "Kurt.Hornik@wu.ac.at",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n                 CC|                            |Kurt.Hornik@wu.ac.at\n\n--- Comment #1 from Kurt Hornik ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:Kurt.Hornik@wu.ac.at",
                                "text": "Kurt.Hornik@wu.ac.at",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThe code in src\/modules\/internet\/libcurl.c does\n\n    SEXP sua = GetOption1(install(\"HTTPUserAgent\")); \/\/ set in utils startup\n    if (TYPEOF(sua) == STRSXP && LENGTH(sua) == 1 ) {\n        const void *vmax = vmaxget();\n        const char *p = translateChar(STRING_ELT(sua, 0));\n        if (p[0] && p[1] && p[2] && p[0] == 'R' && p[1] == ' ' && p[2] == '(')\n{\n        } else {\n            Default = 0;\n            curl_easy_setopt(hnd, CURLOPT_USERAGENT, p);\n        }\n        vmaxset(vmax);\n    }\n\nSo anything not starting with \"R (\" will do:\n\nR> options(\"HTTPUserAgent\" = \"foobar\")\nR> download.file(\""
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/httpbin.org\/headers"
                            },
                            {
                                "type": "text",
                                "text": "\", tmp <- tempfile());\nreadLines(tmp)\ntrying URL '"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/httpbin.org\/headers"
                            },
                            {
                                "type": "text",
                                "text": "'\nContent type 'application\/json' length 168 bytes\n==================================================\ndownloaded 168 bytes\n\n[1] \"{\"                                                                    \n[2] \"  \\\"headers\\\": {\"                                                     \n[3] \"    \\\"Accept\\\": \\\"*\/*\\\", \"                                            \n[4] \"    \\\"Host\\\": \\\""
                            },
                            {
                                "type": "link",
                                "url": "http:\/\/httpbin.org",
                                "text": "httpbin.org"
                            },
                            {
                                "type": "text",
                                "text": "\\\", \"                                      \n[5] \"    \\\"User-Agent\\\": \\\"foobar\\\", \"                                     \n[6] \"    \\\"X-Amzn-Trace-Id\\\": \\\"Root=1-67375633-00700a792332138d1b54200f\\\"\"\n[7] \"  }\"                                                                  \n[8] \"}\""
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18821] New: Doc suggestion for axisTicks*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18821>\n\n            Bug ID: 18821\n           Summary: Doc suggestion for axisTicks\n           Product: R\n           Version: R 4.4.x\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Graphics\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:murdoch.duncan@gmail.com|murdoch.duncan@gmail.com>\n\nI was surprised by this behaviour while preparing log axes in `rgl`:\n\n```\n  x &lt;- c(10, 1000)\n  axisTicks(x, log = TRUE)\n  #&gt; Error in axisTicks(x, log = TRUE): log - axis(), 'at' creation, _LARGE_\nrange: invalid {xy}axp or par; nint=5\n  #&gt;   axp[0:1]=(1e+10,1e+308), usr[0:1]=(1e+10,inf); i=298, ni=59\n\n  axisTicks(log(x), log = TRUE)\n  #&gt; [1] 5e+02 1e+03 5e+03 1e+04 5e+04 1e+05 5e+05 1e+06 5e+06\n\n  axisTicks(log10(x), log = TRUE)\n  #&gt; [1]   10   20   50  100  200  500 1000\n```\n\nSo if I have data with a range from 10 to 1000 that I want to plot on a log\nscale, I need to pass log10 of the range to axisTicks, and tick values on the\noriginal scale will be returned.  \n\nThe docs describe the first argument this way:\n\n`usr`   numeric vector of length 2, with c(min, max) axis extents.\n\nwithout mentioning the log10 need explicitly (though the argument name \"usr\" is\nsuggestive that the base graphics `par(\"usr\")` is relevant, and it stores\nlimits that way).\n\nThe docs describe the return value this way:\n\n`axisTicks()` returns a numeric vector of potential axis tick locations, of\nlength approximately `nint+1`.\n\nwhich doesn't specify that the values returned on on the original scale, not\nthe log10 scale.\n\nI'd suggest the following note be added:\n\nNote:  If `log = TRUE`, then `usr` should contain the base 10 log of the range\nto be shown.  The return value will be on the original scale.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1731689943.553419",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "ZI34",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18821] New: Doc suggestion for axisTicks",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18821"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18821\n           Summary: Doc suggestion for axisTicks\n           Product: R\n           Version: R 4.4.x\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: Graphics\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:murdoch.duncan@gmail.com",
                                "text": "murdoch.duncan@gmail.com"
                            },
                            {
                                "type": "text",
                                "text": "\n\nI was surprised by this behaviour while preparing log axes in "
                            },
                            {
                                "type": "text",
                                "text": "rgl",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ":\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "  x <- c(10, 1000)\n  axisTicks(x, log = TRUE)\n  #> Error in axisTicks(x, log = TRUE): log - axis(), 'at' creation, _LARGE_\nrange: invalid {xy}axp or par; nint=5\n  #>   axp[0:1]=(1e+10,1e+308), usr[0:1]=(1e+10,inf); i=298, ni=59\n\n  axisTicks(log(x), log = TRUE)\n  #> [1] 5e+02 1e+03 5e+03 1e+04 5e+04 1e+05 5e+05 1e+06 5e+06\n\n  axisTicks(log10(x), log = TRUE)\n  #> [1]   10   20   50  100  200  500 1000\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nSo if I have data with a range from 10 to 1000 that I want to plot on a log\nscale, I need to pass log10 of the range to axisTicks, and tick values on the\noriginal scale will be returned.  \n\nThe docs describe the first argument this way:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "usr",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "   numeric vector of length 2, with c(min, max) axis extents.\n\nwithout mentioning the log10 need explicitly (though the argument name \"usr\" is\nsuggestive that the base graphics "
                            },
                            {
                                "type": "text",
                                "text": "par(\"usr\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is relevant, and it stores\nlimits that way).\n\nThe docs describe the return value this way:\n\n"
                            },
                            {
                                "type": "text",
                                "text": "axisTicks()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " returns a numeric vector of potential axis tick locations, of\nlength approximately "
                            },
                            {
                                "type": "text",
                                "text": "nint+1",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\n\nwhich doesn't specify that the values returned on on the original scale, not\nthe log10 scale.\n\nI'd suggest the following note be added:\n\nNote:  If "
                            },
                            {
                                "type": "text",
                                "text": "log = TRUE",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", then "
                            },
                            {
                                "type": "text",
                                "text": "usr",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " should contain the base 10 log of the range\nto be shown.  The return value will be on the original scale."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 14843] dev.print treats background inconsistently*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=14843>\n\n--- Comment #4 from Heather Turner (<mailto:ht@heatherturner.net|ht@heatherturner.net>) ---\nThanks to Paul for the pointers and Fang for the updated report. I can now\nreproduce the issue on all (common) platforms:\n\nWindows:\n\n```\n# Copy from windows()\nwindows(bg = \"transparent\") # default\nplot(1)\n# Copy to Cairo TIFF\ndev.copy(tiff, filename =\"windows_transparent_to_cairo.tiff\", \n         bg=\"red\", type = \"cairo\"); dev.off() # transparent background\n# Copy to Windows TIFF\ndev.copy(tiff, filename =\"windows_transparent_to_windows.tiff\", \n         bg=\"red\", type = \"windows\"); dev.off() # red background\n# Copy to Windows PNG\ndev.copy(png, filename =\"windows_transparent_to_windows.png\", \n         bg=\"red\", type = \"windows\"); dev.off() # transparent background\n...so not a problem with transparency support of windows() device\n```\n\nLinux:\n\n```\n# Copy from x11()\nx11(bg = \"transparent\") # default\nplot(1)\n# Copy to Xlib JPEG - note this format does not support transparency\n# but would expect consistent setting of opaque background\ndev.copy(jpeg, filename =\"x11_transparent_to_Xlib.jpeg\", \n         bg=\"red\", type = \"Xlib\"); dev.off() # white background\n# Copy to Cairo JPEG\ndev.copy(jpeg, filename =\"x11_transparent_to_cairo.jpeg\", \n         bg=\"red\", type = \"cairo\"); dev.off() # red background\n```\n\nmacOS: as Linux (or can replace Xlib with quartz). \n\nSo this gives some examples for debugging as suggested by Paul (I'll put this\nup as a potential task for the R Dev Day @ LatinR next week).",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1731691608.188339",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "11w",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 14843] dev.print treats background inconsistently",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=14843"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #4 from Heather Turner ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:ht@heatherturner.net",
                                "text": "ht@heatherturner.net"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThanks to Paul for the pointers and Fang for the updated report. I can now\nreproduce the issue on all (common) platforms:\n\nWindows:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# Copy from windows()\nwindows(bg = \"transparent\") # default\nplot(1)\n# Copy to Cairo TIFF\ndev.copy(tiff, filename =\"windows_transparent_to_cairo.tiff\", \n         bg=\"red\", type = \"cairo\"); dev.off() # transparent background\n# Copy to Windows TIFF\ndev.copy(tiff, filename =\"windows_transparent_to_windows.tiff\", \n         bg=\"red\", type = \"windows\"); dev.off() # red background\n# Copy to Windows PNG\ndev.copy(png, filename =\"windows_transparent_to_windows.png\", \n         bg=\"red\", type = \"windows\"); dev.off() # transparent background\n...so not a problem with transparency support of windows() device\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nLinux:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "# Copy from x11()\nx11(bg = \"transparent\") # default\nplot(1)\n# Copy to Xlib JPEG - note this format does not support transparency\n# but would expect consistent setting of opaque background\ndev.copy(jpeg, filename =\"x11_transparent_to_Xlib.jpeg\", \n         bg=\"red\", type = \"Xlib\"); dev.off() # white background\n# Copy to Cairo JPEG\ndev.copy(jpeg, filename =\"x11_transparent_to_cairo.jpeg\", \n         bg=\"red\", type = \"cairo\"); dev.off() # red background\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nmacOS: as Linux (or can replace Xlib with quartz). \n\nSo this gives some examples for debugging as suggested by Paul (I'll put this\nup as a potential task for the R Dev Day @ LatinR next week)."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18821] Doc suggestion for axisTicks*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18821>\n\nMartin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n     Ever confirmed|0                           |1\n             Status|UNCONFIRMED                 |CONFIRMED\n                 CC|                            |maechler@stat.math.ethz.ch\n\n--- Comment #1 from Martin Maechler (<mailto:maechler@stat.math.ethz.ch|maechler@stat.math.ethz.ch>) ---\nThank you.  The first argument `usr`  is really what  `par(\"usr\")` is (in pkg\n`graphics`) and the meaning and setting of `usr` is derived from what\npar(\"usr\") is typically at that point {if `{graphics}` is used}.\nAlso, all the examples given do use  `pu &lt;- par('usr')`.\nI agree that it will help to add detailing text as you propose.\n\nMaybe there's more that could\/should be improved in that help page:\nDid you notice that `axisTicks()`  has `axTicks()` as its first \"See Also\"\nlink,\nand `axTicks()` may actually be the function that useRs would use more\ntypically than `axisTicks()` directly [`axTicks() calls `axisTicks()` typically\nfor log-scale].\n\nAlso notet that it tries to be an R level \"clone\" of R's graphic engine C code\n(\"createAtVector\") which is used by `axis()` (and I think grid equivalent\ncode),\nand hence the meaning or `usr` and `axp` are basically \"given\" from that goal.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1731712223.370749",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "OKE",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18821] Doc suggestion for axisTicks",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18821"
                            },
                            {
                                "type": "text",
                                "text": "\n\nMartin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") changed:\n\n           What    |Removed                     |Added\n----------------------------------------------------------------------------\n     Ever confirmed|0                           |1\n             Status|UNCONFIRMED                 |CONFIRMED\n                 CC|                            |maechler@stat.math.ethz.ch\n\n--- Comment #1 from Martin Maechler ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:maechler@stat.math.ethz.ch",
                                "text": "maechler@stat.math.ethz.ch",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": ") ---\nThank you.  The first argument "
                            },
                            {
                                "type": "text",
                                "text": "usr",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  is really what  "
                            },
                            {
                                "type": "text",
                                "text": "par(\"usr\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is (in pkg\n"
                            },
                            {
                                "type": "text",
                                "text": "graphics",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ") and the meaning and setting of "
                            },
                            {
                                "type": "text",
                                "text": "usr",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is derived from what\npar(\"usr\") is typically at that point {if "
                            },
                            {
                                "type": "text",
                                "text": "{graphics}",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " is used}.\nAlso, all the examples given do use  "
                            },
                            {
                                "type": "text",
                                "text": "pu <- par('usr')",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ".\nI agree that it will help to add detailing text as you propose.\n\nMaybe there's more that could\/should be improved in that help page:\nDid you notice that "
                            },
                            {
                                "type": "text",
                                "text": "axisTicks()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "  has "
                            },
                            {
                                "type": "text",
                                "text": "axTicks()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " as its first \"See Also\"\nlink,\nand "
                            },
                            {
                                "type": "text",
                                "text": "axTicks()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " may actually be the function that useRs would use more\ntypically than "
                            },
                            {
                                "type": "text",
                                "text": "axisTicks()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " directly ["
                            },
                            {
                                "type": "text",
                                "text": "axTicks() calls ",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "axisTicks()` typically\nfor log-scale].\n\nAlso notet that it tries to be an R level \"clone\" of R's graphic engine C code\n(\"createAtVector\") which is used by "
                            },
                            {
                                "type": "text",
                                "text": "axis()",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " (and I think grid equivalent\ncode),\nand hence the meaning or "
                            },
                            {
                                "type": "text",
                                "text": "usr",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "axp",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " are basically \"given\" from that goal."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18822] New: debug[once](fun, signature=) should support character string 'fun'*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18822>\n\n            Bug ID: 18822\n           Summary: debug[once](fun, signature=) should support character\n                    string 'fun'\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>\n\n```\n&gt; selectMethod(\"Ops\", signature = c(\"array\", \"array\"))\nMethod Definition:\n\nfunction (e1, e2) \ncallGeneric(e1@.Data, e2@.Data)\n&lt;environment: 0x14736d360&gt;\n\nSignatures:\n        e1      e2     \ntarget  \"array\" \"array\"\ndefined \"array\" \"array\"\n&gt; debugonce(\"Ops\", signature = c(\"array\", \"array\"))\nError in methods:::.debugMethod(fun, text, condition, signature, once = TRUE) : \n  Function must be an S4 generic\n&gt; debugonce(getGeneric(\"Ops\"), signature = c(\"array\", \"array\"))\nTracing specified method for function \"Ops\" in environment\n&lt;namespace:base&gt;\n```\n\nI see no reason for `debug` and `debugonce` to be stricter than `selectMethod`\nhere.  I'm hopeful that this barrier to debugging S4 methods can be removed.\n\n```\nIndex: src\/library\/methods\/R\/debug.R\n===================================================================\n--- src\/library\/methods\/R\/debug.R       (revision 87338)\n+++ src\/library\/methods\/R\/debug.R       (working copy)\n@@ -2,11 +2,7 @@\n                          once = FALSE)\n {\n     stopifnot(is.null(condition), identical(text, \"\"))\n-    if (is.primitive(fun))\n-        fun &lt;- getGeneric(fun)\n-    if(!is(fun, \"genericFunction\"))\n-        stop(\"Function must be an S4 generic\")",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1731724146.185789",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "Z6ip",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18822] New: debug[once](fun, signature=) should support character string 'fun'",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18822"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18822\n           Summary: debug[once](fun, signature=) should support character\n                    string 'fun'\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> selectMethod(\"Ops\", signature = c(\"array\", \"array\"))\nMethod Definition:\n\nfunction (e1, e2) \ncallGeneric(e1@.Data, e2@.Data)\n<environment: 0x14736d360>\n\nSignatures:\n        e1      e2     \ntarget  \"array\" \"array\"\ndefined \"array\" \"array\"\n> debugonce(\"Ops\", signature = c(\"array\", \"array\"))\nError in methods:::.debugMethod(fun, text, condition, signature, once = TRUE) : \n  Function must be an S4 generic\n> debugonce(getGeneric(\"Ops\"), signature = c(\"array\", \"array\"))\nTracing specified method for function \"Ops\" in environment\n<namespace:base>\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nI see no reason for "
                            },
                            {
                                "type": "text",
                                "text": "debug",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": "debugonce",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to be stricter than "
                            },
                            {
                                "type": "text",
                                "text": "selectMethod",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\nhere.  I'm hopeful that this barrier to debugging S4 methods can be removed.\n\n```\nIndex: src\/library\/methods\/R\/debug.R\n===================================================================\n--- src\/library\/methods\/R\/debug.R       (revision 87338)\n+++ src\/library\/methods\/R\/debug.R       (working copy)\n@@ -2,11 +2,7 @@\n                          once = FALSE)\n {\n     stopifnot(is.null(condition), identical(text, \"\"))\n-    if (is.primitive(fun))\n-        fun <- getGeneric(fun)\n-    if(!is(fun, \"genericFunction\"))\n-        stop(\"Function must be an S4 generic\")"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18823] New: debugonce(coerce, signature=) signals error due to undefined .Generic*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18823>\n\n            Bug ID: 18823\n           Summary: debugonce(coerce, signature=) signals error due to\n                    undefined .Generic\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>\n\n```\n&gt; debugonce(coerce, signature = c(\"ANY\", \"logical\"))\nTracing specified method for function \"coerce\" in environment\n&lt;namespace:methods&gt;\n&gt; as(0, \"logical\")\nTracing asMethod(object) step 2 \nError in eval(expr, p) : object '.Generic' not found\n&gt; \n```\n\nThe underlying bug seems to be that `as` does not arrange for the variables\n`.Generic` and `.target` to be defined in the evaluation frame.\n\n```\n&gt; debug(coerce, signature = c(\"ANY\", \"logical\"))\nTracing specified method for function \"coerce\" in environment\n&lt;namespace:methods&gt;\n&gt; as(0, \"logical\")\nTracing asMethod(object) step 2 \nCalled from: eval(expr, p)\nBrowse[1]&gt; .Generic\nError in eval(expr, p) : object '.Generic' not found\nBrowse[1]&gt; .target\nError in eval(expr, p) : object '.target' not found\nBrowse[1]&gt; names(environment())\n[1] \"from\"   \"to\"     \"strict\"\nBrowse[1]&gt; Q\n&gt; \n```\n\nIn contrast:\n\n```\n&gt; debug(cbind2, signature = c(\"ANY\", \"ANY\"))\nTracing specified method for function \"cbind2\" in environment\n&lt;namespace:methods&gt;\n&gt; cbind2(NULL, NULL)\nTracing cbind2(NULL, NULL) on entry \nCalled from: eval(expr, p)\nBrowse[1]&gt; .Generic\n[1] \"cbind2\"\nattr(,\"package\")\n[1] \"methods\"\nBrowse[1]&gt; .target\nAn object of class \"signature\"\n     x      y \n\"NULL\" \"NULL\" \nBrowse[1]&gt; names(environment())\n[1] \".Methods\" \".Generic\" \".target\"  \".Method\"  \".defined\" \"...\"      \"y\"       \n[8] \"x\"       \nBrowse[1]&gt; Q\n&gt; \n```\n\nNote that `debug` works because it injects a call to `browser` without an\nadditional call to `untrace` evaluating `.Generic` and possibly `.target`.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1731725901.107249",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "XIi",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18823] New: debugonce(coerce, signature=) signals error due to undefined .Generic",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18823"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18823\n           Summary: debugonce(coerce, signature=) signals error due to\n                    undefined .Generic\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> debugonce(coerce, signature = c(\"ANY\", \"logical\"))\nTracing specified method for function \"coerce\" in environment\n<namespace:methods>\n> as(0, \"logical\")\nTracing asMethod(object) step 2 \nError in eval(expr, p) : object '.Generic' not found\n> \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe underlying bug seems to be that "
                            },
                            {
                                "type": "text",
                                "text": "as",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " does not arrange for the variables\n"
                            },
                            {
                                "type": "text",
                                "text": ".Generic",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and "
                            },
                            {
                                "type": "text",
                                "text": ".target",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " to be defined in the evaluation frame.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> debug(coerce, signature = c(\"ANY\", \"logical\"))\nTracing specified method for function \"coerce\" in environment\n<namespace:methods>\n> as(0, \"logical\")\nTracing asMethod(object) step 2 \nCalled from: eval(expr, p)\nBrowse[1]> .Generic\nError in eval(expr, p) : object '.Generic' not found\nBrowse[1]> .target\nError in eval(expr, p) : object '.target' not found\nBrowse[1]> names(environment())\n[1] \"from\"   \"to\"     \"strict\"\nBrowse[1]> Q\n> \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIn contrast:\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> debug(cbind2, signature = c(\"ANY\", \"ANY\"))\nTracing specified method for function \"cbind2\" in environment\n<namespace:methods>\n> cbind2(NULL, NULL)\nTracing cbind2(NULL, NULL) on entry \nCalled from: eval(expr, p)\nBrowse[1]> .Generic\n[1] \"cbind2\"\nattr(,\"package\")\n[1] \"methods\"\nBrowse[1]> .target\nAn object of class \"signature\"\n     x      y \n\"NULL\" \"NULL\" \nBrowse[1]> names(environment())\n[1] \".Methods\" \".Generic\" \".target\"  \".Method\"  \".defined\" \"...\"      \"y\"       \n[8] \"x\"       \nBrowse[1]> Q\n> \n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nNote that "
                            },
                            {
                                "type": "text",
                                "text": "debug",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " works because it injects a call to "
                            },
                            {
                                "type": "text",
                                "text": "browser",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " without an\nadditional call to "
                            },
                            {
                                "type": "text",
                                "text": "untrace",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " evaluating "
                            },
                            {
                                "type": "text",
                                "text": ".Generic",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " and possibly "
                            },
                            {
                                "type": "text",
                                "text": ".target",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18824] New: debugonce(fun, signature=) signals error on second invocation*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18824>\n\n            Bug ID: 18824\n           Summary: debugonce(fun, signature=) signals error on second\n                    invocation\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: <mailto:R-core@R-project.org|R-core@R-project.org>\n          Reporter: <mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>\n\n```\n&gt; debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\nTracing specified method for function \"cbind2\" in environment\n&lt;namespace:methods&gt;\n&gt; debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\nError in .makeTracedFunction(def, tracer, exit, at, print, doEdit) : \n  cannot use 'at' argument unless the function body has the form '{ ... }'\n```\n\nIt doesn't seem to matter whether the browser is entered between the two calls.\n\n```\n&gt; debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\nTracing specified method for function \"cbind2\" in environment\n&lt;namespace:methods&gt;\n&gt; cbind2(NULL, NULL)\nTracing cbind2(NULL, NULL) on entry \nUntracing specified method for function \"cbind2\" in package\n\"namespace:methods\"\nCalled from: eval(expr, p)\nBrowse[1]&gt; c\nNULL\n&gt; debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\nError in .makeTracedFunction(def, tracer, exit, at, print, doEdit) : \n  cannot use 'at' argument unless the function body has the form '{ ... }'\n```\n\nThe error message isn't immediately illuminating (to me) but the call stack\nseems informative.  I've not debugged into it yet ...\n\n```\n&gt; traceback()\n15: stop(\"cannot use 'at' argument unless the function body has the form '{ ...\n}'\")\n14: .makeTracedFunction(def, tracer, exit, at, print, doEdit)\n13: .initTraceable(.Object, ...)\n12: initialize(value, ...)\n11: initialize(value, ...)\n10: new(traceClass, def = if (doEdit) def else original, tracer = tracer, \n        exit = exit, at = at, print = print, doEdit = edit)\n9: methods:::.TraceWithMethods(fun, quote({\n       untrace(.Generic, signature = .target)\n       browser()\n   }), signature = signature, print = TRUE, at = at, where = &lt;environment&gt;)\n8: eval(expr, p)\n7: eval(expr, p)\n6: eval.parent(call)\n5: trace(fun, quote({\n       untrace(.Generic, signature = .target)\n       browser()\n   }), signature = signature, print = TRUE, at = at)\n4: eval(substitute(trace(fun, tracer, signature = signature, print = TRUE, \n       at = at), list(tracer = tracer)))\n3: eval(substitute(trace(fun, tracer, signature = signature, print = TRUE, \n       at = at), list(tracer = tracer)))\n2: methods:::.debugMethod(fun, text, condition, signature, once = TRUE)\n1: debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\n```",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1731726838.763269",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "n48",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18824] New: debugonce(fun, signature=) signals error on second invocation",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18824"
                            },
                            {
                                "type": "text",
                                "text": "\n\n            Bug ID: 18824\n           Summary: debugonce(fun, signature=) signals error on second\n                    invocation\n           Product: R\n           Version: R-devel (trunk)\n          Hardware: Other\n                OS: Other\n            Status: UNCONFIRMED\n          Severity: normal\n          Priority: P5\n         Component: S4methods\n          Assignee: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:R-core@R-project.org",
                                "text": "R-core@R-project.org",
                                "unsafe": true
                            },
                            {
                                "type": "text",
                                "text": "\n          Reporter: "
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": "\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\nTracing specified method for function \"cbind2\" in environment\n<namespace:methods>\n> debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\nError in .makeTracedFunction(def, tracer, exit, at, print, doEdit) : \n  cannot use 'at' argument unless the function body has the form '{ ... }'\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nIt doesn't seem to matter whether the browser is entered between the two calls.\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\nTracing specified method for function \"cbind2\" in environment\n<namespace:methods>\n> cbind2(NULL, NULL)\nTracing cbind2(NULL, NULL) on entry \nUntracing specified method for function \"cbind2\" in package\n\"namespace:methods\"\nCalled from: eval(expr, p)\nBrowse[1]> c\nNULL\n> debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\nError in .makeTracedFunction(def, tracer, exit, at, print, doEdit) : \n  cannot use 'at' argument unless the function body has the form '{ ... }'\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "\n\nThe error message isn't immediately illuminating (to me) but the call stack\nseems informative.  I've not debugged into it yet ...\n\n"
                            }
                        ]
                    },
                    {
                        "type": "rich_text_preformatted",
                        "elements": [
                            {
                                "type": "text",
                                "text": "> traceback()\n15: stop(\"cannot use 'at' argument unless the function body has the form '{ ...\n}'\")\n14: .makeTracedFunction(def, tracer, exit, at, print, doEdit)\n13: .initTraceable(.Object, ...)\n12: initialize(value, ...)\n11: initialize(value, ...)\n10: new(traceClass, def = if (doEdit) def else original, tracer = tracer, \n        exit = exit, at = at, print = print, doEdit = edit)\n9: methods:::.TraceWithMethods(fun, quote({\n       untrace(.Generic, signature = .target)\n       browser()\n   }), signature = signature, print = TRUE, at = at, where = <environment>)\n8: eval(expr, p)\n7: eval(expr, p)\n6: eval.parent(call)\n5: trace(fun, quote({\n       untrace(.Generic, signature = .target)\n       browser()\n   }), signature = signature, print = TRUE, at = at)\n4: eval(substitute(trace(fun, tracer, signature = signature, print = TRUE, \n       at = at), list(tracer = tracer)))\n3: eval(substitute(trace(fun, tracer, signature = signature, print = TRUE, \n       at = at), list(tracer = tracer)))\n2: methods:::.debugMethod(fun, text, condition, signature, once = TRUE)\n1: debugonce(cbind2, signature = c(\"ANY\", \"ANY\"))\n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "subtype": "bot_message",
        "text": "*[Bug 18822] debug[once](fun, signature=) should support character string 'fun'*\n<https:\/\/bugs.r-project.org\/show_bug.cgi?id=18822>\n\n--- Comment #1 from Mikael Jagan (<mailto:jaganmn@mcmaster.ca|jaganmn@mcmaster.ca>) ---\nI should add that when `signature = NULL`, i.e., when one is debugging\nfunctions that are not S4 methods, character strings `fun` _are_ matched\n(internally) to functions, but this feature is not documented in\n`help(\"debug\")`.",
        "username": "r-bugs notifier",
        "icons": {
            "emoji": ":robot_face:"
        },
        "type": "message",
        "ts": "1731727505.032649",
        "bot_id": "B06769YJX9Q",
        "app_id": "A024R9PQM",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "tSard",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "[Bug 18822] debug[once](fun, signature=) should support character string 'fun'",
                                "style": {
                                    "bold": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "\n"
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/bugs.r-project.org\/show_bug.cgi?id=18822"
                            },
                            {
                                "type": "text",
                                "text": "\n\n--- Comment #1 from Mikael Jagan ("
                            },
                            {
                                "type": "link",
                                "url": "mailto:jaganmn@mcmaster.ca",
                                "text": "jaganmn@mcmaster.ca"
                            },
                            {
                                "type": "text",
                                "text": ") ---\nI should add that when "
                            },
                            {
                                "type": "text",
                                "text": "signature = NULL",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": ", i.e., when one is debugging\nfunctions that are not S4 methods, character strings "
                            },
                            {
                                "type": "text",
                                "text": "fun",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "text",
                                "text": "are",
                                "style": {
                                    "italic": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " matched\n(internally) to functions, but this feature is not documented in\n"
                            },
                            {
                                "type": "text",
                                "text": "help(\"debug\")",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": "."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]
[
    {
        "user": "U057G5HEN7L",
        "type": "message",
        "ts": "1712047687.958399",
        "client_msg_id": "00187b07-89db-4fb2-916a-fa65b0d9919b",
        "text": "There's a matching `Rf_unprotect(1);` at the end of the function, this is fine, and required.\n\nAnswering your question, yes, storing an object in a preserved one protects it, but then, you need to protect that object while you tinker around until you got that inserted.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g4871788c96a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4871788c96afa4d21596bccf08fa34d5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "Iñaki",
            "real_name": "Iñaki Ucar",
            "display_name": "Iñaki Ucar",
            "team": "T01DW9DLB2A",
            "name": "iucar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711898986.170349",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "dDjyM",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "There's a matching "
                            },
                            {
                                "type": "text",
                                "text": "Rf_unprotect(1);",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " at the end of the function, this is fine, and required.\n\nAnswering your question, yes, storing an object in a preserved one protects it, but then, you need to protect that object while you tinker around until you got that inserted."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U057G5HEN7L",
        "type": "message",
        "ts": "1712048185.114959",
        "client_msg_id": "dd29e22a-5e5d-40e4-8ba1-4dd54488b9dd",
        "text": "On a side note, you may want to take a look at how Rcpp does this: <https:\/\/github.com\/RcppCore\/Rcpp\/blob\/03fd09a1bd0b4dce5be262dd95f779d9a855e097\/src\/barrier.cpp#L92-L130>\n\nThe mechanism uses CONS cells instead of a VECSXP. It was outlined by Luke Tierney and we just followed his advice. We carry around the cells in the Rcpp objects, which allows us to directly access and remove the underlying R object when the Rcpp object is removed without the need of a separate hashmap structure.\n\nThere's nothing inherently bad in using a VECSXP and a separate hashmap (maybe you need that, I don't know the specifics), but you could simplify this.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g4871788c96a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4871788c96afa4d21596bccf08fa34d5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "Iñaki",
            "real_name": "Iñaki Ucar",
            "display_name": "Iñaki Ucar",
            "team": "T01DW9DLB2A",
            "name": "iucar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711898986.170349",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "kuJgF",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "On a side note, you may want to take a look at how Rcpp does this: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/RcppCore\/Rcpp\/blob\/03fd09a1bd0b4dce5be262dd95f779d9a855e097\/src\/barrier.cpp#L92-L130"
                            },
                            {
                                "type": "text",
                                "text": "\n\nThe mechanism uses CONS cells instead of a VECSXP. It was outlined by Luke Tierney and we just followed his advice. We carry around the cells in the Rcpp objects, which allows us to directly access and remove the underlying R object when the Rcpp object is removed without the need of a separate hashmap structure.\n\nThere's nothing inherently bad in using a VECSXP and a separate hashmap (maybe you need that, I don't know the specifics), but you could simplify this."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U053DCDAF6U",
        "type": "message",
        "ts": "1712068890.116199",
        "client_msg_id": "0fc6f550-0759-4298-86ee-fcf4b6a414b0",
        "text": "Thank you for the thoughtful response <@U057G5HEN7L>! I’m not familiar with a CONS cells and i cant seem to google the right keywords (i guess its too similar to `const` :see_no_evil: ). Do you have any references I can read about?",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "e714e755f196",
            "image_72": "https:\/\/avatars.slack-edge.com\/2023-04-11\/5077198575479_e714e755f19651f9eb3b_72.jpg",
            "first_name": "Josiah",
            "real_name": "Josiah Parry",
            "display_name": "",
            "team": "T01DW9DLB2A",
            "name": "josiah.parry",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711898986.170349",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "O+fVr",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Thank you for the thoughtful response "
                            },
                            {
                                "type": "user",
                                "user_id": "U057G5HEN7L"
                            },
                            {
                                "type": "text",
                                "text": "! I’m not familiar with a CONS cells and i cant seem to google the right keywords (i guess its too similar to "
                            },
                            {
                                "type": "text",
                                "text": "const",
                                "style": {
                                    "code": true
                                }
                            },
                            {
                                "type": "text",
                                "text": " "
                            },
                            {
                                "type": "emoji",
                                "name": "see_no_evil",
                                "unicode": "1f648"
                            },
                            {
                                "type": "text",
                                "text": " ). Do you have any references I can read about?"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U057G5HEN7L",
        "type": "message",
        "ts": "1712085950.413979",
        "client_msg_id": "0b52693e-83af-4894-9ec0-487ec4b4c382",
        "text": "They're pairlists, basically. Here you go: <https:\/\/github.com\/hadley\/r-internals\/blob\/master\/pairlists.md>",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g4871788c96a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4871788c96afa4d21596bccf08fa34d5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "Iñaki",
            "real_name": "Iñaki Ucar",
            "display_name": "Iñaki Ucar",
            "team": "T01DW9DLB2A",
            "name": "iucar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711898986.170349",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "RzIQC",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "They're pairlists, basically. Here you go: "
                            },
                            {
                                "type": "link",
                                "url": "https:\/\/github.com\/hadley\/r-internals\/blob\/master\/pairlists.md"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "user": "U057G5HEN7L",
        "type": "message",
        "ts": "1712086027.842229",
        "client_msg_id": "c6710f8a-3372-454f-b50d-3add77099b28",
        "text": "Note that LISTSXP is not a list(), those are VECSXP. A pairlist is more \"primitive\", it's just a linked list.",
        "team": "T01DW9DLB2A",
        "user_team": "T01DW9DLB2A",
        "source_team": "T01DW9DLB2A",
        "user_profile": {
            "avatar_hash": "g4871788c96a",
            "image_72": "https:\/\/secure.gravatar.com\/avatar\/4871788c96afa4d21596bccf08fa34d5.jpg?s=72&d=https%3A%2F%2Fa.slack-edge.com%2Fdf10d%2Fimg%2Favatars%2Fava_0000-72.png",
            "first_name": "Iñaki",
            "real_name": "Iñaki Ucar",
            "display_name": "Iñaki Ucar",
            "team": "T01DW9DLB2A",
            "name": "iucar",
            "is_restricted": false,
            "is_ultra_restricted": false
        },
        "thread_ts": "1711898986.170349",
        "parent_user_id": "U053DCDAF6U",
        "blocks": [
            {
                "type": "rich_text",
                "block_id": "pV7af",
                "elements": [
                    {
                        "type": "rich_text_section",
                        "elements": [
                            {
                                "type": "text",
                                "text": "Note that LISTSXP is not a list(), those are VECSXP. A pairlist is more \"primitive\", it's just a linked list."
                            }
                        ]
                    }
                ]
            }
        ]
    }
]